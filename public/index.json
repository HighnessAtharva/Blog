[{"content":" A Dystopian Cyberpunk Masterpiece Enter a cyberpunk hellscape that defies all conventions of direction and sanity. Descend into the depths or ascend into a towering labyrinth; in this desolate world, where creatures from the realms of Hellraiser and Warhammer 40k roam freely, one man, Killy, armed with a functional gun, embarks on a treacherous journey through perilous floors. His mission: to locate an individual possessing the elusive \u0026ldquo;Net Gene,\u0026rdquo; a genetic marker granting access to the central control network of this technological wasteland.\nBLAME!, a captivating manga by Tsutomu Nihei, possesses an allure that is difficult to resist. As an avid consumer of epic and fantastical world-building, I find Nihei\u0026rsquo;s creation irresistible. Though the narrative may not always be coherent and leaves many questions unanswered, there is an undeniable magnitude to its scope. Moreover, Nihei\u0026rsquo;s awe-inspiring artwork and technical drawing skills grant us sights that would be breathtaking and even beautiful if they weren\u0026rsquo;t shrouded in such grimness.\n\u003c!DOCTYPE html\u003e\rAnthropodic Horrors\rBewitching Matrix Vibes\rSerial Experiments Lain\rGrimes-likeMurderbots\rGrim Atmosphere\rHarrowing Architechture\rImage credits: Tsutomu Nihei\nThis masterpiece excels in transcending the boundaries of post-apocalyptic and dystopian literature. While it explores familiar themes, such as humanity\u0026rsquo;s struggle against technology gone awry, it does so in an extraordinary and peculiar manner. BLAME! ventures into the realm of the bizarre, taking unexpected detours into parallel realities or comparable realms. This departure from convention breathes fresh life into the dystopian genre, infusing it with an element of strangeness rarely seen before.\nNote that I read the entirety of BLAME! back in 2020 and wrote some rushed reviews. This post is more of a Redux of my thoughts.\nBLAME! Master Edition #1 Rating: ⭐⭐⭐⭐⭐\nSummary\nKilly, the enigmatic protagonist armed with the formidable Gravitational Beam Emitter, embarks on a relentless quest through the sprawling technological landscape of \u0026ldquo;The City.\u0026rdquo; His mission is to locate the elusive Net Terminal Genes, genetic markers that grant access to the Netsphere—an intricate computerized control network within The City. This awe-inspiring volume delves into a world inhabited by scattered human and transhuman tribes, as well as the menacing cyborgs known as Silicon Life. As the Megastructure barriers separate the vast floors of The City, Killy\u0026rsquo;s pursuit of the Net Terminal Genes becomes intertwined with the desperate battle against the rampaging Safeguard robots, seeking to annihilate humanity and halt the chaotic expansion of the Megastructure.\nReview\nPrepare to be immersed in a world that defies the limits of imagination. This master edition is an absolute marvel of science fiction storytelling within the manga medium. This awe-inspiring edition transcends expectations, delving into a realm where Silicon Life, mechanized robots, and weaponized systems thrive amidst the ultra-futuristic metallic skyscrapers and biochemical warfare. Never before have I encountered such fantastical heights in a manga, where each page unfolds an unpredictable narrative of peril, strange alliances, and blood-soaked battles.\nThe storytelling approach in BLAME! is unique, as the dialogue remains deliberately sparse. However, this deliberate choice is justified by the relentless onslaught of gory battle scenes, with smoke and shrapnel flying in all directions, engulfing the reader in a whirlwind of action and chaos. The forefront of this manga is undeniably its heart-stopping gunfights and electrifying combat sequences, leaving just enough breathing space for readers to absorb the events of the previous chapters, akin to \u0026ldquo;Log Entries\u0026rdquo; meticulously chronicling the journey. With each log, the manga not only progresses the storyline but also unveils the intricate world-building and the gradual revelation of technological lore, teasing with artifacts and hidden clues that hint at what awaits in the future.\nThe artwork deserves boundless praise and admiration. Its ambitious scope transports readers into architectural grandeur, unveiling skeletal frameworks and the poised and composed presence of the antagonists. However, I must caution that BLAME! demands meticulous attention to detail. Each page contains a wealth of information, and even the smallest oversight may lead to missing a crucial plot twist, as I regrettably experienced. There is little to no dialogue so this will be a fresh read for those who enjoy a well-crafted narrative. Furthermore, a host of secondary characters is introduced with each progressing log, and the intensity of the action escalates exponentially as Killy ascends the higher platforms. The vivid imagery presented may be overwhelming for first-time readers, necessitating a keen grasp of the character dynamics and a vigilant eye to navigate through the awe-inspiring visual tapestry.\nBLAME! has successfully enraptured me within its narrative grasp, and my enthusiasm for this masterpiece knows no bounds. I find myself daydreaming about the possibility of this manga being adapted into an RPG-style video game, a platformer that would immerse players in the enthralling world it meticulously constructs. Additionally, an animated and highly creative Netflix movie adaptation has caught my attention, which I intend to savor within the week.\nThe recurring pattern of Killy triumphing over the ordeals he encounters as he scales walls and overcomes his nemeses, whether alone or alongside unexpected allies, serves as a getaway card for the author due to the lack of comprehensive background information on our protagonist. While this may be perceived as a potential weakness, it ultimately amplifies the intensity of the battles, which are nothing short of captivating. With each clash, an array of bio-intelligent machinery and weaponry is introduced, enriching the tapestry of this awe-inspiring saga. Be prepared to engage in mental acrobatics, carefully tracking the ever-evolving cast as you traverse the pages.\nHaving devoured this chunk of art in one exhilarating sitting of under three hours, I am enthralled by the sheer magnitude of achievement within its first 400 pages. The climactic crescendo leaves readers breathless, with grandiose biome tubes, crumbling forts, towering mega bosses, and the gathering storm delivering an explosive payoff that surpasses all expectations. Yet, it is crucial to acknowledge that much of the story remains untangled, inviting readers to remain ardently committed as subsequent editions unravel the mysteries woven within the pages.\nBLAME! reaches far beyond the conventional themes of android-human entanglements, immersing readers in a realm that transcends boundaries. The artwork stands as the primary allure, while the minimalist dialogue strikes with the impact of a linguistic barrage. This action-centric, exquisitely illustrated manga has captivated my senses, and I am eager to venture further into its rich and revolutionary world.\nBLAME! Master Edition #2 Rating: ⭐⭐⭐⭐\nSummary\nWe continue the epic journey of Killy, the enigmatic protagonist armed with cybernetic abilities and a relentless quest to obtain the elusive Net Gene. Along the way, he encounters Cibo, a resourceful engineer, and together they navigate a treacherous landscape indirectly supported by the City\u0026rsquo;s Authority. As they strive to overcome the relentless opposition of the Safeguard, Killy and Cibo\u0026rsquo;s path intertwines with a young girl named Sanakan and a tribe of warriors known as the Electro-Fishers. The intricate plot unravels as alliances are forged and the true nature of their adversaries is revealed, leading to a climactic confrontation that leaves an indelible mark on the characters\u0026rsquo; souls.\nReview\nThe second volume surpasses the majority of manga I\u0026rsquo;ve encountered in recent memory, propelled by its titanic and profoundly ambitious storytelling, the seamless progression of its plot, and the breakneck pace of action that perfectly complements the darker undertones permeating its artistic choices. Each page of this second master volume exudes a sense of premium quality, leaving me lamenting the lack of recognition this manga receives, for it truly deserves to be heralded as a masterpiece.\nThe cyber world\u0026rsquo;s ever-expanding terminology now reaches out to embrace the reader, seamlessly guiding them through the intricate web of switching platforms, relentless adversaries, and the menacing silicon nemesis that Killy encounters in his quest for system stability and the elusive Net Gene. Everything in this volume is amplified to a grander scale, evoking a nearly spiritual experience. In the final logs presented within this compendium, we bear witness to a colossal clash between two titans—a builder and a bot—unleashing their destructive might in a bombastic display. The artist fearlessly unleashes their creative prowess, delivering jaw-dropping and awe-inspiring moments that permeate the entire volume.\nThe art masterfully complements the narrative, embracing rough and dark undertones that evoke a sense of foreboding. The stark contrast between black and white is expertly utilized, particularly during explosive sequences, thematic architectural explorations, and moments of quiet contemplation. The climactic confrontation between the female protagonist, Cibo, and the predatory higher-life forms is a poignant and emotionally devastating scene, richly and masterfully illustrated to the point of feeling divine.\nFrom the very beginning, the stakes soar to unparalleled heights, and with Log Entry 13, the protagonists find themselves firmly entrenched in a solid directive, adding immeasurable value to the reading experience. However, it is the artwork that truly fascinated me. While the story itself remains solid, it is the stylistic choices and the raw, brutal tones that leave an indelible impact, intensifying the reading experience tenfold.\nReturning to the subject of character development, it is on an astonishing level within this volume. By the hundredth page, numerous major players are introduced, and surprising revelations lean towards the climax. The beginning of this volume brims with speed and accomplishment, setting a relentless pace that propels the narrative forward. The crumbling mega-net fortress of Toha Heavy Industries, despite its dilapidated state, remains a brilliant architectural marvel, a testament to the artist\u0026rsquo;s ability to breathe life into such ambitious frameworks.\nThe figures of the antagonists and the subsequent battles reach an unprecedented level of darkness, with stakes stacked higher than ever before. New weaponry and captivating combat maneuvers enhance the intensity of the clashes. It is impossible for me to resist envisioning a faithful adaptation of this manga, as it possesses the potential to be truly remarkable. I simply cannot get enough of BLAME! With the tragically gripping conclusion of this second master volume, I eagerly await the opportunity to immerse myself in the following installment. This unexpected turn of events has taken the story to unforeseen depths, with the art becoming more evocative and the terminologies weighing heavier upon the reader\u0026rsquo;s mind. BLAME! Master Edition Vol 2 is a testament to the pinnacle of cyberpunk and steampunk storytelling.\nBLAME! Master Edition #3 Rating: ⭐⭐⭐⭐\nSummary\nThis volume seamlessly carries forward the narrative from its predecessor, plunging readers into a whirlwind of relentless action and heightened stakes. Killy and Cibo find themselves defending the Electro-Fishers within the cylindrical megastructure of Toha Heavy Industries. Here, they encounter Mensab, an independent AI, and her guardian Seu, a human. As the Silicon Life and the formidable Sanakan launch devastating attacks, the megastructure teeters on the brink of destruction. Amidst the chaos, Mensab manages to provide Cibo with a sample of Seu\u0026rsquo;s DNA, further adding to the intricate web of mysteries.\nReview\nThe stakes are raised to unprecedented heights, entangling the reader in a complex web of new characters and revelations about the true nature of the enigmatic Net-Realm. The artistry remains a pinnacle of excellence, captivating the senses with its exceptional choices and meticulous attention to detail.\nWith each passing volume, the terminologies and lore of the Net-Realm and its inhabitants stranded within Toha Heavy Industries become increasingly intricate, yet remarkably comprehensible. The introduction of new events, logs, and characters ensures that the story remains consistently engaging. As expected from the world of BLAME!, gunfights, net terminal gene guardians, and antagonistic figures pervade the pages, flexing their extraordinary power against a backdrop of mystic silhouettes. The artistic choices continue to astound, showcasing the sheer magnitude of the author\u0026rsquo;s vision.\nBuilding upon the world-changing events of the previous volume, the crash of Cibo\u0026rsquo;s virtual entity and the subsequent hybridization with Sanakan introduce a much-needed complexity to the narrative. This serves as a gateway to unexplored technological marvels, which the author deftly presents within the introductory part of this volume. The evolution and growth of the characters become evident as the story progresses, with Kerri\u0026rsquo;s identity reveal and newfound powers transforming him into a formidable warrior. His unwavering resolve to confront the impeccably illustrated Safeguards at Cave 8 speaks volumes about his character development.\nBLAME! Master Edition Vol 3 propels the story forward at a breakneck pace, continuing the saga with unyielding intensity.\nThe arrival of Mensab and Seu, heralded by the evocative chapter title \u0026lsquo;Digital Knight,\u0026rsquo; introduces one of the most promising and iconic duos within the series. Both characters capture the imagination, but Seu, in particular, captivates with an air of grandiosity that resonates deeply. The anticipation builds as Seu fights his way through the titans at Cave 13 in search of reclaiming his lost identity. This volume takes readers on a journey filled with leaps, travels, teleportations, and the discovery of hidden areas and caches. Encounters with higher life forms add to the tapestry of surprises, as the manga takes a darker turn, delving into more character-oriented storytelling that offers respite from the overwhelming and awe-inspiring world-building.\nWhile it is expected that Cibo\u0026rsquo;s arc will undergo a revelation of larger-than-life proportions, it is unlikely that the writer will steer her entirely toward the dark side. Countless surprises lie in wait within the pages of the next volume. The architectural drawings within BLAME! Master Edition Vol 3 are exemplary, showcasing futuristic furnishings and intricate details. The author fearlessly introduces a myriad of experimental and hypothetical sci-fi marvels, further enriching the reading experience. And the action? It transcends the boundaries of imagination, delivering an out-of-this-world, kick-ass spectacle. This manga deserves an animated adaptation that can do justice to its remarkable essence.\nBLAME! Master Edition #4 Rating: ⭐⭐⭐⭐⭐\nSummary\nBLAME! Master Edition Vol 4 takes Killy and Cibo into a realm within the City ruled by a formidable group of Silicon Life. Here, they forge an alliance with the \u0026ldquo;provisional Safeguards,\u0026rdquo; Dhomochevsky and Iko. However, their efforts are hampered when the leader of the Silicon faction, Davine, steals Seu\u0026rsquo;s DNA to gain access to the Netsphere. In a desperate bid to stop her, Dhomochevsky sacrifices himself, but not before Davine unleashes a Level 9 Safeguard within Cibo\u0026rsquo;s body. The destructive power of the Cibo Safeguard brings about the annihilation of the entire region.\nReview\nReaders are presented with a shift in tone from its predecessors, trading intense action for dialogue-driven moments. While this change of pace might catch some readers off guard, it is by no means a detriment to the story. In fact, it provides a much-needed breather for both the author and the audience after the relentless chaos and battles that have unfolded in the preceding volumes. It is a testament to the author\u0026rsquo;s skill that they can seamlessly navigate between action-packed sequences and contemplative storytelling.\nThis volume primarily delves into the ramifications of the transfer protocols and the partial destruction of Toha Heavy Industries\u0026rsquo; original location. It also marks the departure of key players from the narrative, making way for fresh faces that bring new perspectives and opportunities. One such character is Dhomochevsky, who receives significant page time in this volume. While the prolonged interaction between Dhomochevsky and Cibo may seem uncharacteristic of the author\u0026rsquo;s style, it serves to deepen the exploration of their individual journeys.\nThe artwork continues to astound, with breathtaking depictions of colossal explosions, shifting landscapes, and the awe-inspiring Shifting Metallic Towers. While major battles take a backseat in this volume, the artistic efforts are channeled into plot progression and the exploration of the newly formed location. Each character embarks on their own personal mission, be it finding the Net Terminal Gene, locating allies, acquiring crucial system keys and weapon caches, or simply restoring order and recovering lost parts. The author leaves our protagonists in the hands of their allies, who make surprising debuts and hint at anomalies within the Net System Megaworld. The grand scope of space-time within this franchise remains unparalleled, as the author fearlessly makes bold and ambitious choices that elevate the storytelling to extraordinary heights.\nAlthough the drawing style in this issue is not as dark and shadowy as before, the representation of Safeguards like Pcell and Dhomochevsky is particularly impressive. Dhomochevsky\u0026rsquo;s character seems to borrow a few traits from the beloved Kyrii, further adding depth to the narrative. Character development takes center stage in this volume, intertwining with plot progression and the unveiling of a multitude of locations and long-hidden secrets. The introduction of elements such as the \u0026lsquo;cloning machine\u0026rsquo; and the lurking digital spirits adds layers of intrigue and expands the readers\u0026rsquo; understanding of this intricate world.\nKyrii remains a fan-favorite character, followed closely by Cibo, as their complex journeys continue to captivate readers. BLAME! Master Edition Vol 4 stands as another brilliant addition to a franchise that consistently defies expectations, showcasing the author\u0026rsquo;s ambitious and masterful approach to the demanding genre of science fiction. It is undeniably on par with the most esteemed works of high fantasy, and its classification as Hard Sci-Fi comes without hesitation. The respite provided in this volume allows readers to step back, breathe, and immerse themselves in the stunning, yet inevitably crumbling Megaworld. The artistry within these pages could not be more impeccable.\nHaving official covered more than half of the story that lies in BLAME!, this volume strikes an impeccable balance between complexity and restraint. It is a testament to the author\u0026rsquo;s ability to navigate various storytelling tones and deliver a captivating narrative that continues to enthrall and surprise. For fans of the series, this volume is an absolute must-read, showcasing the unparalleled talent and vision that has propelled BLAME! into the upper echelons of the science fiction genre. Prepare to be spellbound by the seamless fusion of art and narrative as you journey deeper into the realms of this extraordinary universe.\nBLAME! Master Edition #5 Rating: ⭐⭐⭐⭐⭐\nSummary\nBLAME! Master Edition Vol 5 thrusts us into the future, 14 years after the devastating attack on Killy\u0026rsquo;s body. As he embarks on his relentless journey, he stumbles upon a startling revelation: Cibo, now afflicted by amnesia, has been rescued by Sanakan, who has allied with the Authority against the remaining Safeguard forces. Within Cibo\u0026rsquo;s body lies a precious \u0026ldquo;sphere\u0026rdquo; containing her genetic information. Tragedy unfolds as both Cibo and Sanakan meet their demise in a climactic showdown against the Safeguard. However, Killy emerges as the sole survivor, preserving the sphere. In a virtual reality encounter with a previously encountered AI, the echoes of Killy\u0026rsquo;s quest reverberate through time.\nReview\nThis volume, with its intricate layers of fighting, violence, and scientific complexity, defies easy summarization. Davine Lu\u0026rsquo;s relentless pursuit of accessing the Netsphere reveals the vulnerabilities of the Administration, while our main characters navigate the unofficial stratum, where the elusive Net Terminal Gene may not be the ultimate key to their destiny. With each passing volume, the destruction of the system and the megastructure becomes an increasingly conceivable outcome, leaving us to ponder the fate of our protagonists.\nThe high-stakes narrative takes a gripping turn as the genetic information acquired in the previous volume falls into the hands of Pcell, prompting a desperate struggle to reclaim it. Davine Lu\u0026rsquo;s impatience with the Administration\u0026rsquo;s obstacles leads to the creation of a Level 9 safeguard within Cibo, unleashing chaos and destruction. The story hurtles towards an impending climax, leaving us to question whether Cibo and Kyrii will triumph or meet a tragic end. It is difficult to envision any other alternatives as the tension builds to an almost unbearable crescendo.\nOne of the defining aspects of this series is the dark and atmospheric artwork that beautifully complements the narrative. BLAME! employs minimal dialogue and narration, relying heavily on the power of visuals to convey the story. It is through these evocative illustrations that the universe unfolds before our eyes, inviting us to perceive, contemplate, and interpret the present and the past. With each volume, the familiarity with this expansive universe allows readers to draw connections and uncover deeper meanings that were once elusive. The unforgiving world depicted in BLAME! leaves no room for sentimentality or weakness. It is a world that demands resilience and survival, a fact that reverberates throughout the characters we encounter. While the characters may not possess profound depths, they serve their purpose flawlessly. Some harbor logical motivations, while others remain enigmatic, adding to the air of mystery that permeates the narrative.\nCharacter development takes a backseat in this volume, as the focus shifts to the mechanical darkness of the environment and the artistry that brings it to life. Rather than delving into extensive backstories or predictable arcs, BLAME! confidently embraces the harshness of its setting, allowing the mechanical intricacies and the somber atmosphere to take center stage. There is a haunting beauty in catching glimpses of emotion flickering through the hardened exteriors of the characters. It is a testament to the masterful artistry that even without overt displays of emotion, these characters resonate and leave an indelible mark.\nTsutomu Nihei skillfully balances the convergence of chaos and artistry, drawing readers deeper into the captivating world crafted by the author. With its striking visuals, relentless pacing, and unyielding exploration of a dystopian future, this volume keeps readers on the edge of their seats, eagerly awaiting the next revelation. As we approach the series\u0026rsquo; conclusion, the anticipation for the final act intensifies, promising a symphony of destruction, revelation, and, perhaps, a glimmer of hope.\nBLAME! Master Edition #6 Rating: ⭐⭐⭐⭐\nSummary\nBLAME! Master Edition Vol 6 marks the culmination of this grand series. Killy, on his arduous journey, finally reaches the edge of the sprawling City, only to be struck down by a devastating gunshot to the head. Yet, in an unexpected turn of events, a torrential flood carries him to the surface, where he witnesses the ethereal beauty of the starry night sky. As the enigmatic sphere begins to hatch, the final page reveals Killy once again navigating the labyrinthine corridors of the City, this time accompanied by a young child clad in a hazmat suit.\nReview\nIn this last installment of the masterful BLAME! series, I am left with a tapestry of impressions that linger and resonate long after the final page is turned. The vastness of this city, spanning across an entire star system, beckons contemplation. It poses profound questions about the fate of digital life when its creators cease to exist. How does the replication of life in a silicon format shape the future? Are viruses destined to mutate and evolve within this new realm, or will they carve their own unique path? And what role does humanity play in this intricate framework?\nWhile ReBoot, a beloved animated series, once playfully delved into similar depths, the darkness and seamless integration of the online and offline worlds in BLAME! present a more intriguing exploration. It is a conceptual world that surpasses the philosophical posturing and religious iconography often found in similar narratives. Instead, it beckons us to embark on a journey that is equal parts fascinating and frustrating, unraveling its secrets with each successive volume.\nThroughout the series, I found myself enchanted by Tsutomu Nihei\u0026rsquo;s ability to evoke awe and wonder through the sprawling landscapes and the interplay of distance within the frames. It is a testament to his artistry that within the expanse of this dystopian universe, I, as a human reader, felt both humbled and captivated. The time invested in traversing this vast and enigmatic world proved well spent, as it left an indelible impression that lingers.\nHowever, it must be acknowledged that the series is not without its flaws. The lack of clarity and occasional repetition within action sequences could test the patience of even the most ardent readers. Deciphering the intricacies of the plot without supplementary information can prove an insurmountable challenge. The need for essential summaries to comprehend the story\u0026rsquo;s development underscores the complexity of the narrative and the reliance on inside knowledge. Despite these hurdles, Nihei\u0026rsquo;s skillful depiction of expansive spaces and imaginative characters remains a highlight of the series.\nThe quest for the elusive Net Terminal gene, a focal point of intrigue throughout the series, is met with mixed results in this final volume. While hints suggest that Kyrii may have achieved this crucial objective, the conclusion leaves room for interpretation, adding a sense of strangeness, haunting beauty, and even a touch of humor. BLAME! is a series that defies convention, eschewing the confines of a simple and predictable heroic tale. Instead, it meanders and evolves, defying expectations at every turn.\nUltimately, this concluding volume presents a fabulous and expansive tale, rich in imagination and scope. It is a journey that would have benefited from additional editorial oversight, providing a more streamlined and cohesive narrative. Nevertheless, the sheer beauty and enigmatic nature of this series make it a worthwhile exploration for fans of the genre. Tsutomu Nihei\u0026rsquo;s masterful creation leaves an indelible mark, a testament to the intricate dance between art and storytelling.\nEnding Thoughts There is something refreshing about a work of literature that forgoes attempting to convey grandiose and profound messages, focusing instead on delivering exhilarating action sequences and venturing into the realm of the bizarre. BLAME! transports readers through kick-ass adventures and stimulates contemplation on occasion.\nIf Nihei\u0026rsquo;s BLAME! were to be considered a transhumanist work, it would serve as a nightmarish counterpoint to the uplifting visions of the future associated with this movement. BLAME! exposes the dark underbelly of transhumanism, where humanity, unburdened by its own essence, readily employs technology to transform themselves into monstrous entities. These beings acquire extraordinary abilities while dooming themselves to extinction. In the world of BLAME!, the Singularity arrived long ago, but instead of ushering in a new era of prosperity, it has left nothing but devastation in its wake.\nNevertheless, while all these elements coexist within BLAME!, they remain secondary to its primary purpose: to narrate an enthralling story set in a fantastical world. In this aspect, I am reminded of George Miller\u0026rsquo;s Mad Max: Fury Road, a cinematic spectacle that ranks among the best action movies of recent times and possibly all time. Miller\u0026rsquo;s focus throughout the film lies in mesmerizing the audience with mind-blowing stunts and exhilarating chase sequences, rather than engaging in philosophical reflections on the human condition.\n\u003c!DOCTYPE html\u003e\rCyberpunk Interiors\rUnnerving Battle Scenes\rMacroscopic Beasts\rAbstract Imagery\rWorld Bending Dimensions\rTranshuman Mercs\rImage credits: Tsutomu Nihei\nIronically, this focus on spectacle, on style over substance, liberates Fury Road to incorporate subtle moments, interactions, and peculiar diversions, thereby infusing the film with a depth and intrigue that would be otherwise unattainable. BLAME! shares these subtle nuances, be it Killy\u0026rsquo;s chance encounter with the enigmatic Dry Men, wherein he demonstrates his humanity by saving one of their children, or the surprisingly tender bond between the artificial intelligence Mensab and her devoted guardian Seu. Furthermore, the bittersweet aside that unfolds just before the series\u0026rsquo; conclusion adds an additional layer of complexity.\nThese moments gracefully coexist with Nihei\u0026rsquo;s mind-bending action sequences, enhancing the overall reading experience without detracting from the weirdness that defines BLAME! so thoroughly. Personally, I am grateful for this delicate balance, as it is precisely these elements that constitute the primary reasons why I am drawn to BLAME!. These glimpses of humanity within its pages shine in stark contrast to the series\u0026rsquo; darker and more ominous themes, resonating deeply within the reader\u0026rsquo;s soul. BLAME! is a testament to the author\u0026rsquo;s ability to create a world that simultaneously captivates and repels, leaving an indelible mark on those brave enough to venture into its dystopian abyss.\n","permalink":"https://atharvashah.netlify.app/posts/personal/book-review/blame-manga-review/","summary":"A Dystopian Cyberpunk Masterpiece Enter a cyberpunk hellscape that defies all conventions of direction and sanity. Descend into the depths or ascend into a towering labyrinth; in this desolate world, where creatures from the realms of Hellraiser and Warhammer 40k roam freely, one man, Killy, armed with a functional gun, embarks on a treacherous journey through perilous floors. His mission: to locate an individual possessing the elusive \u0026ldquo;Net Gene,\u0026rdquo; a genetic marker granting access to the central control network of this technological wasteland.","title":"Manga Review: BLAME! by Tsutomu Nihei"},{"content":"This walkthrough guide will be hands-on, include examples, code snippets, common use cases and stick to best practices laid by Django foundation and Python.\nTesting is a crucial component of Django development to guarantee the integrity and dependability of your applications. This in-depth guide will take you on a deep-dive tour of the best techniques and methods for testing Django applications. This article covers everything, from setting up the testing environment to mastering unit testing, integration testing, and end-to-end testing. Explore advanced techniques like performance and security testing, master how to write readable and maintainable tests, learn the advantages of comprehensive testing, and gain knowledge about automation and continuous testing. The knowledge and resources needed to create solid and reliable applications are provided by this practical guide, which is the best resource for any Django developer. Dive in and advance your Django development abilities! It’s a must-read, bookmark-worthy resource for newbies and seasoned developers alike.\nIntroduction to Testing in Django Testing plays a crucial role in ensuring the integrity and dependability of Django applications. By thoroughly testing our code, we can uncover bugs, identify issues, and verify that our application behaves as expected. In this section, we will explore why testing is essential for Django applications and the benefits of adopting a comprehensive testing approach.\nEnsuring Quality and Reliability: The Significance of Testing in Django Applications Wondering why even test applications in the first place? This will straight-up convince you!\nQuality assurance: Testing helps us identify and fix issues early in the development process, ensuring that our application meets the desired quality standards. Bug detection: Through testing, we can uncover bugs and errors in our code, preventing them from causing problems in a production environment. Code maintainability: Writing tests forces us to write modular, reusable, and well-structured code, making it easier to maintain and enhance our Django application over time. Confidence in changes: With a solid test suite in place, we can make changes or introduce new features with confidence, knowing that our tests will catch any regressions or unexpected behavior. Collaboration and documentation: Tests serve as executable documentation, helping other developers understand the intended functionality of our codebase and encouraging collaboration within the team. Benefits of comprehensive testing Thorough test coverage: Comprehensive testing involves testing various aspects of our Django application, including unit testing, integration testing, and end-to-end testing. This ensures that different layers and components of our application work harmoniously together. Improved code quality: Writing tests forces us to think critically about the behavior of our code and the different scenarios it may encounter. This leads to cleaner, more robust code that is less prone to errors. Faster development process: While writing tests may initially require extra effort, it ultimately speeds up the development process. Tests act as a safety net, allowing us to catch issues early and reducing the time spent on manual testing and debugging. Continuous integration and deployment: A comprehensive test suite allows you to integrate automated testing into our development workflow. This enables continuous integration and deployment practices, where changes are tested automatically, ensuring the stability and reliability of our application. 💡 Remember, testing is not just a chore; it is an investment in the quality and success of your Django applications.\nSet up a Minimalist Django Application To get started with Django, follow these steps to set up a minimalist Django application:\nInstall Django using pip: pip install django Create a new Django project: django-admin startproject myproject Change to the project\u0026rsquo;s directory: cd myproject Create a Django app within the project: python manage.py startapp myapp In the project\u0026rsquo;s root directory (myproject), you will find the following important files and folders: manage.py: A command-line utility for interacting with the project. myproject/: The project\u0026rsquo;s package containing settings and configuration files. myproject/settings.py: Configuration settings for the Django project. myproject/urls.py: URL configuration for the project. myproject/wsgi.py: WSGI application entry point for production deployment. Inside the myapp directory, you will find files related to the app, including: myapp/models.py: Defines the data models for your Django app. myapp/views.py: Contains the views (controller logic) for your app. myapp/urls.py: Handles URL routing for the app. The Django project follows a specific structure, where the project\u0026rsquo;s package holds the project-level settings, and each app within the project has its own files for models, views, and URLs. Understanding this hierarchy is crucial for organizing your code effectively.\nWith this minimalist Django application set up, you can now start building your Django project by defining models, writing views, and configuring URLs. And most importantly, begin testing!\nSetting up the Testing Environment for Your Django Applications When it comes to developing robust and reliable Django applications, setting up a proper testing environment is essential. A well-configured testing environment allows you to effectively validate your code, catch potential bugs early on, and ensure the overall quality of your application. This will aid you in digesting the necessary steps to set up a testing environment for your Django projects.\nInstalling and Configuring Testing Frameworks To begin, you need to identify a suitable testing framework that aligns with your project requirements. Let\u0026rsquo;s take a look at the steps involved in installing and configuring a testing framework like pytest.\nInstall the pytest package using pip: pip install pytest Create a tests directory in your Django project\u0026rsquo;s root folder to store your test files: mkdir tests Within the tests directory, create a sample test file named test_example.py: def test_example(): assert 1 + 1 == 2 Now, you can run the test using the pytest command: pytest Creating a Separate Test Suite for Django Applications To maintain a structured and manageable test suite, it is important to organize your tests into separate modules or packages. Let\u0026rsquo;s consider an example where we create a tests package and include multiple test modules within it.\nInside the tests directory, create a package named myapp_tests: mkdir tests/myapp_tests Within the myapp_tests package, create a test module named test_models.py: from django.test import TestCase from myapp.models import MyModel class MyModelTestCase(TestCase): def test_something(self): # Test your model here pass Similarly, you can create additional test modules for different components or functionalities of your Django application. Configuring Test Databases To ensure isolation and prevent interference with your development or production data, it is recommended to set up a separate database specifically for running tests. Here\u0026rsquo;s how you can configure the test database in your Django project.\nOpen your Django project\u0026rsquo;s configuration file (settings.py) and define a separate database for testing: DATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.postgresql\u0026#39;, \u0026#39;NAME\u0026#39;: \u0026#39;myapp_dev\u0026#39;, \u0026#39;USER\u0026#39;: \u0026#39;myapp_user\u0026#39;, \u0026#39;PASSWORD\u0026#39;: \u0026#39;myapp_password\u0026#39;, \u0026#39;HOST\u0026#39;: \u0026#39;localhost\u0026#39;, \u0026#39;PORT\u0026#39;: \u0026#39;5432\u0026#39;, }, # you may be used to this \u0026#39;test\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.postgresql\u0026#39;, \u0026#39;NAME\u0026#39;: \u0026#39;myapp_test\u0026#39;, \u0026#39;USER\u0026#39;: \u0026#39;myapp_user\u0026#39;, \u0026#39;PASSWORD\u0026#39;: \u0026#39;myapp_password\u0026#39;, \u0026#39;HOST\u0026#39;: \u0026#39;localhost\u0026#39;, \u0026#39;PORT\u0026#39;: \u0026#39;5432\u0026#39;, } # but it is much better to isolate your testing database altogether. decoupling ftw! } When running tests, Django automatically uses the test database. You can execute your tests as follows: python manage.py test This won\u0026rsquo;t really run any tests since we haven\u0026rsquo;t really written anything yet! By following these steps, you can set up a well-configured testing environment for your Django applications. This allows you to write and run tests effectively, ensuring the integrity and quality of your codebase.\nUnit Testing in Django Unit testing plays a crucial role in ensuring the reliability and functionality of Django applications. By writing and organizing unit tests, you can validate the behavior of individual components such as models, views, and forms. Here, we will dive into how to write effective unit tests for Django models, views, and forms.\nModel Testing Model testing focuses on verifying the correctness of your Django models. It involves testing various aspects, including field validation, database interactions, and model methods. By writing model tests, you can ensure that your data models are working as expected.\nTo illustrate, let\u0026rsquo;s consider a minimalist example where we create a Person model:\nfrom django.db import models class Person(models.Model): first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) def get_full_name(self): return f\u0026#34;{self.first_name} {self.last_name}\u0026#34; In your unit tests for models, you can cover scenarios like validating the field lengths, testing custom model methods, and verifying the data stored in the database.\nView Testing View testing focuses on validating the behavior of your Django views. It includes testing the response status, content, and any associated business logic. By writing view tests, you can ensure that your views are rendering the correct templates, returning the expected HTTP responses, and handling input data appropriately.\nConsider a minimal view example:\nfrom django.shortcuts import render from django.views import View class MyView(View): def get(self, request): return render(request, \u0026#39;myapp/mytemplate.html\u0026#39;) In your unit tests for views, you can cover scenarios like checking the rendered template, testing the response status code, and verifying the view\u0026rsquo;s behavior for different request methods.\nForm Testing Form testing focuses on validating the behavior and validation rules of your Django forms. It involves testing form submissions, field validation, and error handling. By writing form tests, you can ensure that your forms are correctly handling user input and returning appropriate error messages when necessary.\nConsider a simple form example:\nfrom django import forms class MyForm(forms.Form): name = forms.CharField(max_length=100) email = forms.EmailField() def clean_name(self): name = self.cleaned_data.get(\u0026#39;name\u0026#39;) if name == \u0026#39;admin\u0026#39;: raise forms.ValidationError(\u0026#34;Name cannot be \u0026#39;admin\u0026#39;\u0026#34;) return name In your unit tests for forms, you can cover scenarios like validating form fields, testing form submission with valid and invalid data, and verifying the error messages.\nBy writing comprehensive unit tests for models, views, and forms, you can ensure the correctness and robustness of your Django application\u0026rsquo;s individual components. Django provides powerful testing tools and assertions to simplify the testing process, allowing you to write clear and maintainable tests.\nUsing Django\u0026rsquo;s Testing Tools and Assertions Django provides a comprehensive set of testing tools and assertions that make it easier to write effective unit tests for your Django applications. These tools and assertions assist in setting up test cases, making assertions about the behavior of your code, and handling common testing tasks. Here are some key features of Django\u0026rsquo;s testing tools:\nTestCase Class: Django\u0026rsquo;s TestCase class provides a foundation for writing test cases. It sets up a clean database for each test, provides test-specific assertions, and handles common testing operations such as running setUp() and tearDown() methods. Test Client: The Django Client class allows you to simulate HTTP requests and test the behavior of your views. You can use the client to make requests, assert response status codes and content, handle cookies and sessions, and more. Test Database: Django automatically creates a separate test database during test runs. This ensures that your tests do not interfere with your development or production databases. You can configure the test database settings in your Django project\u0026rsquo;s configuration file. Test Fixtures: Test fixtures provide a way to load data into your test database before running tests. You can define fixtures in various formats (such as JSON, XML, or YAML) to populate the database with test data. This allows you to test your code against realistic data scenarios. Django\u0026rsquo;s testing tools and assertions make it easier to write comprehensive and reliable unit tests for your Django applications. By leveraging these tools, you can effectively set up test cases, make assertions about the behavior of your code, and ensure the correctness of your application\u0026rsquo;s components.\nMocking Dependencies and External Services In unit testing, it is often necessary to isolate your code from external dependencies and services to focus solely on the behavior of the code under test. Mocking allows you to replace these dependencies with dummy objects or simulated behaviors, enabling you to control the test environment and simulate different scenarios. Here are some techniques for mocking dependencies and external services in Django tests:\nMocking Functions and Methods: The unittest.mock module in Python provides utilities for mocking functions and methods. You can use this module to replace external function calls or method invocations with predefined return values or behaviors. Mocking External API Calls: When your code interacts with external APIs, you can use mocking libraries like requests-mock or httpretty to mock the API responses. This allows you to simulate different API scenarios and ensure that your code handles the responses correctly. Mocking Database Queries: In Django, you can use the TestCase class\u0026rsquo;s assertNumQueries and assertQuerysetEqual methods to assert the number of database queries executed and the expected results. By controlling the database queries in your tests, you can isolate your code from database dependencies. Mocking dependencies and external services is crucial for writing focused and reliable unit tests. By replacing dependencies with controlled mock objects or simulated behaviors, you can test your code in isolation and verify its behavior under different scenarios.\nIntegration Testing Techniques Testing Django Views and Templates with Realistic Data Integration testing allows you to test the interaction between different components of your Django application, such as views, templates, and the underlying data. By simulating real-world scenarios, you can ensure that these components work together as expected. Here are some techniques for integration testing Django views and templates:\nPreparing Test Data: Before testing your views and templates, you should set up realistic test data. Use the Django ORM or fixture loading mechanisms to populate your test database with relevant data for the specific test scenario.\nfrom django.test import TestCase from myapp.models import Product class MyViewTestCase(TestCase): def setUp(self): Product.objects.create(name=\u0026#39;Product A\u0026#39;, price=10.99) Product.objects.create(name=\u0026#39;Product B\u0026#39;, price=19.99) Simulating Requests: Use Django\u0026rsquo;s Client class to simulate HTTP requests and interact with your views. You can perform GET, POST, or other types of requests and assert the response status, content, and other relevant data.\ncoderesponse = self.client.get(\u0026#39;/myview/\u0026#39;) self.assertEqual(response.status_code, 200) self.assertContains(response, \u0026#39;Product A\u0026#39;) Testing Templates: To verify that your templates render correctly, you can use Django\u0026rsquo;s template rendering engine to render the template with the test data and then assert the expected output.\nfrom django.template import engines def test_my_template(self): template = engines[\u0026#39;django\u0026#39;].from_string( \u0026#39;{% for product in products %}{{ product.name }}{% endfor %}\u0026#39; ) rendered = template.render({\u0026#39;products\u0026#39;: Product.objects.all()}) self.assertInHTML(\u0026#39;Product A\u0026#39;, rendered) self.assertInHTML(\u0026#39;Product B\u0026#39;, rendered) Integration testing views and templates ensures that the various components of your Django application work together harmoniously, producing the expected results and delivering a seamless user experience.\nInteracting with Databases and Third-Party Integrations Integration tests often involve interactions with databases and third-party integrations, such as external APIs or services. To ensure the correctness of these interactions, you can employ various techniques:\nManaging Test Databases: Django automatically creates a separate test database during integration tests. This isolates your tests from your development or production data. Use this test database to perform queries, insert data, or validate the behavior of your code.\nfrom django.test import TestCase from myapp.models import Product class MyIntegrationTestCase(TestCase): def test_database_interaction(self): # Perform database operations and assertions products = Product.objects.all() self.assertEqual(len(products), 2) Mocking External Integrations: When interacting with external APIs or services, you can mock the responses using libraries like requests-mock or httpretty. This allows you to simulate different API scenarios and verify that your code handles the responses correctly.\nimport requests import requests_mock def test_external_integration(self): with requests_mock.Mocker() as mocker: mocker.get(\u0026#39;https://api.example.com/data\u0026#39;, text=\u0026#39;{\u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;}\u0026#39;) response = requests.get(\u0026#39;https://api.example.com/data\u0026#39;) self.assertEqual(response.json(), {\u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;}) Testing Authentication, Authorization, and Permissions Integration tests are an excellent opportunity to validate the behavior of your authentication, authorization, and permission-related code paths. Test scenarios with different user roles and permissions to ensure that your application handles them correctly.\nclass MyAuthTestCase(TestCase): def test_authenticated_user_can_access_protected_view(self): # Create a test user with appropriate permissions user = User.objects.create_user(username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpass\u0026#39;) user.user_permissions.add(Permission.objects.get(codename=\u0026#39;view_protected_view\u0026#39;)) # Log in the test user self.client.login(username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpass\u0026#39;) # Access the protected view response = self.client.get(\u0026#39;/protected-view/\u0026#39;) # Assert that the response status code is 200 (OK) self.assertEqual(response.status_code, 200) def test_unauthenticated_user_cannot_access_protected_view(self): # Attempt to access the protected view without authentication response = self.client.get(\u0026#39;/protected-view/\u0026#39;) # Assert that the response status code is 403 (Forbidden) self.assertEqual(response.status_code, 403) In the MyAuthTestCase class, we have two test methods. The first method, test_authenticated_user_can_access_protected_view, tests whether an authenticated user with the necessary permissions can access a protected view. We create a test user with the appropriate permissions, log in the user using self.client.login, and then make a request to the protected view using self.client.get. Finally, we assert that the response status code is 200, indicating a successful access.\nThe second method, test_unauthenticated_user_cannot_access_protected_view, tests whether an unauthenticated user is denied access to the protected view. We make a request to the protected view without logging in and assert that the response status code is 403, indicating a forbidden access.\nBy writing integration tests for authentication, authorization, and permissions, you can ensure that your Django application correctly handles user access based on their roles and permissions, providing a secure and controlled environment for your users.\nEnd-to-End Testing with Selenium End-to-end (E2E) testing is a critical aspect of software development that ensures the smooth integration and functioning of various components in a real-world scenario. In the context of Django applications, E2E testing with Selenium allows you to simulate user interactions and validate the end-to-end behavior of your application End-to-end testing is a technique that tests the complete flow of an application, simulating real user interactions from start to finish. It helps identify issues related to the integration of different components, ensuring that the application works as expected in a production-like environment.\nSetting up Selenium WebDriver for Django Applications Install Selenium WebDriver: Use pip to install the Selenium package and the appropriate WebDriver for your browser (e.g., ChromeDriver for Google Chrome). Configure Selenium in Django: In your Django project\u0026rsquo;s settings, add the necessary configuration for Selenium, specifying the WebDriver\u0026rsquo;s path and other settings. Writing End-to-End Tests to Simulate User Interactions: Identify the scenarios you want to test: Determine the key user interactions or workflows that you want to cover in your E2E tests. Set up test fixtures and data: Prepare the necessary data and test fixtures to set up the initial state of the application for testing. Initialize the Selenium WebDriver: Create an instance of the WebDriver and configure any desired settings (e.g., maximizing the browser window). Navigate to the desired page: Use the WebDriver\u0026rsquo;s methods to navigate to the URL or page where the test scenario starts. Simulate user interactions: Utilize the WebDriver\u0026rsquo;s methods (e.g., find_element_by_* and send_keys) to interact with the application, entering input, clicking buttons, and performing other actions. Assert expected outcomes: Use assertions to verify that the application behaves as expected after each interaction. You can check elements\u0026rsquo; presence, content, or other relevant attributes. Clean up and finalize: After completing the test scenario, perform any necessary cleanup tasks (e.g., deleting test data) and close the WebDriver. Example End-to-End Test Case:\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase from selenium.webdriver.chrome.webdriver import WebDriver class MyE2ETestCase(StaticLiveServerTestCase): @classmethod def setUpClass(cls): super().setUpClass() cls.selenium = WebDriver() @classmethod def tearDownClass(cls): cls.selenium.quit() super().tearDownClass() def test_user_registration_flow(self): # Navigate to the registration page self.selenium.get(self.live_server_url + \u0026#39;/register\u0026#39;) # Enter registration details self.selenium.find_element_by_id(\u0026#39;id_username\u0026#39;).send_keys(\u0026#39;testuser\u0026#39;) self.selenium.find_element_by_id(\u0026#39;id_email\u0026#39;).send_keys(\u0026#39;test@example.com\u0026#39;) self.selenium.find_element_by_id(\u0026#39;id_password1\u0026#39;).send_keys(\u0026#39;testpass123\u0026#39;) self.selenium.find_element_by_id(\u0026#39;id_password2\u0026#39;).send_keys(\u0026#39;testpass123\u0026#39;) self.selenium.find_element_by_id(\u0026#39;register-button\u0026#39;).click() # Assert successful registration message success_message = self.selenium.find_element_by_class_name(\u0026#39;success-message\u0026#39;) self.assertEqual(success_message.text, \u0026#39;Registration successful!\u0026#39;) # Simulate user login self.selenium.find_element_by_id(\u0026#39;id_username\u0026#39;).send_keys(\u0026#39;testuser\u0026#39;) self.selenium.find_element_by_id(\u0026#39;id_password\u0026#39;).send_keys(\u0026#39;testpass123\u0026#39;) self.selenium.find_element_by_id(\u0026#39;login-button\u0026#39;).click() # Assert user is logged in username_displayed = self.selenium.find_element_by_class_name(\u0026#39;username-displayed\u0026#39;) self.assertEqual(username_displayed.text, \u0026#39;testuser\u0026#39;) Testing Strategies for Django Applications Test-Driven Development (TDD) Test-driven development is an approach where tests are written before the actual code implementation.\nBenefits of TDD include: Ensuring code correctness: By writing tests first, you define the desired behavior and then implement the code to satisfy those tests, reducing the chances of introducing bugs. Design improvement: TDD encourages modular and loosely coupled code, leading to better software architecture. Faster development: TDD helps identify issues early, allowing for faster debugging and reducing time spent on rework. Confidence in code changes: With comprehensive test coverage, you can refactor or add new features with confidence, knowing that your tests will catch any regressions. Test Coverage and Measuring Code Quality Test coverage refers to the extent to which your code is tested by your test suite.\nBenefits of test coverage and measuring code quality include: Identifying untested code: Test coverage analysis reveals areas of your codebase that lack appropriate tests, allowing you to fill those gaps and ensure comprehensive coverage. Improving code quality: By identifying code paths that are not covered by tests, you can address potential edge cases and improve the overall quality and reliability of your code. Guiding development efforts: Monitoring test coverage over time helps track progress and focus testing efforts on areas that require more attention. Encouraging best practices: Higher test coverage encourages developers to write more modular, testable, and maintainable code. Continuous Integration and Automated Testing Pipelines Continuous integration (CI) is a practice where code changes are frequently integrated into a shared repository, triggering automated builds and tests.\nBenefits of CI and automated testing pipelines include: Early feedback: CI systems provide immediate feedback on the impact of code changes, allowing developers to address issues early in the development process. Faster identification of regressions: Automated tests are executed on every code change, quickly detecting any regressions that might have been introduced. Consistent and reproducible builds: CI ensures that your application can be built and tested in a consistent environment, reducing the chances of environment-specific issues. Collaboration and visibility: CI systems promote collaboration by providing visibility into the status and quality of the codebase for the entire team. By incorporating these testing strategies into your Django development workflow, you can establish a solid foundation for building robust and reliable applications. From test-driven development to measuring code coverage and implementing continuous integration, these practices enable you to deliver high-quality software while maintaining code integrity and facilitating collaboration within your development team.\nAdvanced Testing Techniques and Tools To ensure the optimal performance, security, and usability of Django applications, it is essential to employ advanced testing techniques and leverage specialized tools. In this section, we will explore some of these techniques and tools that can enhance your testing efforts and help you deliver high-quality software.\nPerformance Testing Django Applications Performance testing focuses on assessing the speed, responsiveness, scalability, and stability of your application under different loads and scenarios.\nTechniques for performance testing include: Load testing: Simulating high user loads to identify performance bottlenecks and determine the application\u0026rsquo;s capacity. Stress testing: Pushing the application to its limits by exceeding the expected load to evaluate its behavior under extreme conditions. Endurance testing: Assessing the application\u0026rsquo;s stability over an extended period to identify any memory leaks or resource consumption issues. Tools for performance testing Django applications: Locust: A scalable, user-friendly, and scriptable performance testing tool that allows you to define user behavior scenarios using Python code. Apache JMeter: A powerful and extensible Java-based tool for load testing, capable of simulating a wide range of scenarios and generating detailed reports. Security Testing and Vulnerability Scanning Security testing is essential to identify vulnerabilities and ensure the robustness of your application\u0026rsquo;s defenses against potential threats.\nTechniques for security testing include:\nPenetration testing: Simulating attacks to identify vulnerabilities and assess the effectiveness of your application\u0026rsquo;s security measures. Code review: Analyzing the application\u0026rsquo;s source code to identify potential security flaws, such as injection attacks or insecure data handling. Security scanning: Leveraging automated tools to scan your application for common vulnerabilities and misconfigurations. Tools for security testing and vulnerability scanning:\nOWASP ZAP: An open-source web application security scanner that helps identify common vulnerabilities and provides detailed reports. Bandit: A security-focused static analysis tool for Python that detects common security issues in code, such as potential vulnerabilities or insecure configurations. Exploratory Testing and Usability Testing Exploratory testing involves exploring the application without predefined test cases to discover potential issues or areas of improvement. Usability testing focuses on evaluating the user-friendliness and intuitiveness of your application\u0026rsquo;s interface.\nTechniques for exploratory and usability testing include:\nAd-hoc testing: Exploring the application from the user\u0026rsquo;s perspective, interacting with different features and functionalities. User surveys and feedback: Collecting feedback from real users to gain insights into their experience and identify areas for improvement. Tools for exploratory and usability testing:\nSelenium WebDriver: An open-source tool for automating browser interactions, enabling you to simulate user interactions and perform usability tests. User testing platforms: Online platforms that facilitate usability testing by recruiting users to provide feedback and insights on your application\u0026rsquo;s usability. By incorporating these advanced testing techniques and utilizing specialized tools, you can elevate your testing efforts to ensure optimal performance, robust security, and exceptional usability for your Django applications. Performance testing, security testing, and exploratory/usability testing collectively contribute to delivering a high-quality user experience while safeguarding your application from potential vulnerabilities.\nTesting Best Practices and Tips Writing readable and maintainable tests Readable and maintainable tests are crucial for the long-term success of your testing efforts. Follow these best practices to ensure your tests are clear, concise, and easy to maintain:\nUse descriptive test method names: Choose meaningful names that accurately describe the purpose and expected behavior of the test. Structure your tests logically: Organize your tests into sections based on functionality or test scenarios to improve readability. Utilize comments: Add comments to explain complex test cases, highlight important details, or provide context for future maintainers. Keep tests focused: Each test should focus on testing a single aspect of your application, making it easier to identify and fix issues. Use assertions effectively: Employ meaningful assertions that clearly express the expected outcomes of your test cases. Avoid unnecessary duplication: Refactor common test code into reusable helper functions or fixtures to reduce duplication and improve maintainability. Using fixtures and factories for test data Fixtures and factories provide a convenient way to create test data for your Django application. Fixtures are pre-defined data sets used to populate your test database. Create fixtures using Django\u0026rsquo;s built-in fixtures framework or third-party libraries like Factory Boy.\n# myapp/fixtures/my_fixture.json [ { \u0026#34;model\u0026#34;: \u0026#34;myapp.MyModel\u0026#34;, \u0026#34;fields\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Test Data 1\u0026#34;, \u0026#34;value\u0026#34;: 42 } }, { \u0026#34;model\u0026#34;: \u0026#34;myapp.MyModel\u0026#34;, \u0026#34;fields\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Test Data 2\u0026#34;, \u0026#34;value\u0026#34;: 73 } } ] Load fixtures in your tests:\nfrom django.test import TestCase class MyTestCase(TestCase): fixtures = [\u0026#39;my_fixture.json\u0026#39;] # ... Factories allow you to generate test data dynamically. Use libraries like Factory Boy to define factories and generate realistic data for your tests.\nimport factory class MyModelFactory(factory.django.DjangoModelFactory): class Meta: model = MyModel name = factory.Faker(\u0026#39;name\u0026#39;) value = factory.Faker(\u0026#39;random_int\u0026#39;, min=0, max=100) Handling test dependencies and avoiding test pollution Properly managing test dependencies and avoiding test pollution are essential for reliable and isolated tests. Consider the following practices:\nUse setUp and tearDown methods: Django\u0026rsquo;s TestCase provides setUp and tearDown methods to set up and clean up test dependencies, such as creating or deleting test data. from django.test import TestCase class MyTestCase(TestCase): def setUp(self): # Set up test dependencies def tearDown(self): # Clean up test dependencies Utilize transactions: Django wraps each test in a database transaction, which is rolled back at the end of the test. This ensures that changes made during the test do not affect other tests or the production data. Use isolated test databases: Configure separate databases for your tests to prevent interference with development or production data. Avoid global state modifications: Be cautious when modifying global state during tests, as it can lead to unexpected behavior and test pollution. Reset any modified state after each test to maintain isolation. By following these best practices and tips, you can ensure your tests are readable, maintainable, and reliable. Leveraging fixtures and factories will help you create realistic test data efficiently, while properly managing test dependencies and avoiding pollution will contribute to the stability and accuracy of your tests.\nTest Automation and Continuous Testing\nIntegrating tests into the development workflow:\nIntegrating tests into your development workflow allows you to catch issues early, ensure code quality, and provide fast feedback to developers. Consider the following best practices:\nRun tests locally: Developers should regularly run tests on their local machines to catch errors before committing code. Use test runners like pytest or Django\u0026rsquo;s test management commands to execute your tests locally.\nExample using pytest: pytest Use pre-commit hooks: Set up pre-commit hooks to automatically run tests before committing code changes. This ensures that only passing tests are committed and reduces the chances of introducing bugs into the codebase.\nExample using pre-commit framework with pytest: # .pre-commit-config.yaml - repo: https://github.com/pytest-dev/pytest rev: v6.2.4 hooks: - id: pytest Incorporate tests in code reviews: Make tests a part of the code review process to ensure that new code changes have appropriate test coverage. Reviewers can verify that new features are properly tested and encourage developers to address any missing tests.\nSetting up continuous integration and continuous testing pipelines Continuous integration (CI) and continuous testing (CT) pipelines automate the process of building, testing, and deploying your application. Follow these steps to set up a CI/CT pipeline using tools like GitLab CI/CD:\nConfigure your CI/CT pipeline: Create a .gitlab-ci.yml file in the root of your repository to define the stages and jobs for your pipeline. Specify the steps required to build, test, and deploy your Django application.\nExample .gitlab-ci.yml configuration:\nstages: - build - test - deploy build: stage: build script: - echo \u0026#34;Building the application...\u0026#34; test: stage: test script: - echo \u0026#34;Running tests...\u0026#34; - pytest deploy: stage: deploy script: - echo \u0026#34;Deploying the application...\u0026#34; Define the test environment: Specify the necessary environment and dependencies required to run your tests. This may include database configurations, environment variables, or external services.\nExample .gitlab-ci.yml configuration with a PostgreSQL database:\ntest: stage: test image: python:3.9 services: - name: postgres:latest alias: db variables: POSTGRES_DB: mydatabase POSTGRES_USER: myuser POSTGRES_PASSWORD: mypassword script: - pip install -r requirements.txt - pytest Use test coverage tools: Incorporate test coverage measurement tools like coverage.py to track the percentage of code covered by your tests. Generate coverage reports and include them in your CI/CT pipeline for visibility.\nExample .gitlab-ci.yml configuration with coverage reporting:\ntest: stage: test image: python:3.9 services: - name: postgres:latest alias: db variables: POSTGRES_DB: mydatabase POSTGRES_USER: myuser POSTGRES_PASSWORD: mypassword script: - pip install -r requirements.txt - coverage run --source=myapp manage.py test - coverage report pytest: Use pytest as your test runner to benefit from its extensive features, such as test discovery, parametrization, fixtures, and plugins. Write concise and readable tests using pytest\u0026rsquo;s expressive syntax.\nExample test case using pytest:\nimport pytest @pytest.mark.django_db def test_create_user(): user = User.objects.create(username=\u0026#34;testuser\u0026#34;) assert user.username == \u0026#34;testuser\u0026#34; coverage: Use coverage.py to measure test coverage and identify areas of your codebase that require additional testing. Generate coverage reports to assess the effectiveness of your test suite.\nExample command to run tests with coverage:\ncoverage run --source=myapp manage.py test GitLab CI/CD: Utilize GitLab CI/CD to automate your testing and deployment processes. Configure your .gitlab-ci.yml file to define the stages and jobs for your pipeline, enabling seamless integration with your version control system.\nExample GitLab CI/CD configuration:\nstages: - build - test - deploy # ... By integrating tests into your development workflow and setting up automated testing pipelines, you can ensure that your Django applications are thoroughly tested, maintain high code quality, and achieve faster and more reliable software delivery.\nConclusion In this comprehensive guide, we have explored the world of testing Django applications, covering a wide range of topics and techniques. Let\u0026rsquo;s recap the key points we have covered:\nWhy testing is crucial for Django applications, highlighting the benefits of comprehensive testing in ensuring the integrity and dependability of your applications. Setting up the testing environment for your Django projects, including installing and configuring testing frameworks, creating a separate test suite, and configuring test databases. Writing and organizing unit tests for Django models, views, and forms. We learned how to leverage Django\u0026rsquo;s testing tools and assertions, as well as how to mock dependencies and external services. Integration of testing techniques, focusing on testing Django views and templates with realistic data, interacting with databases and third-party integrations, and handling authentication, authorization, and permissions in integration tests. End-to-end testing with Selenium, discussing its importance and providing guidance on setting up Selenium WebDriver for Django applications. We also explored how to write end-to-end tests to simulate user interactions. Advanced testing techniques and tools, including performance testing, security testing, vulnerability scanning, exploratory testing, and usability testing. We highlighted the significance of these techniques in ensuring the robustness and reliability of your Django applications. Best practices for writing readable and maintainable tests, using fixtures and factories for test data, and handling test dependencies to avoid test pollution. Importance of test automation and continuous testing, integrating tests into the development workflow, setting up continuous integration and continuous testing pipelines, and utilizing tools like pytest, coverage, and GitLab CI/CD for automated testing. Comprehensive testing is an integral part of Django development, providing confidence in the quality and functionality of your applications. By following the best practices and strategies outlined in this guide, you can significantly improve the reliability, maintainability, and scalability of your Django projects.\nWhat\u0026rsquo;s Next? Testing is a continuous journey, and there is always more to learn and explore. Here are some steps you can take to further enhance your testing skills and knowledge:\nDive deeper into Django\u0026rsquo;s testing framework and explore its advanced features, such as testing middleware, signals, and custom test runners. Stay up to date with the latest testing libraries, tools, and best practices in the Django and Python communities. Experiment with different testing approaches and techniques, such as property-based testing, fuzz testing, or mutation testing, to uncover more corner cases and potential issues. Explore additional topics related to testing, such as performance optimization, load testing, API testing, or mobile testing, depending on the specific needs of your projects. Engage with the vibrant Django and testing communities, participate in discussions, and share your experiences and knowledge with others. I made a intermediate level Django project based on Test Driven Development (TDD). You can check it out here. It is a crypto currency app which uses CoinGecko API to fetch the latest crypto currency prices and displays them in a table. It also has a search functionality which allows you to search for a particular crypto currency.\nRemember, testing is not just about catching bugs; it\u0026rsquo;s about building reliable, maintainable, and high-quality software. Embrace the testing mindset, and let testing be an integral part of your Django development process. Happy testing!\n","permalink":"https://atharvashah.netlify.app/posts/tech/django-testing-guide/","summary":"This walkthrough guide will be hands-on, include examples, code snippets, common use cases and stick to best practices laid by Django foundation and Python.\nTesting is a crucial component of Django development to guarantee the integrity and dependability of your applications. This in-depth guide will take you on a deep-dive tour of the best techniques and methods for testing Django applications. This article covers everything, from setting up the testing environment to mastering unit testing, integration testing, and end-to-end testing.","title":"A Comprehensive Guide to Testing Django Applications"},{"content":"June 2023 gave me a chance to recover from the movie slog that was suffered last month. It has been an exciting month for cinema enthusiasts like myself, as I indulged in a diverse selection of films across various genres. From timeless classics to recent releases, each movie offered its own unique experience and left me with a range of emotions. Now, let\u0026rsquo;s delve into my thoughts on the films I had the pleasure of watching during this captivating month. No 4 or 5 stars though!\nClick the banner below to follow me on Letterboxd and see what I\u0026rsquo;m watching next!\nApocalypse Now, 1979 - ★★★½ Watched on: 18 June 2023\nReview\nApocalypse Now takes its audience on an intense and haunting voyage through the horrors of war. Set during the Vietnam War, this Francis Ford Coppola masterpiece plunges viewers into a world of chaos, violence, and the darkest recesses of the human psyche. The film portrays a relentless and almost cerebral force of nature, encompassing the viewer with harrowing imagery that includes ash-covered landscapes, napalm explosions, relentless gunfire, and dismembered bodies.With a backdrop of guerilla warfare, naval and airforce bombings, and ritualistic killings, Apocalypse Now delves into the depths of madness. The film\u0026rsquo;s protagonist, Captain Benjamin Willard, played masterfully by Martin Sheen, becomes the audience\u0026rsquo;s guide through this heart of darkness. The narrative is punctuated by iconic lines of dialogue and chilling moments that leave an indelible mark on the viewer\u0026rsquo;s consciousness.However, Apocalypse Now does suffer from a few shortcomings. The unnecessarily long runtime and slow pace can occasionally weigh down the overall experience. Additionally, the absence of female characters may be noticeable, but given the film\u0026rsquo;s focus on the male-dominated world of combat, it remains forgivable.Nevertheless, Apocalypse Now successfully immerses viewers in the perspective of the underdog grunt, providing a raw and unfiltered view of the psychological toll of war. The film\u0026rsquo;s lack of humor and its portrayal of characters teetering on the edge of sanity add to its unsettling nature. Apocalypse Now is undeniably memorable, leaving an indelible mark long after the credits roll.\nRead on Letterboxd\nIn Bruges, 2008 - ★★★½ Watched on: 18 June 2023\nReview\nIn Bruges is an exceptional film that stands out in its own league. Comparable to the likes of \u0026ldquo;Banshees of Inishereen,\u0026rdquo; this dynamic duo shares a certain allure, captivating audiences with their distinctive charm. With unbridled British humor and an unfiltered approach, it becomes evident that the movie was crafted in a pre-woke era, unafraid to wield blatant insults and slurs. The fun premise and superb set design transport viewers into a world both enchanting and sinister.Amidst the mesmerizing tapestry of characters, Chloe shines as a beacon of fascination. Yet, it is Henry, introduced in the final thirty minutes, who leaves an indelible mark, effortlessly commanding attention. Colin Farrell\u0026rsquo;s portrayal radiates an unmatched charisma and wit that is nothing short of captivating.In Bruges is a testament to its inventiveness, blending comedy and tragedy seamlessly. However, at times, the film meanders and delves into tangents, attempting to evoke a multitude of emotions, which can feel slightly forced. Nonetheless, this minor flaw is easily overlooked in the face of the film\u0026rsquo;s overall brilliance.With its riveting storyline and a unique blend of genres, In Bruges is a must-see. It transcends the boundaries of conventional filmmaking, leaving a lasting impression on audiences. While it may have its moments of dragging, this cinematic gem possesses a captivating charm that is not to be missed.\nRead on Letterboxd\nGroundhog Day, 1993 - ★★★½ Watched on: 17 June 2023\nReview\nIn a world where time loop narratives have become a trope, Groundhog Day emerges as a refreshing and heartwarming gem. At first skeptical, I ventured into this film with a weary sense of déjà vu, wondering what it could possibly offer that hadn\u0026rsquo;t already been explored. To my pleasant surprise, it charmed its way into my heart, leaving a lasting impression.Groundhog Day manages to deliver a delightful blend of humor, wit, and genuine moments of introspection. It navigates the endless repetition of a single day with remarkable finesse, uncovering layers of the human experience that extend far beyond its cyclical premise. The magnetic performances by the lead actors add depth and vulnerability to their characters, making them both endearing and relatable.Visually, the film is a treat, with vibrant set pieces that breathe life into the story. The carefully chosen color palette and attention to detail elevate the viewing experience, immersing us in the quaint charm of Punxsutawney. Moments of romance are delicately woven into the narrative, tugging at our heartstrings with their tender and heartfelt execution.However, as much as I adored this film, I couldn\u0026rsquo;t overlook the occasional lapses in logic from the main characters. Some of their actions seemed outright foolish, disrupting the otherwise cohesive storyline. Nevertheless, the overall impact of Groundhog Day transcends these flaws, leaving us with a newfound appreciation for life\u0026rsquo;s daily miracles.Groundhog Day, with its clever writing and undeniable charisma, succeeds in altering our perspective and imparting a sense of gratitude. It invites us to ponder our own existence and cherish the small moments that shape our lives. Though not without its imperfections, this whimsical journey is a worthwhile adventure that warrants multiple visits.\nRead on Letterboxd\nHot Rod, 2007 - ★★★ Watched on: 17 June 2023\nReview\nIn \u0026ldquo;Hot Rod,\u0026rdquo; Andy Samberg brings his signature charm and comedic timing to the forefront, delivering a performance that is true to his usual appearances. The movie, clocking in at a compact 80 minutes, is a whirlwind of silly, goofy, and over-the-top comedy that, despite its non-serious tones, manages to maintain a certain style and charisma.This film is a delightful mix of catchy one-liners, scorching disses, and cheesy yet lovable characters. It\u0026rsquo;s self-aware and meta, taking the audience on a wild ride through the escapades of a daredevil stuntman. The comedic moments are plentiful and will have you laughing out loud throughout the duration of the film.However, \u0026ldquo;Hot Rod\u0026rdquo; falls short in a few aspects. The throwaway side characters and lack of depth hinder the overall impact of the story, making it somewhat forgettable in the grand scheme of things. Despite its flaws, the movie remains a light-hearted and enjoyable experience.Director Akiva Schaffer brings a certain chaotic energy to the film, creating an atmosphere that is both endearing and absurd. The pacing is tight, ensuring that the audience never has a dull moment.\u0026ldquo;Hot Rod\u0026rdquo; may not reach the upper echelons of comedy gold, but it certainly delivers a satisfying dose of laughter. It\u0026rsquo;s a film best suited for those seeking a lighthearted and mindless escape, offering an entertaining experience that will leave you chuckling long after the credits roll.\nRead on Letterboxd\nThe Animatrix, 2003 - ★★★★ Watched on: 16 June 2023\nReview\nIn \u0026ldquo;The Animatrix,\u0026rdquo; the viewer is thrust into a mesmerizing world where the boundaries between reality and virtuality blur. This anthology of animated tales immerses us in a matrix of emotions, taking us on an exhilarating ride through its various narratives. With its unique blend of artistry, technical brilliance, and thought-provoking storytelling, \u0026ldquo;The Animatrix\u0026rdquo; is a testament to the power of animation as a medium.The anthology kicks off with \u0026ldquo;Final Flight of the Osiris,\u0026rdquo; a jaw-dropping spectacle that showcases the advancement of animation technology. The first swordfight scene is a true visual marvel, evoking a nostalgic sense of the gaming era with its impeccably smooth graphics. As the anthology progresses, \u0026ldquo;The Second Renaissance\u0026rdquo; delves into the darkness, painting a cautionary tale of a robot uprising. The imagery presented is nothing short of awe-inspiring, with vivid skies and chaotic sequences that leave a lasting impression.Among the standout segments is \u0026ldquo;Kid\u0026rsquo;s Story,\u0026rdquo; a uniquely animated feature that captures the essence of rebellious youth. Its sketchy style, reminiscent of \u0026ldquo;Love, Death \u0026amp; Robots,\u0026rdquo; lends it an edgy charm that stands out from the rest. Equally captivating is \u0026ldquo;World Record,\u0026rdquo; a story that oozes the essence of the Matrix universe. Its uncanny resemblance to the original film, with men in black and mind-bending close-ups, leaves a haunting impact.While \u0026ldquo;Beyond\u0026rdquo; captivates with its aesthetics, the conclusion left me somewhat unfulfilled. However, this slight misstep is easily overshadowed by the overall brilliance of the anthology. \u0026ldquo;A Detective Story\u0026rdquo; and \u0026ldquo;Matriculated\u0026rdquo; may not have resonated as strongly with me, but the sheer variety and depth of the other tales make up for it.\u0026ldquo;The Animatrix\u0026rdquo; is a remarkable feat of animation, showcasing the boundless creativity and technical prowess of its creators. With its ability to transport viewers to alternate realities, evoke powerful emotions, and challenge perceptions, this anthology truly pushes the boundaries of storytelling. It is a must-watch for fans of the Matrix franchise and animation enthusiasts alike.\nRead on Letterboxd\nBeau Is Afraid, 2023 - ★★★ Watched on: 15 June 2023\nReview\nMovie Review: \u0026ldquo;Beau is Afraid\u0026rdquo; (3/5)In the realm of hyperbolic storytelling, \u0026ldquo;Beau is Afraid\u0026rdquo; immerses viewers into a world of raw emotional turbulence. Joaquin Phoenix delivers a breathtaking performance, capturing the essence of Beau with a hyperventilating portrayal that brims with anxiety, sorrow, and worry. Every scene is drenched in a sense of desolation, leaving no room for hope or optimism. This film is one giant shot of depresso, delving into the depths of despair without offering a glimmer of solace.The set design brilliantly reflects the unsettling nature of the narrative, with its lingering conversations and the deliberate chaos that ensues. The story itself takes muddled, chaotic turns, pushing the boundaries of comprehension. While this adds a unique flavor to the film, it diminishes the overall enjoyment factor. The dual nature of the movie\u0026rsquo;s tone oscillates between oppressive darkness and fragmented style, leaving little room for cohesion.Nevertheless, this movie finds its place within the illustrious roster of Ari Aster\u0026rsquo;s works. It serves as a testament to his ability to create films that explore the darkest corners of the human psyche. Though it may not be an easy watch, the movie\u0026rsquo;s unwavering commitment to its hyperbolic and over-the-top portrayal demands attention and leaves a lingering impact. For fans of Aster\u0026rsquo;s distinct brand of disconcerting storytelling, \u0026ldquo;Beau is Afraid\u0026rdquo; is an okay addition to their cinematic journey.\nRead on Letterboxd\nFast X, 2023 - ★★½ Watched on: 13 June 2023\nReview\nPrepare to buckle up as Fast X zooms onto the big screen, delivering its trademark mix of high-octane action and heart-pounding thrills. Led by the magnetic presence of Jason Momoa as the nefarious antagonist, this installment introduces us to the most cynical and edgy villain in the franchise\u0026rsquo;s history.While the Fast X series has always been synonymous with adrenaline-fueled entertainment, this particular chapter falls short of reaching its full potential. With a rating of 2.5/5, it becomes apparent that despite the movie\u0026rsquo;s undeniable fun factor, it lacks the substance to elevate it to higher echelons of cinematic excellence.Amidst the explosions, car chases, and mind-bending stunts, one cannot overlook the abundance of cringe-worthy moments, cheesy dialogues, and ill-timed jokes. However, the action sequences themselves are a marvel to behold, showcasing an impressive blend of automotive prowess, aerial acrobatics, and explosive mayhem. The filmmakers have done a commendable job in selecting visually captivating shooting locations that further enhance the movie\u0026rsquo;s grandeur.A standout performance by John Cena adds depth to the ensemble cast, while the film\u0026rsquo;s fast-paced opening sequences leave you breathless, though slightly bewildered. It is worth noting that Fast X marks the first time in the franchise\u0026rsquo;s history that it concludes with a tantalizing cliffhanger, leaving fans eagerly anticipating the next installment.In essence, while Fast X has its share of strengths and weaknesses, it remains an enjoyable spectacle for fans of the series. Strap in and revel in the exhilarating ride, but be prepared for the occasional detour into one-dimensional storytelling and juvenile moments.\nRead on Letterboxd\n","permalink":"https://atharvashah.netlify.app/posts/personal/movie-review/june-2023/","summary":"June 2023 gave me a chance to recover from the movie slog that was suffered last month. It has been an exciting month for cinema enthusiasts like myself, as I indulged in a diverse selection of films across various genres. From timeless classics to recent releases, each movie offered its own unique experience and left me with a range of emotions. Now, let\u0026rsquo;s delve into my thoughts on the films I had the pleasure of watching during this captivating month.","title":"June 2023 Movies: Summer Cinema"},{"content":"Introduction ABC Private Limited, a retail company, aims to gain valuable insights into their customers\u0026rsquo; purchasing habits. By analyzing the provided summary of high-volume product purchase history, which includes customer demographics and product details, ABC can uncover patterns and trends in customer spending across different product categories.\nWe will explore the analysis step-by-step using the test.csv and train.csv files. Through a combination of theoretical explanations and practical demonstrations, we will delve into data preprocessing, exploratory data analysis, feature engineering, and model building. We will be utilizing the power of Python for conducting Exploratory Data Analysis, performing data visualization, and training machine learning models. It is recommended to follow along using a Jupyter Notebook, as it provides an interactive and user-friendly environment for code execution and documentation.\nTo proceed with the analysis, we will make use of various Python libraries, including:\npandas: for data manipulation and analysis matplotlib: data visualization scikit-learn: evaluating and training machine learning models numpy: numerical computations seaborn: enhanced data visualization xgboost: implementing gradient boosting algorithms sklearn: additional machine learning tools and utilities 💡 Make sure to have these packages installed in your Python environment. You can install them using pip or conda by running the following commands:\npip install pandas matplotlib scikit-learn numpy seaborn xgboost sklearn Data Preprocessing Let’s begin with the exercise by importing the necessary modules. You have already installed these in the previous section.\nimport pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns import os import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn import metrics from sklearn.preprocessing import LabelEncoder,minmax_scale,scale from sklearn.linear_model import LinearRegression from sklearn.preprocessing import StandardScaler from sklearn.tree import DecisionTreeRegressor from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor from sklearn.metrics import mean_absolute_error,mean_squared_error from xgboost.sklearn import XGBRegressor Descriptive Statistics CODE\n# STEP 1: LOAD THE DATA sales_df = pd.read_csv(\u0026#39;train.csv\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;, sep=\u0026#39;,\u0026#39;, header=0) # print the shape of the dataset [rows, columns] rows, columns = sales_df.shape print(f\u0026#39;Shape = {rows} rows x{columns} columns\u0026#39;) # print the datatype of each column sales_df.dtypes # print the datatype of each column sales_df.head() OUTPUT\nShape = 550068 rows x 12 columns User_ID int64 Product_ID object Gender object Age object Occupation int64 City_Category object Stay_In_Current_City_Years object Marital_Status int64 Product_Category_1 int64 Product_Category_2 float64 Product_Category_3 float64 Purchase int64 dtype: object To start off we did the following:-\nLoaded the data from the \u0026ldquo;train.csv\u0026rdquo; file into the pandas DataFrame called sales_df and used pd.read_csv() function with \u0026lsquo;utf-8\u0026rsquo; encoding and \u0026lsquo;,\u0026rsquo; separator to read the CSV file. Set header=0 to indicate that the first row contains column names. Printed the shape of the DataFrame to show the number of rows and columns. Retrieved the number of rows and columns using sales_df.shape and stored them in rows and columns variables. Printed the information about the dataset in a formatted string. Checked the data type of each column using sales_df.dtypes to understand the types of features in the dataset. Identified data types such as int64 for integers and object for strings or categorical variables. Printed the first five rows to get an overview of the nature of columns and the sales data. CODE\n# Check descriptive statistics of the dataset sales_df.describe() OUTPUT\nUser_ID Occupation Marital_Status Product_Category_1 count 5.500680e+05 550068.000000 550068.000000 550068.000000\rmean 1.003029e+06 8.076707 0.409653 5.404270\rstd 1.727592e+03 6.522660 0.491770 3.936211\rmin 1.000001e+06 0.000000 0.000000 1.000000\r25% 1.001516e+06 2.000000 0.000000 1.000000\r50% 1.003077e+06 7.000000 0.000000 5.000000\r75% 1.004478e+06 14.000000 1.000000 8.000000\rmax 1.006040e+06 20.000000 1.000000 20.000000\rProduct_Category_2 Product_Category_3 Purchase count 376430.000000 166821.000000 550068.000000 mean 9.842329 12.668243 9263.968713 std 5.086590 4.125338 5023.065394 min 2.000000 3.000000 12.000000 25% 5.000000 9.000000 5823.000000 50% 9.000000 14.000000 8047.000000 75% 15.000000 16.000000 12054.000000 max 18.000000 18.000000 23961.000000 CODE\ncategorical=sales_df.select_dtypes(include=[object]) print(\u0026#34;Categorical columns:\u0026#34;,categorical.shape[1]) numerical=sales_df.select_dtypes(include=[np.float64,np.int64]) print(\u0026#34;Numerical columns:\u0026#34;,numerical.shape[1]) # check for missing values in the data sales_df.isnull().sum() OUTPUT\nCategorical columns: 5\rNumerical columns: 7\rUser_ID 0\rProduct_ID 0\rGender 0\rAge 0\rOccupation 0\rCity_Category 0\rStay_In_Current_City_Years 0\rMarital_Status 0\rProduct_Category_1 0\rProduct_Category_2 173638\rProduct_Category_3 383247\rPurchase 0\rdtype: int64 The takeaway from this so far is:-\nIdentified 5 categorical columns and 7 numerical columns in the dataset. Checked for missing values using sales_df.isnull().sum(). Found that Product_Category_2 has 173,638 missing values and Product_Category_3 has 383,247 missing values. No missing values were found in other columns. 💡 Missing values can alter the process because they introduce uncertainty and can affect the statistical properties of the data. Missing data can lead to biased analysis, inaccurate results, and reduced performance of machine learning models. Therefore, it is crucial to handle missing values appropriately to ensure the integrity and reliability of the analysis.\nWays to handle missing values:\nFilling them with a suitable value, such as the mean, median, or mode of the column. This approach is used here, where the missing values in \u0026lsquo;Product_Category_2\u0026rsquo; and \u0026lsquo;Product_Category_3\u0026rsquo; are filled with their respective means. Remove the rows or columns with missing values, but this can lead to data loss and should be done cautiously. Depending on the context and the significance of the missing values, other advanced techniques like imputation methods (e.g., regression imputation, KNN imputation) or using machine learning models to predict missing values can be employed. As seen above, Product_Category_2 and Product_Category_3 have several values missing, so let’s deal with it below.\nCODE\n# Fill missing values with mean sales_df[\u0026#39;Product_Category_2\u0026#39;]=sales_df[\u0026#39;Product_Category_2\u0026#39;].fillna(sales_df[\u0026#39;Product_Category_2\u0026#39;].mean()) sales_df[\u0026#39;Product_Category_3\u0026#39;]=sales_df[\u0026#39;Product_Category_3\u0026#39;].fillna(sales_df[\u0026#39;Product_Category_3\u0026#39;].mean()) # Check for missing values in the data sales_df.isnull().sum() # see which columns have non-repeating vals sales_df.nunique() OUTPUT\nUser_ID 0\rProduct_ID 0\rGender 0\rAge 0\rOccupation 0\rCity_Category 0\rStay_In_Current_City_Years 0\rMarital_Status 0\rProduct_Category_1 0\rProduct_Category_2 0\rProduct_Category_3 0\rPurchase 0\rdtype: int64\rUser_ID 5891\rProduct_ID 3631\rGender 2\rAge 7\rOccupation 21\rCity_Category 3\rStay_In_Current_City_Years 5\rMarital_Status 2\rProduct_Category_1 20\rProduct_Category_2 18\rProduct_Category_3 16\rPurchase 18105\rdtype: int64 Here, to deal with unstructured data and missing values we did the following:-\nMissing values in the columns \u0026lsquo;Product_Category_2\u0026rsquo; and \u0026lsquo;Product_Category_3\u0026rsquo; are filled with the mean value of each respective column using the fillna() function. Checked for missing values again using sales_df.isnull().sum() and confirmed that there are no missing values in any column. Utilized sales df.nunique() method to determine the number of distinct values in each column. Understanding the variety and cardinality of each characteristic is aided by this. Outlier Analysis Outliers are data points that deviate significantly from most of the data in a dataset. They can be unusually high or low values that are distant from the central tendency of the distribution. Outliers can occur due to various reasons, such as measurement errors, data entry mistakes, or genuine extreme observations.\nOutliers are harmful because they can distort the statistical analysis and modeling process. They can have a disproportionate impact on statistical measures such as mean and standard deviation, leading to biased estimates. Outliers can also affect the performance of machine learning models by introducing noise and influencing the model\u0026rsquo;s decision boundaries.\nBoxplots are a graphical representation that displays the distribution of a dataset, including information about outliers. In a boxplot, the box represents the interquartile range (IQR), the line inside the box represents the median, and the whiskers extend to the minimum and maximum values within a certain range.\nCODE\n# make a boxplot to show outliers, only for numerical columns columns = [\u0026#39;Purchase\u0026#39;, \u0026#39;Product_Category_1\u0026#39;, \u0026#39;Product_Category_2\u0026#39;, \u0026#39;Occupation\u0026#39;] for column in columns: plt.figure() sns.boxplot(data=sales_df[[column]]) OUTPUT\nTo deal with outliers using boxplots, one approach is to identify and remove the outliers based on predetermined thresholds. This can be done by considering values that fall below the lower whisker or above the upper whisker as outliers. Alternatively, instead of removing outliers, they can be treated or transformed using techniques such as winsorization (replacing extreme values with a specified percentile value) or logarithmic transformations.\nIn the provided code, a boxplot is created for each numerical column (\u0026lsquo;Purchase\u0026rsquo;, \u0026lsquo;Product_Category_1\u0026rsquo;, \u0026lsquo;Product_Category_2\u0026rsquo;, \u0026lsquo;Occupation\u0026rsquo;) using seaborn\u0026rsquo;s boxplot function. This allows visual identification of any outliers present in the data for these specific columns.\nConvert Categorical and Range Variables to Integers Categorical variables are variables that represent qualitative attributes or characteristics. They take on a limited number of distinct categories or levels. Examples of categorical variables include gender, occupation, and city category.\nRange variables, also known as continuous variables, represent quantitative attributes that can take on any value within a certain range. Examples of range variables include age, income, and purchase amount.\nConverting categorical and range variables to integers is important for several reasons:\nNumerical representation: Many machine learning algorithms and statistical models require numerical input. By converting categorical and range variables to integers, we can ensure that the data can be processed and analyzed correctly.\nSimplification of calculations: Numeric representation simplifies calculations and computations. It allows for arithmetic operations and comparisons, which are essential in various statistical analyses and modeling techniques.\nStandardization and scaling: Converting variables to integers can help standardize and scale the data. This is particularly important when using certain algorithms that are sensitive to the scale of the input features. Standardization can improve the performance and stability of these algorithms.\nEncoding categorical variables: Converting categorical variables to integers allows us to apply encoding techniques such as one-hot encoding or label encoding.\nCODE\nprint(sales_df[\u0026#39;Stay_In_Current_City_Years\u0026#39;].value_counts()) print(sales_df[\u0026#39;City_Category\u0026#39;].value_counts()) print(sales_df[\u0026#39;Age\u0026#39;].value_counts()) print(sales_df[\u0026#39;Gender\u0026#39;]) OUTPUT\n1 193821\r2 101838\r3 95285\r4+ 84726\r0 74398\rName: Stay_In_Current_City_Years, dtype: int64\rB 231173\rC 171175\rA 147720\rName: City_Category, dtype: int64\r26-35 219587\r36-45 110013\r18-25 99660\r46-50 45701\r51-55 38501\r55+ 21504\r0-17 15102\rName: Age, dtype: int64\r0 F\r1 F\r2 F\r3 F\r4 M\r..\r550063 M\r550064 F\r550065 F\r550066 F\r550067 F\rName: Gender, Length: 550068, dtype: object CODE\n# Group by Product_Category_1 and calculate the mean purchase price product_category_1_mean = sales_df[[\u0026#39;Product_Category_1\u0026#39;, \u0026#39;Purchase\u0026#39;]].groupby([\u0026#39;Product_Category_1\u0026#39;], as_index=False).mean().sort_values(by=\u0026#39;Purchase\u0026#39;, ascending=False) product_category_1_mean.columns = [\u0026#39;Product_Category_1\u0026#39;, \u0026#39;Mean_Purchase_Price\u0026#39;] product_category_1_mean[\u0026#39;Mean_Purchase_Price\u0026#39;] = product_category_1_mean[\u0026#39;Mean_Purchase_Price\u0026#39;].map(\u0026#39;{:.2f}\u0026#39;.format) # Group by Product_Category_2 and calculate the mean purchase price product_category_2_mean = sales_df[[\u0026#39;Product_Category_2\u0026#39;, \u0026#39;Purchase\u0026#39;]].groupby([\u0026#39;Product_Category_2\u0026#39;], as_index=False).mean().sort_values(by=\u0026#39;Purchase\u0026#39;, ascending=False) product_category_2_mean.columns = [\u0026#39;Product_Category_2\u0026#39;, \u0026#39;Mean_Purchase_Price\u0026#39;] product_category_2_mean[\u0026#39;Mean_Purchase_Price\u0026#39;] = product_category_2_mean[\u0026#39;Mean_Purchase_Price\u0026#39;].map(\u0026#39;{:.2f}\u0026#39;.format) # Display the results without indexes with pd.option_context(\u0026#39;display.float_format\u0026#39;, \u0026#39;{:.2f}\u0026#39;.format): print(product_category_1_mean.to_string(index=False)) print(product_category_2_mean.to_string(index=False)) OUTPUT\nProduct_Category_1 Mean_Purchase_Price\r10 19675.57\r7 16365.69\r6 15838.48\r9 15537.38\r15 14780.45\r16 14766.04\r1 13606.22\r14 13141.63\r2 11251.94\r17 10170.76\r3 10096.71\r8 7498.96\r5 6240.09\r11 4685.27\r18 2972.86\r4 2329.66\r12 1350.86\r13 722.40\r20 370.48\r19 37.04\rProduct_Category_2 Mean_Purchase_Price\r10.00 15648.73\r2.00 13619.36\r6.00 11503.55\r3.00 11235.36\r15.00 10357.08\r16.00 10295.68\r8.00 10273.26\r4.00 10215.19\r13.00 9683.35\r17.00 9421.58\r18.00 9352.44\r5.00 9027.82\r11.00 8940.58\r9.84 7518.70\r9.00 7277.01\r14.00 7105.26\r12.00 6975.47\r7.00 6884.68 As demonstrated, we are performing grouping and aggregation operation on the sales data.\nFor Product_Category_1, we group the data by this category and calculate the mean purchase price for each category. The results are sorted in descending order of purchase price. Similarly, for Product_Category_2, we group the data by this category and calculate the mean purchase price for each category. The results are also sorted in descending order of purchase price. The results are displayed without indexes, and the mean purchase prices are formatted to two decimal places for better readability. Purchase Distribution and Correlation Matrix The correlation coefficients between several variables are displayed in a table called a correlation matrix. It serves as a gauge for the strength and direction of a linear relationship between two variables.Each cell in the matrix represents the correlation coefficient between two variables, ranging from -1 to 1. A positive value indicates a positive correlation, meaning that as one variable increases, the other variable tends to increase as well. A negative value indicates a negative correlation, meaning that as one variable increases, the other variable tends to decrease. A value close to 0 indicates a weak or no correlation between the variables.\nAnalyzing the correlation matrix is important because it provides insights into the relationships between variables. It helps in understanding how different features or variables are related to each other and to the target variable. By identifying strong correlations, we can determine which variables have a significant impact on the target variable and may be important for prediction or modeling purposes. Correlation analysis also helps in feature selection, as highly correlated variables may provide redundant information and can be eliminated to simplify the model and improve interpretability.\nIn machine learning models, correlation analysis helps in several ways:\nFeature Selection: Highly correlated features can be removed to avoid multicollinearity, where multiple variables provide similar information, leading to unstable and less interpretable models.\nFeature Engineering: By analyzing correlations, new features can be created by combining or transforming existing features, which can improve the predictive power of the model.\nModel Interpretation: Understanding the correlation between variables helps in interpreting the model\u0026rsquo;s coefficients and understanding the direction and strength of the relationships between features and the target variable.\nCODE\n# plot the correlation matrix as a heatmap plt.figure(figsize=(10, 10)) sns.heatmap(matrix, vmax=1, square=True, cmap=\u0026#39;BuPu\u0026#39;, annot=True) plt.title(\u0026#39;Correlation between different features\u0026#39;) plt.show() OUTPUT\nBased on the correlation heatmap, we can observe that certain variables have a stronger correlation with the \u0026ldquo;Purchase\u0026rdquo; column. The variables \u0026ldquo;User_ID,\u0026rdquo; \u0026ldquo;Marital Status,\u0026rdquo; and \u0026ldquo;Product_Category_3\u0026rdquo; show relatively weak correlation with the purchase power of the customer. Conversely, the variables \u0026ldquo;Occupation,\u0026rdquo; \u0026ldquo;Product Category 1,\u0026rdquo; and \u0026ldquo;Product Category 2\u0026rdquo; exhibit a significantly higher impact on the purchase behavior. It\u0026rsquo;s important to note that this correlation analysis is based on numerical fields only, and we will be generating an even more insightful heatmap right before preparing the ML model.\nData Visualization The graphical depiction of data using graphs, charts, and other visual components is known as data visualisation and it is a way to visually explore and communicate patterns, relationships, and trends within the data.\nBy plotting different variables against the \u0026ldquo;Purchase\u0026rdquo; variable, trends can be identified through visual analysis.\nCODE\n# Check the purchase distribution with respect to Gender purchase_gender = sales_df.groupby[\u0026#39;Gender\u0026#39;](\u0026#39;Purchase\u0026#39;).sum() / 1000000 # Rename 0 and 1 to Female and Male purchase_gender.index = [\u0026#39;Female\u0026#39;, \u0026#39;Male\u0026#39;] # Plot the purchase distribution by Gender plt.bar(purchase_gender.index, purchase_gender, color=[\u0026#39;#F8766D\u0026#39;, \u0026#39;#00BFC4\u0026#39;] ) # Add a title plt.title(\u0026#39;Purchase Distribution by Gender\u0026#39;) # Customize the x-axis and y-axis labels plt.xlabel(\u0026#39;Gender\u0026#39;) plt.ylabel(\u0026#39;Purchase (in millions)\u0026#39;) # Display the plot plt.show() OUTPUT\nBased on the data provided in train.csv, males have purchased significantly more than females, almost 3x more. This would lead us to the conclusion that either the data set is skewed, or men are willing to spend much more on products by company ABC. This also speaks about purchase power parity.\nCODE\n# Check the purchase distribution with respect to Age purchase_age = sales_df.groupby[\u0026#39;Age\u0026#39;](\u0026#39;Purchase\u0026#39;).sum() / 1000000 # Assign the modified age labels as the index purchase_age.index = [\u0026#39;0-17\u0026#39;, \u0026#39;18-25\u0026#39;, \u0026#39;26-35\u0026#39;, \u0026#39;36-45\u0026#39;, \u0026#39;46-50\u0026#39;, \u0026#39;51-55\u0026#39;, \u0026#39;55+\u0026#39;] # Plot the purchase distribution by Age plt.bar(purchase_age.index, purchase_age, color=[\u0026#39;#4C72B0\u0026#39;, \u0026#39;#55A868\u0026#39;, \u0026#39;#C44E52\u0026#39;, \u0026#39;#8172B2\u0026#39;, \u0026#39;#CCB974\u0026#39;, \u0026#39;#64B5CD\u0026#39;, \u0026#39;#4C4C4C\u0026#39;]) # Add a title plt.title(\u0026#39;Purchase Distribution by Age\u0026#39;) # Customize the x-axis and y-axis labels plt.xlabel(\u0026#39;Age\u0026#39;) plt.ylabel(\u0026#39;Purchase (in millions)\u0026#39;) # Display the plot plt.show() OUTPUT\nAgain, this graph makes sense since most of the audience is represented by the centre curve, which gives the appearance of a normal curve. Most of the audience is between the ages of 26 and 35, while young people and the elderly have the lowest levels of purchasing power.\nCODE\n# Check the purchase distribution with respect to City_Category purchase_city = sales_df.groupby[\u0026#39;City_Category\u0026#39;](\u0026#39;Purchase\u0026#39;).sum() / 1000000 purchase_city.index = [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;] # Plot the purchase distribution by City Category as a pie chart plt.pie(purchase_city, labels=purchase_city.index, autopct=\u0026#39;%1.1f%%\u0026#39;, startangle=90, colors= [\u0026#39;#4C72B0\u0026#39;, \u0026#39;#55A868\u0026#39;, \u0026#39;#C44E52\u0026#39;]) # Add a title plt.title(\u0026#39;Purchase Distribution by City Category\u0026#39;) # Add a circle at the center of the pie to make it donut-like circle = plt.Circle((0, 0), 0.10, fc=\u0026#39;white\u0026#39;) plt.gca().add_artist(circle) plt.axis(\u0026#39;equal\u0026#39;) # Display the plot plt.show() OUTPUT\nWe can determine the percentage distribution of the city category by plotting a pie chart, and this helps us conclude that people from category B cities have the greatest purchasing power and willingness to spend, while category A cities have the fewest purchases made—nearly 1.8 times fewer than city type B.\nCODE\n# Check the purchase distribution with respect to Occupation purchase_occupation = sales_df.groupby[\u0026#39;Occupation\u0026#39;](\u0026#39;Purchase\u0026#39;).sum() / 1000000 # Bar plot plt.bar(purchase_occupation.index, purchase_occupation.values, color=\u0026#39;#4C72B0\u0026#39;, edgecolor=\u0026#39;black\u0026#39;) # Set labels and title plt.title(\u0026#39;Purchase Distribution by Occupation\u0026#39;) plt.xlabel(\u0026#39;Occupation Category\u0026#39;) plt.ylabel(\u0026#39;Purchase (in millions)\u0026#39;) # Add data labels on top of the bars for i, value **in** enumerate(purchase_occupation.values): plt.text(i, value + 0.2, f\u0026#39;{value:.2f}\u0026#39;, ha=\u0026#39;center\u0026#39;) # Add a background color to the plot plt.gca().set_facecolor(\u0026#39;#F5F5F5\u0026#39;) # Adjust spacing plt.tight_layout() # Display the plot plt.show() OUTPUT\nAs various employment categories pay varying incomes, it stands to reason that category 0, 4, and 7 occupations may potentially have the greatest earnings, which would therefore likely result in more expenditure on goods and services.\nBut the lowest purchase amounts are made by jobs in categories 8, 9, and 18.\nThis may be because individuals in these jobs don\u0026rsquo;t require the items made by business ABC, or it may be because of the extremely low earnings in the industrial sector.\nCODE\n# Check the purchase distribution with respect to Stay_In_Current_City_Years purchase_stay = sales_df.groupby[\u0026#39;Stay_In_Current_City_Years\u0026#39;](\u0026#39;Purchase\u0026#39;).sum() / 1000000 # Bar plot plt.bar(purchase_stay.index, purchase_stay.values, color=\u0026#39;#8B008B\u0026#39;, edgecolor=\u0026#39;black\u0026#39;) # Set labels and title plt.title(\u0026#39;Purchase Distribution by Stay in Current City Years\u0026#39;) plt.xlabel(\u0026#39;Years stayed in Current City\u0026#39;) plt.ylabel(\u0026#39;Purchase (in millions)\u0026#39;) # Add data labels on top of the bars **for** i, value **in** enumerate(purchase_stay.values): ``plt.text(i, value + 0.2, f\u0026#39;{value:.2f}\u0026#39;, ha=\u0026#39;center\u0026#39;) plt.gca().set_facecolor(\u0026#39;#F5F5F5\u0026#39;) plt.tight_layout() # Display the plot plt.show() OUTPUT\nThis bar graph reflects the needs of newcomers to the city who require products and services to establish themselves. As a result, those who have been in the city for a year have made the most purchases, which quickly decline as they continue to live there.\nCODE\n# check the purchase distribution with respect to Marital_Status purchase_marital = sales_df.groupby[\u0026#39;Marital_Status\u0026#39;](\u0026#39;Purchase\u0026#39;).sum() / 1000000 # Map values of Marital_Status to corresponding labels purchase_marital.index = [\u0026#39;Unmarried\u0026#39;, \u0026#39;Married\u0026#39;] # Bar plot plt.bar(purchase_marital.index, purchase_marital.values, color=[\u0026#39;#6495ED\u0026#39;, \u0026#39;#FFA07A\u0026#39;] , edgecolor=\u0026#39;black\u0026#39;) # Set labels and title plt.title(\u0026#39;Purchase Distribution by Marital Status\u0026#39;) plt.xlabel(\u0026#39;Marital Status\u0026#39;) plt.ylabel(\u0026#39;Purchase (in millions)\u0026#39;) # Add data labels on top of the bars for i, value **in** enumerate(purchase_marital.values): ``plt.text(i, value + 0.2, f\u0026#39;{value:.2f}\u0026#39;, ha=\u0026#39;center\u0026#39;) # Add a background color to the plot plt.gca().set_facecolor(\u0026#39;#F5F5F5\u0026#39;) # Adjust spacing plt.tight_layout() # Display the plot plt.show() OUTPUT\nWhen contrasted to married people, the bias obviously favours single people, probably because of the costs associated with education, travel, and other products and services. Nonetheless, because of financial considerations like family planning and long-term savings, married people may tend to spend less.\nA scatter plot is a type of data visualization that represents the relationship between two variables. It displays individual data points as dots on a two-dimensional graph, with one variable plotted along the x-axis and the other variable plotted along the y-axis. Scatter plots are useful for visualizing the correlation or relationship between two continuous variables.\nTo see the relationship between product category 1 (categorical) and purchase using a scatter plot, we need to convert the categorical variable into a numerical representation. One way to achieve this is by assigning a numeric code to each category. For example, we can map \u0026lsquo;Product_Category_1\u0026rsquo; values like \u0026lsquo;Category A\u0026rsquo; to 1, \u0026lsquo;Category B\u0026rsquo; to 2, and so on.\nCODE\n# Scatter plot plt.scatter(sales_df[\u0026#39;Product_Category_1\u0026#39;], sales_df[\u0026#39;Purchase\u0026#39;], color=\u0026#39;#8A2BE2\u0026#39;, edgecolors=\u0026#39;black\u0026#39;) # Set labels and title plt.xlabel(\u0026#39;Product Category 1\u0026#39;) plt.ylabel(\u0026#39;Purchase\u0026#39;) plt.title(\u0026#39;Relationship between Purchase and Product Category 1\u0026#39;) # Add gridlines plt.grid(True, linestyle=\u0026#39;--\u0026#39;, linewidth=0.5, alpha=0.7) # Add transparency to the scatter points plt.scatter(sales_df[\u0026#39;Product_Category_1\u0026#39;], sales_df[\u0026#39;Purchase\u0026#39;], color=\u0026#39;#8A2BE2\u0026#39;,** edgecolors=\u0026#39;black\u0026#39;, alpha=0.5) plt.legend([\u0026#39;Data Points\u0026#39;]) plt.gca().set_facecolor(\u0026#39;#F5F5F5\u0026#39;) plt.tight_layout() # Display the plot plt.show() OUTPUT\nAs seen above, product categories 4, 13, 19 and 20 have products which are not priced more than 5000 hence these product categories, although numerous will generate the least revenue. On the other hand, product categories 9, 10, 6, and 7 have items with prices that typically start at or exceed 5,000 and can even reach 20,000 or 25,000, generating more revenue for the business. You can also probabilisticlaly determine the name of these categories from the price ranges. Most other categories are somewhere in between.\nCODE\n# Scatter plot plt.scatter(sales_df[\u0026#39;Product_Category_2\u0026#39;], sales_df[\u0026#39;Purchase\u0026#39;], color=\u0026#39;#32CD32\u0026#39; , edgecolors=\u0026#39;black\u0026#39;) # Set labels and title plt.xlabel(\u0026#39;Product Category 2\u0026#39;) plt.ylabel(\u0026#39;Purchase\u0026#39;) plt.title(\u0026#39;Relationship between Purchase and Product Category 2\u0026#39;) # Add gridlines plt.grid(True, linestyle=\u0026#39;--\u0026#39;, linewidth=0.5, alpha=0.7) # Add transparency to the scatter points plt.scatter(sales_df[\u0026#39;Product_Category_2\u0026#39;], sales_df[\u0026#39;Purchase\u0026#39;], color=\u0026#39;#32CD32\u0026#39; , edgecolors=\u0026#39;black\u0026#39;, alpha=0.5) # Add a legend plt.legend([\u0026#39;Data Points\u0026#39;]) plt.gca().set_facecolor(\u0026#39;#F5F5F5\u0026#39;) plt.tight_layout() # Display the plot plt.show() OUTPUT\nCODE\n# Plot the most frequently bought products plt.figure(figsize=(10, 5)) plt.bar(top_frequently_bought.index, top_frequently_bought.values, color=\u0026#39;#4287f5\u0026#39;, edgecolor=\u0026#39;black\u0026#39;) plt.title(\u0026#39;Most Frequently Bought Products\u0026#39;) plt.xlabel(\u0026#39;Product ID\u0026#39;) plt.ylabel(\u0026#39;Purchase Count\u0026#39;) plt.xticks(rotation=90) plt.tight_layout() # Adjust spacing plt.show() # Plot the products that generated the most revenue plt.figure(figsize=(10, 5)) plt.bar(top_revenue_products.index, top_revenue_products.values/1000000, color=\u0026#39;#4287f5\u0026#39;, edgecolor=\u0026#39;black\u0026#39;) plt.title(\u0026#39;Products with the Most Revenue\u0026#39;) plt.xlabel(\u0026#39;Product ID\u0026#39;) plt.ylabel(\u0026#39;Revenue (in millions)\u0026#39;) plt.xticks(rotation=90) plt.tight_layout() # Adjust spacing plt.show() OUTPUT\nThis code is plotting two bar charts. The first chart shows the most frequently bought products, displaying the purchase count for each product. The second chart displays the products that generated the most revenue, showing the revenue (in millions) for each product.\nThese visualizations provide valuable insights into the popular products and their revenue contribution, which can help identify best-selling items and inform business decisions related to inventory management, marketing strategies, and product promotions. This will prove beneficial for the company to analyze their sales data and identify which products are most popular among their customers.\nLabel Encoding and Feature Selection From this section we will be cleaning up the dataset and picking the features and the target for our Machine Learning model. But before moving on, let us describe a few terms.\nLabel encoding is a process of converting categorical variables into numerical format. It assigns a unique numeric label to each category within a variable. This encoding is useful when working with machine learning algorithms that require numerical inputs.\nFeature selection is the process of selecting a subset of relevant features (variables) from the available dataset that are most predictive or informative for the target variable. It helps to improve model performance, reduce overfitting, and enhance interpretability.\nIn machine learning models, the \u0026ldquo;target\u0026rdquo; refers to the variable that the model aims to predict or estimate. It is also known as the dependent variable or the output variable. The target variable represents the outcome or the value we want to predict based on the input features (independent variables) in the model. The model learns patterns and relationships in the input features to make predictions or classifications for the target variable.\nThe steps involved in making a robust ML model are:\nTo set up your machine learning algorithm for predicting the values of the \u0026ldquo;purchase\u0026rdquo; column based on the given train.csv and test.csv datasets, you can follow these steps:\nData Preprocessing\nLoad the train.csv dataset and perform necessary data cleaning and preprocessing steps such as handling missing values, encoding categorical variables, and splitting the data into features (X_train) and target (y_train). Similarly, preprocess the test.csv dataset, ensuring that it undergoes the same preprocessing steps as the training data. However, since the \u0026ldquo;purchase\u0026rdquo; column is missing in the test dataset, you can exclude it from the features (X_test) and treat it as the target variable that you want to predict. Feature Selection and Engineering:\nBased on the analysis of the data and any available correlation insights, select the relevant features that have a strong impact on the target variable. Perform any feature engineering techniques such as creating new features, scaling/normalizing the data, or transforming variables if necessary. Ensure that these steps are consistently applied to both the training and test datasets. Model Selection and Training:\nChoose an appropriate machine learning algorithm for regression, such as Linear Regression, Random Forest Regression, or Gradient Boosting Regression. Split the preprocessed training data (X_train and y_train) into training and validation sets. Train your chosen model on the training data and tune hyperparameters if necessary, using techniques like cross-validation and grid search. Model Evaluation:\nEvaluate the performance of your trained model on the validation set using appropriate evaluation metrics such as mean squared error (MSE), root mean squared error (RMSE), or R-squared. This will give you an idea of how well your model is performing. Model Prediction:\nOnce you are satisfied with the model\u0026rsquo;s performance, use it to predict the \u0026ldquo;purchase\u0026rdquo; values for the preprocessed test dataset (X_test) that does not have the \u0026ldquo;purchase\u0026rdquo; column. The predicted values will serve as the predicted purchase amounts for each customer and product combination in the test dataset. CODE\nwith open(\u0026#39;test.csv\u0026#39; , \u0026#39;r\u0026#39;) as f: test = pd.read_csv(f) # Instantiate the LabelEncoder le = LabelEncoder() train_ml = sales_df.copy() test_ml = test.copy() train_ml[\u0026#39;User_ID\u0026#39;]=le.fit_transform(train_ml[\u0026#39;User_ID\u0026#39;]) test_ml[\u0026#39;User_ID\u0026#39;]=le.fit_transform(test_ml[\u0026#39;User_ID\u0026#39;]) train_ml[\u0026#39;Product_ID\u0026#39;]=le.fit_transform(train_ml[\u0026#39;Product_ID\u0026#39;]) test_ml[\u0026#39;Product_ID\u0026#39;]=le.fit_transform(test_ml[\u0026#39;Product_ID\u0026#39;]) train_ml[\u0026#39;Age\u0026#39;]=train_ml[\u0026#39;Age\u0026#39;].map({\u0026#39;0-17\u0026#39;:17,\u0026#39;55+\u0026#39;:60,\u0026#39;26-35\u0026#39;:35, \u0026#39;46-50\u0026#39;:50,\u0026#39;51-55\u0026#39;:55,\u0026#39;36-45\u0026#39;:45,\u0026#39;18-25\u0026#39;:25}) test_ml[\u0026#39;Age\u0026#39;]=test_ml[\u0026#39;Age\u0026#39;].map({\u0026#39;0-17\u0026#39;:17,\u0026#39;55+\u0026#39;:60,\u0026#39;26-35\u0026#39;:35,\u0026#39;46-50\u0026#39;:50,\u0026#39;51-55\u0026#39;:55,\u0026#39;36-45\u0026#39;:45,\u0026#39;18-25\u0026#39;:25}) train_ml[\u0026#39;Stay_In_Current_City_Years\u0026#39;]=train_ml[\u0026#39;Stay_In_Current_City_Years\u0026#39;].map({\u0026#39;2\u0026#39;:2,\u0026#39;4+\u0026#39;:4, \u0026#39;3\u0026#39;:3,\u0026#39;1\u0026#39;:1,\u0026#39;0\u0026#39;:0}) test_ml[\u0026#39;Stay_In_Current_City_Years\u0026#39;]=test_ml[\u0026#39;Stay_In_Current_City_Years\u0026#39;].map({\u0026#39;2\u0026#39;:2,\u0026#39;4+\u0026#39;:4, \u0026#39;3\u0026#39;:3,\u0026#39;1\u0026#39;:1,\u0026#39;0\u0026#39;:0}) category_train_ml=train_ml.select_dtypes(include=[object]).columns le=LabelEncoder() for col in category_train_ml: train_ml[col]=le.fit_transform(train_ml[col]) categorical_test_ml=test_ml.select_dtypes(include=[object]).columns for cols in categorical_test_ml: test_ml[cols]=le.fit_transform(test_ml[cols]) train_ml.tail() OUTPUT\nUser_ID Product_ID Gender Age Occupation City_Category 550063 5883 3567 1 55 13 1\r550064 5885 3568 0 35 1 2\r550065 5886 3568 0 35 15 1\r550066 5888 3568 0 60 1 2\r550067 5889 3566 0 50 0 1\rStay_In_Current_City_Years Marital_Status Product_Category_1 550063 1 1 20\r550064 3 0 20\r550065 4 1 20\r550066 2 0 20\r550067 4 1 20\rProduct_Category_2 Product_Category_3 Purchase 550063 9.842329 12.668243 368 550064 9.842329 12.668243 371 550065 9.842329 12.668243 137 550066 9.842329 12.668243 365 550067 9.842329 12.668243 490 Here’s what we did above, as you can guess from the output.\nThe test.csv file is being read using pandas’ read_csv function and stored in a variable called test. Previously we worked only with train.csv but since we are now building the actual ML model, we will need the test data set as well. An instance of the LabelEncoder class is being created and stored in a variable called le. The sales_df dataframe is being copied into two new dataframes called train_ml and test_ml. The User_ID and Product_ID columns of both train_ml and test_ml is being encoded using the fit_transform method of le. The Age column of both train_ml and test_ml is being mapped to new values using a dictionary. The Stay_In_Current_City_Years column of both train_ml and test_ml is being mapped to new values using a dictionary. All categorical columns of train_ml is being encoded using the fit_transform method of le. All categorical columns of test_ml is being encoded using the fit_transform method of le. To improve Feature Selection, the following steps will prove beneficial.\nLoad and preprocess your dataset. Split the dataset into input features (X) and the target variable (y). Import the necessary libraries for feature selection. Apply one or more feature selection techniques to evaluate the importance of each feature. Select the top k features based on their importance scores or other criteria. Subset your dataset to include only the selected features. Train your model using the subset of selected features. Evaluate the performance of your model using appropriate metrics. Improving feature selection involves identifying the most relevant and informative features for your prediction task. Here are some approaches to improve feature selection:\nUnivariate Feature Selection: Use statistical tests or metrics to evaluate the relationship between each feature and the target variable independently. Select the features with the highest scores or p-values as the most relevant.\nRecursive Feature Elimination: Train a model using all features and recursively eliminate the least important features based on their coefficients or feature importances. This iterative process helps identify the subset of features that contribute the most to the model\u0026rsquo;s performance.\nFeature Importance from Tree-based Models: Train tree-based models such as Random Forest or XGBoost and extract the feature importances. Select the features with the highest importances as they have a greater impact on the model\u0026rsquo;s predictions.\nRegularization Techniques: Use regularization techniques like L1 (Lasso) or L2 (Ridge) regularization to penalize less important features and encourage sparsity. These techniques can help automatically select the most informative features.\nDomain Knowledge and Feature Engineering: Leverage your domain knowledge to engineer new features or transform existing ones that may provide more relevant information for the prediction task. Feature engineering can significantly improve the performance of your model.\nDimensionality Reduction Techniques: Apply dimensionality reduction techniques like Principal Component Analysis (PCA) or Singular Value Decomposition (SVD) to reduce the dimensionality of the feature space while retaining most of the important information. This can help eliminate redundant or less informative features.\nRegular Monitoring and Iterative Improvement: Continuously monitor the performance of your model and iterate on feature selection. Experiment with different combinations of features, feature transformations, and feature engineering techniques to find the most effective set of features.\nBuilding the ML Model After completing the data preprocessing, analysis, visualization, and label encoding, we are now ready to build a machine learning model to predict the \u0026ldquo;Purchase\u0026rdquo; value for company ABC. In this case, we are dealing with a regression problem since we want to estimate a continuous numerical value.\nAmong the various regression models available, one of the top models provided by the scikit-learn library is the Linear Regression model. Linear Regression is a popular and widely used regression technique that assumes a linear relationship between the input features and the target variable. It aims to find the best-fit line that minimizes the difference between the actual and predicted values.\nThe Linear Regression model in scikit-learn provides various functionalities, including:\nHandling multiple input features and calculating their coefficients. Performing feature scaling to standardize the input features. Handling categorical variables using techniques like one-hot encoding or label encoding. Evaluating the model\u0026rsquo;s performance using various metrics such as mean squared error (MSE), root mean squared error (RMSE), mean absolute error (MAE), and coefficient of determination (R-squared). These metrics help us assess how well the model fits the data and how accurate its predictions are. To select the best regression model for our task, we will train and evaluate multiple regression models, such as Linear Regression, Decision Tree Regression, Random Forest Regression, and XGBoost Regression and evaluate their performance to see which yields the highest accuracy.\nBefore moving on to the coding phase, let us first identify the metrics to identify the best performing model.\nR2 score, also known as the coefficient of determination, measures the proportion of the variance in the target variable that can be explained by the model. It indicates how well the model fits the data, with a higher value indicating a better fit. MSE calculates the average squared difference between the actual and predicted values, while RMSE is the square root of MSE, providing a more interpretable metric in the original unit of the target variable. Lower MSE and RMSE values indicate better accuracy and less error in the predictions. LINEAR REGRESSION\nIt is a simple and widely used regression algorithm that assumes a linear relationship between the input features and the target variable. It calculates the coefficients for each feature to fit a best-fit line to the data. It is easy to interpret and provides insights into the impact of each feature on the target variable.\nCODE\nx= train_ml.drop([\u0026#39;Purchase\u0026#39;],axis=1) y= train_ml[\u0026#39;Purchase\u0026#39;] test_x=test_ml train_x,val_x,train_y,val_y=train_test_split(x,y,test_size=0.2,random_state=42,shuffle=True) # LINEAR REGRESSION lr=LinearRegression() lr_model=lr.fit(train_x,train_y) pred_lr=lr_model.predict(val_x) mse = mean_squared_error(pred_lr, val_y) print(\u0026#34;Linear REG Mean Square Error: \u0026#34;, mse) rmse_lr = np.sqrt(mean_squared_error(val_y, pred_lr)) print(\u0026#34;Linear REG Root Mean Square Error: \u0026#34;, rmse_lr) features_lr = x.columns coeff_lr = lr_model.coef_ coefficients_lr = pd.Series(lr_model.coef_, features_lr) plt.figure(figsize=(10, 6)) sns.barplot(x=coeff_lr, y=features_lr, palette=\u0026#34;Blues_r\u0026#34;) plt.title(\u0026#34;Linear Regression Coefficients\u0026#34;, fontsize=16) plt.xlabel(\u0026#34;Coefficient\u0026#34;, fontsize=12) plt.ylabel(\u0026#34;Feature\u0026#34;, fontsize=12) plt.xticks(fontsize=10) plt.yticks(fontsize=10) plt.tight_layout() plt.show() OUTPUT\nLinear REG Mean Square Error: 21708175.443769183\rLinear REG Root Mean Square Error: 4659.203305691777 XGBOOST REGRESSION\nIt is an optimized gradient boosting framework that excels in handling structured data. It is an ensemble model that combines multiple weak learners (decision trees) to make accurate predictions. XGBoost Regression is specifically designed for regression tasks and provides excellent performance and flexibility. It handles missing values, supports regularization techniques, and offers advanced features like early stopping to prevent overfitting.\nCODE\n# XGBOOST REGRESSOR XGBoost_Regression = XGBRegressor(learning_rate=1.0, max_depth=6, min_child_weight=40, seed=0) XGBoost_Regression.fit(train_x, train_y) pred_xgb = XGBoost_Regression.predict(val_x) rmse_xgb = np.sqrt(mean_squared_error(pred_xgb, val_y)) print(\u0026#34;RMSE for XGBoost Regressor:\u0026#34;, rmse_xgb) OUTPUT\nRMSE for XGBoost Regressor: 2591.1169777068635 In the context of XGBoost, n_estimators is a hyperparameter that represents the number of decision trees to be built in the XGBoost ensemble. Each decision tree is trained sequentially, and the final prediction is obtained by aggregating the predictions of all the trees.\nIncreasing the value of n_estimators can improve the model\u0026rsquo;s performance up to a certain point. More trees allow the model to capture more complex patterns and relationships in the data, potentially leading to better predictive performance. However, using a very large value for n_estimators can also increase the risk of overfitting the training data and may result in longer training times.\nIt is common to tune the n_estimators hyperparameter during the model selection and evaluation process. This can be done using techniques such as cross-validation or grid search, where different values of n_estimators are tested to find the optimal value that balances model performance and computational efficiency. We are setting n_estimators=100 means that the XGBoost model will be trained using 100 decision trees in the ensemble.\nRANDOM FOREST REGRESSION\nRandom Forest Regression is an ensemble model that builds a multitude of decision trees and combines their predictions to obtain a more accurate and robust result. It addresses overfitting and is effective in handling high-dimensional datasets. It provides feature importance scores to identify the most influential features.\nCODE\n# RANDOM FOREST REGRESSOR RandomForest_reg=RandomForestRegressor(max_depth=2, random_state=0) RandomForest_reg.fit(train_x,train_y) RandomForest_reg=RandomForest_reg.predict(val_x) rmse=np.sqrt(mean_squared_error(RandomForest_reg,val_y)) print(\u0026#34;RMSE for Random Forest:\u0026#34;,rmse) OUTPUT\nRMSE for Random Forest: 4163.747031944405 ADA BOOST REGRESSION\nAdaBoost Regression is an ensemble model that iteratively improves performance by focusing on the previously misclassified instances. It combines weak learners to create a strong learner, making it suitable for regression tasks. It adapts to the data and assigns higher weights to harder-to-predict instances.\nCODE\n# ADA BOOST REGRESSOR ADBBoost_Regression=AdaBoostRegressor(n_estimators=100,random_state=0) ADBBoost_Regression.fit(train_x,train_y) pred_adb=ADBBoost_Regression.predict(val_x) rmse=np.sqrt(mean_squared_error(pred_adb,val_y)) print(\u0026#34;RMSE for Adaboost Regressor:\u0026#34;,rmse) OUTPUT\nRMSE for Adaboost Regressor: 3595.007906514239 GRADIENT BOOST REGRESSION\nGradient Boosting Regression is another ensemble technique that combines weak learners (decision trees) in a sequential manner. It optimizes a loss function by fitting the subsequent models to the residual errors of the previous models. It is a powerful algorithm that achieves high accuracy by minimizing the loss iteratively.\nCODE\n# GRADIENT BOOSTING REGRESSOR GradientBoosting_Regression=GradientBoostingRegressor(n_estimators=100, learning_rate=1.0, random_state=0) GradientBoosting_Regression.fit(train_x,train_y) GradientBoostingRegressor(learning_rate=1.0, random_state=0) gbr_predicition=GradientBoosting_Regression.predict(val_x) rmse=np.sqrt(mean_squared_error(gbr_predicition,val_y)) print(\u0026#34;RMSE for Gradient Boosting Regressor:\u0026#34;,rmse) OUTPUT\nRMSE for Gradient Boosting Regressor: 2756.5231625627925 CODE\nRMSE for Gradient Boosting Regressor: 2756.5231625627925 from sklearn.metrics import r2_score r2 = r2_score(val_y, gbr_predicition) print(\u0026#34;R2 Score for Gradient Boosting Regressor:\u0026#34;, r2) OUTPUT\nR2 Score for Gradient Boosting Regressor: 0.6975895276400425 Feature Importance is a technique used to determine the relevance or contribution of each feature in the prediction task. It helps identify the columns that are most useful in predicting the target variable. Techniques like permutation importance, Gini importance, or feature importance scores provided by ensemble models like Random Forest or XGBoost library.\nCODE\n# Plot the feature importance features = x.columns importances = GradientBoosting_Regression.feature_importances_ indices = np.argsort(importances) plt.figure(figsize=(10, 6)) plt.title(\u0026#39;Feature Importances\u0026#39;, fontsize=16) plt.barh(range(len(indices)), importances[indices], color=\u0026#39;#4287f5\u0026#39;, edgecolor=\u0026#39;black\u0026#39;) plt.yticks(range(len(indices)), [features[i] **for** i **in** indices], fontsize=10) plt.xlabel(\u0026#39;Relative Importance\u0026#39;, fontsize=12) plt.show() OUTPUT\nYou can explore other popular and well-known regression techniques to boost accuracy even more. Just note that these are CPU-intensive and training time can go from several minutes to several hours depending on the scale of the dataset.\nSupport Vector Regression (SVR): SVR is a powerful algorithm for regression tasks that can handle both linear and non-linear relationships. It uses support vectors to capture the important patterns in the data.\nNeural Networks: Deep learning models, such as Multilayer Perceptron (MLP) or Recurrent Neural Networks (RNN), can be effective for regression tasks when you have large amounts of data and complex relationships.\nRidge Regression: Ridge regression is a linear regression technique that incorporates regularization to prevent overfitting and handle multicollinearity. It can be useful when you have many features.\nTo improve the model\u0026rsquo;s performance, you can try the following techniques:\nFeature Engineering: Create new features or transform existing features to provide more meaningful information to the model. For example, you could combine related features, create interaction terms, or apply mathematical transformations to certain variables. Include More Relevant Features: Explore other features that may have a significant impact on the target variable. Consider adding additional features based on domain knowledge or further analysis of the data. Remove Irrelevant Features: Identify and remove features that do not contribute much to the prediction task. These features may have low correlation with the target variable or exhibit multicollinearity with other features. Polynomial Regression: Consider using polynomial regression to capture non-linear relationships between the features and the target variable. This can be achieved by creating polynomial features or using polynomial regression algorithms. Regularization Techniques: Apply regularization techniques like Ridge Regression or Lasso Regression to prevent overfitting and improve the model\u0026rsquo;s generalization ability. Regularization helps in reducing the impact of irrelevant or noisy features. Ensemble Methods: Explore ensemble methods such as Random Forests or Gradient Boosting. These techniques combine multiple models to make more accurate predictions and can handle complex relationships between features and the target variable. Hyperparameter Tuning: Optimize the hyperparameters of your chosen algorithm using techniques like grid search or random search. This involves systematically trying different combinations of hyperparameter values to find the best configuration for your model. Cross-Validation: Use cross-validation techniques to better estimate the model\u0026rsquo;s performance and reduce overfitting. This helps ensure that the model\u0026rsquo;s performance is not dependent on a specific train-test split. Collect More Data: If possible, collect more data to increase the diversity and quantity of samples available for training. More data can often improve the model\u0026rsquo;s accuracy and generalization. Making the Actual Predictions CODE\n# save the model to disk import pickle filename = \u0026#39;finalized_model.sav\u0026#39; pickle.dump(GradientBoosting_Regression, open(filename, \u0026#39;wb\u0026#39;)) # load the model from disk with open(\u0026#39;finalized_model.sav\u0026#39;, \u0026#39;rb\u0026#39;) as file: ``ML_MODEL = pickle.load(file) print(ML_MODEL) OUTPUT\nGradientBoostingRegressor(learning_rate=1.0, random_state=0) CODE\nXGBoost_Regression.fit(x, y) predict_final = XGBoost_Regression.predict(test_x) # make a predictions dataframe predictions = pd.DataFrame() predictions[\u0026#39;Purchase\u0026#39;] = predict_final predictions.to_csv(\u0026#39;sales_prediction.csv\u0026#39;, index=False) OUTPUT\nPurchase 12624.37 13786.86 3508.918 The sales prediction CSV has the above format. To examine the projected output for each user, copy and paste this column into the original train.csv and test.csv files. The rows are in the same order as they were in the original files.\nConclusion This exercise explored the analysis of customer purchasing habits and predicting their spending on products. By understanding customer behavior and preferences, businesses can offer personalized offers and improve their customer targeting strategies.\nLet\u0026rsquo;s recap the sales analysis and prediction:\nUnderstanding customer purchasing habits and analyzing customer behavior is essential for businesses to personalize their offerings and enhance customer satisfaction. Through data preprocessing and exploratory data analysis, you gained valuable insights into the dataset, uncovering patterns and relationships.\nAddressing outliers and visualizing the data through various techniques provided further understanding of the purchasing patterns and correlations between variables. Label encoding and feature selection helped prepare the data for model building by selecting relevant features that contribute to predicting customer spending.\nImplementing regression models such as Linear Regression, XGBoost Regression, RandomForest Regression, ADA Boost Regression, and Gradient Boost Regression allowed you to leverage customer characteristics and product categories to predict spending accurately.\nEvaluating the model\u0026rsquo;s performance using metrics like R2 score, mean square error (MSE), and root mean square error (RMSE) revealed the accuracy and effectiveness of the models. The Gradient Boost Regression model achieved an R2 score of approximately 0.70, indicating that around 70% of the variation in customer spending was explained by the model.\nIn conclusion, by analyzing customer purchasing habits and building predictive models, you gained valuable insights for tailored marketing strategies and business decision-making. Continuous refinement and improvement of the models, along with techniques like feature engineering, hyperparameter tuning, ensemble methods, cross-validation, and handling imbalanced data, can further enhance the accuracy and performance of the models. These insights and models contribute to maximizing customer satisfaction, optimizing business profitability, and driving success in customer purchasing analysis.\n","permalink":"https://atharvashah.netlify.app/posts/tech/sales-data-analysis/","summary":"Introduction ABC Private Limited, a retail company, aims to gain valuable insights into their customers\u0026rsquo; purchasing habits. By analyzing the provided summary of high-volume product purchase history, which includes customer demographics and product details, ABC can uncover patterns and trends in customer spending across different product categories.\nWe will explore the analysis step-by-step using the test.csv and train.csv files. Through a combination of theoretical explanations and practical demonstrations, we will delve into data preprocessing, exploratory data analysis, feature engineering, and model building.","title":"Sales Data Analysis with Python"},{"content":"Prepare to embark on an ethereal journey through the cosmos as 오미일곱 [Omilgop] unveils their mesmerizing opus, \u0026ldquo;Foghorn in the Dawn.\u0026rdquo; From the very first glance at the album cover, one is immediately ensnared by the aesthetic prowess it exudes, with its resplendent purple hues painting a skyscape that tantalizes the senses. And oh, dear listener, fear not, for the music within matches the allure of this visual masterpiece. It beckons you into a realm of serenity, calmness, and nostalgic introspection, reminiscent of the galaxies themselves tenderly embracing your very being.\nThe overarching atmosphere of this album, as if borne on gentle zephyrs from a distant island, envelops you in a slowcore ambiance that resonates with celestial grace. While there may be occasional deviations from this downtempo allure, there remains an ineffable essence that lingers throughout, an enigma that eludes definition yet captivates the soul. One finds themselves transported, as if by some sorcery, to a scenic British isle, basking in the idyllic pastoral beauty, with satellites and moonbeams casting their celestial radiance overhead. Truly, it is an enchantment that defies verbal articulation but undoubtedly leaves an indelible mark upon the listener\u0026rsquo;s spirit.\nThe composition of the songs within \u0026ldquo;Foghorn in the Dawn\u0026rdquo; showcases an unorthodox structure, ingeniously crafted to find its dwelling within the deepest recesses of your musical psyche. With muted lyrics, veiled beneath a drony static noise, the album boldly challenges conventional expectations, beckoning the listener to unravel its mysteries through immersive sonic exploration. Recurring beats gracefully intertwine, their tempos deftly shifting, and curiously, the passage of time never taints their allure with mundanity. The profound influence of Duster is evident, though 오미일곱 [Omilgop] masterfully forges their own distinct path, expertly blending inspiration with innovation. It is a testament to their artistry that such familiarity can be seamlessly integrated into a sonic tapestry that is unmistakably their own.\n\u0026ldquo;Foghorn in the Dawn\u0026rdquo; stands as an unparalleled companion for moments of respite and introspection, or even as the soundtrack to your very own cinematic escapades. Its gentle tunes possess an intrinsic power to ease the weariness of a toiling day, offering solace and a haven for weary souls to seek solace. Softspoken vocals intertwine with thrashing progressions, creating an exquisite juxtaposition that defies the boundaries of convention. This harmonious union resonates with an inexplicable magnetism, drawing you ever closer to the heart and soul of this remarkable work of art.\nAmong the myriad treasures that adorn this auditory voyage, two particular gems shimmer with a radiance that is simply irresistible. \u0026ldquo;Torch Tail\u0026rdquo; casts a luminous glow upon the listener\u0026rsquo;s path, leading them through an ethereal maze of shimmering soundscapes, while \u0026ldquo;Slippery Surface\u0026rdquo; embraces you with its hypnotic rhythms, compelling you to surrender to its seductive allure. These tracks exemplify the captivating allure that permeates every fiber of \u0026ldquo;Foghorn in the Dawn,\u0026rdquo; leaving an indelible impression on the sonic canvas of your consciousness.\nIn closing, 오미일곱 [Omilgop] has crafted a masterpiece that transcends the boundaries of genre, delivering an auditory experience that is as captivating as it is bewitching. \u0026ldquo;Foghorn in the Dawn\u0026rdquo; possesses an otherworldly quality, an ineffable charm that transports the listener to realms unknown. With its evocative beauty, unorthodox composition, and captivating allure, this album ignites a fervent desire within my heart that this gifted artist will ascend to the pinnacle of recognition they so richly deserve.\nRating - 8/10\n","permalink":"https://atharvashah.netlify.app/posts/personal/music-review/foghorn-in-dawn/","summary":"Prepare to embark on an ethereal journey through the cosmos as 오미일곱 [Omilgop] unveils their mesmerizing opus, \u0026ldquo;Foghorn in the Dawn.\u0026rdquo; From the very first glance at the album cover, one is immediately ensnared by the aesthetic prowess it exudes, with its resplendent purple hues painting a skyscape that tantalizes the senses. And oh, dear listener, fear not, for the music within matches the allure of this visual masterpiece. It beckons you into a realm of serenity, calmness, and nostalgic introspection, reminiscent of the galaxies themselves tenderly embracing your very being.","title":"Album Review: Foghorn in the Dawn by 오미일곱 [Omilgop]"},{"content":"I\u0026rsquo;m thrilled to be reviewing the album \u0026ldquo;Demon Days\u0026rdquo; by Gorillaz, a group that has really put themselves on the map with their unique blend of various genres. This album is truly a soul food and a trip down memory lane. Let\u0026rsquo;s dig in, shall we?\nStarting with the hits that have become internet classics, we have the pulsating \u0026ldquo;Feel Good Inc.\u0026rdquo; that has become a fan-favorite and an anthem for the virtual generation. The infectious beat, catchy hook, and the poetic lyrics are a masterclass in itself. The track \u0026ldquo;O Green World\u0026rdquo; is a musical kaleidoscope of sounds, bringing together various genres that truly leave you feeling green with envy. Then we have \u0026ldquo;Don\u0026rsquo;t Get Lost in Heaven\u0026rdquo; and \u0026ldquo;Dirty Harry,\u0026rdquo; two tracks that ooze with social preaching and are a plea for natural sustenance and conservation, something that is the need of the hour.\nThis album truly stands out as a solid offering, with each listen just getting better and better. The lyrics are a standout, and even in places where they might be repetitive, the music is more than enough to complement it. The entire album is dreamy, grounded, and wise, a testament to the group\u0026rsquo;s evolution and growth as musicians. It is truly impressive to see the diverse range of songs on this album, with no two tracks sounding alike. The music composition and structure of the lyrics are subversive and keep you on your toes, never letting you settle into a rhythm.\nI can\u0026rsquo;t help but admire the group\u0026rsquo;s ability to tackle important issues and weave them into their music. From the societal discourse to the environmental plea, the album truly shines in its social commentary. It\u0026rsquo;s not often that you see musicians using their platform to spread awareness, and Gorillaz does it with such ease and grace.\nAs for my favorite tracks, I have to say that \u0026ldquo;Demon Days,\u0026rdquo; the titular track, is one that truly stands out. It\u0026rsquo;s a hauntingly beautiful song that leaves you with a sense of longing and melancholy. \u0026ldquo;Don\u0026rsquo;t Get Lost in Heaven\u0026rdquo; is another standout track that showcases the group\u0026rsquo;s ability to blend genres seamlessly and is by far the most memorable track IMO. \u0026ldquo;DARE\u0026rdquo; is a track that just makes you want to get up and dance, and \u0026ldquo;Feel Good Inc.\u0026rdquo; is a classic that has stood the test of time.\nIt\u0026rsquo;s a solid offering that has something for everyone, with tracks that cater to various moods and emotions. While it might not be everyone\u0026rsquo;s cup of tea, it\u0026rsquo;s definitely worth a listen.\nIn conclusion, \u0026ldquo;Demon Days\u0026rdquo; is a testament to Gorillaz\u0026rsquo;s musical prowess, showcasing their ability to blend various genres and tackle important issues. It\u0026rsquo;s an album that feeds your soul and leaves you feeling satisfied, with tracks that will stay with you long after you\u0026rsquo;ve hit the stop button. It\u0026rsquo;s a must-listen for anyone who appreciates good music and wants to take a trip down memory lane.\nRating: 7/10\n","permalink":"https://atharvashah.netlify.app/posts/personal/music-review/demon-days/","summary":"I\u0026rsquo;m thrilled to be reviewing the album \u0026ldquo;Demon Days\u0026rdquo; by Gorillaz, a group that has really put themselves on the map with their unique blend of various genres. This album is truly a soul food and a trip down memory lane. Let\u0026rsquo;s dig in, shall we?\nStarting with the hits that have become internet classics, we have the pulsating \u0026ldquo;Feel Good Inc.\u0026rdquo; that has become a fan-favorite and an anthem for the virtual generation.","title":"Album Review: Demon Days by Gorillaz"},{"content":"As a connoisseur of the avant-garde music scene, I was thrilled to dive headfirst into My Bloody Valentine\u0026rsquo;s iconic album, \u0026ldquo;Loveless.\u0026rdquo; And let me tell you, this album is a wild ride, bursting with the iconic and distinguishing shoegazy sound that enraptured me from my very first listen.\nIt\u0026rsquo;s no secret that \u0026ldquo;Loveless\u0026rdquo; is a masterclass in shoegaze music, with its harsh and distorted rhythms and tunes that feel so close to you, you\u0026rsquo;ll swear you can reach out and touch them. And after multiple listens, I found myself completely entranced by the otherworldly sound that My Bloody Valentine has crafted on this album.\nNow, let\u0026rsquo;s talk about my favorite tracks on this mind-bending album. \u0026ldquo;Come in Alone\u0026rdquo; is a dreamy track that transports you to another dimension with its hypnotic beats and swirling melodies. \u0026ldquo;Only Shallow\u0026rdquo; is a sonic assault on the senses, with its pounding drums and guitar riffs that hit you like a ton of bricks. And \u0026ldquo;Sometimes\u0026rdquo; is a hauntingly beautiful track that showcases the band\u0026rsquo;s softer side with its ethereal vocals and atmospheric instrumentation.\nBut as with any album, there are a few critiques to be made. Some of the tracks on \u0026ldquo;Loveless\u0026rdquo; do tend to blend together, making it difficult to distinguish between them. And while the sound and production quality are top-notch, the album can feel a bit overwhelming at times, leaving you feeling like you\u0026rsquo;ve been caught in a musical whirlwind.\nDespite these minor criticisms, this record is an absolute must-listen for fans of the shoegaze genre and anyone who wants to experience the pinnacle of avant-garde music. My Bloody Valentine has truly outdone themselves with this album, creating a sonic landscape that is both mesmerizing and surreal.\nRating: 8/10\n","permalink":"https://atharvashah.netlify.app/posts/personal/music-review/loveless-mbv/","summary":"As a connoisseur of the avant-garde music scene, I was thrilled to dive headfirst into My Bloody Valentine\u0026rsquo;s iconic album, \u0026ldquo;Loveless.\u0026rdquo; And let me tell you, this album is a wild ride, bursting with the iconic and distinguishing shoegazy sound that enraptured me from my very first listen.\nIt\u0026rsquo;s no secret that \u0026ldquo;Loveless\u0026rdquo; is a masterclass in shoegaze music, with its harsh and distorted rhythms and tunes that feel so close to you, you\u0026rsquo;ll swear you can reach out and touch them.","title":"Album Review: Loveless by My Bloody Valentine"},{"content":"Gorillaz\u0026rsquo;s \u0026ldquo;Plastic Beach\u0026rdquo; album is a magnificent work of art that takes the listener on a surreal journey through a digital island filled with both beauty and decay. This is a place where the vibrant colors of the natural world blend with the metallic tones of machinery, and the music echoes that duality with its unique fusion of hip-hop, pop, and psychedelic sounds.\nAs the third studio album from the animated band, \u0026ldquo;Plastic Beach\u0026rdquo; stands out as a bold and ambitious piece of work that has clearly been meticulously crafted with an acute attention to detail. Every song on the album is packed with a variety of musical influences and sonic textures that range from the upbeat dance anthems to the introspective, melancholic ballads. The experience is nothing short of stunning, with the band\u0026rsquo;s signature blend of thought-provoking lyrics and catchy melodies that leave you tapping your feet long after the music has ended.\nOne of the most remarkable features of this album is the wide array of guest appearances. Gorillaz have recruited a veritable who\u0026rsquo;s who of the music world to join them on this project, and the result is an incredibly rich and diverse collection of songs. From the soaring vocals of Lou Reed on \u0026ldquo;Some Kind of Nature\u0026rdquo; to the infectious hooks of Snoop Dogg on \u0026ldquo;Welcome to the World of the Plastic Beach,\u0026rdquo; every track is a standout in its own right.\nBut the real star of the show here is the album\u0026rsquo;s underlying environmental message. Gorillaz use the digital island setting as a metaphor for the state of our planet, weaving themes of climate change, pollution, and the destruction of the natural world into their music. This is an album that challenges its listeners to think about the impact of their actions and to take responsibility for the health of our planet.\nOf course, the music itself is nothing short of exceptional. The beats are groovy and infectious, the melodies are catchy and memorable, and the lyrics are insightful and thought-provoking. Songs like \u0026ldquo;To Binge\u0026rdquo; and \u0026ldquo;On A Melancholy Hill\u0026rdquo; showcase the band\u0026rsquo;s ability to craft emotionally resonant ballads that tug at the heartstrings, while tracks like \u0026ldquo;Broken\u0026rdquo; and \u0026ldquo;Doncamatic\u0026rdquo; demonstrate their prowess in creating upbeat, danceable tunes that get the feet moving.\nEven the instrumental tracks are impressive in their own right. \u0026ldquo;Pirate\u0026rsquo;s Progress\u0026rdquo; is a masterful piece of music that showcases the band\u0026rsquo;s instrumental prowess, and the soaring strings of \u0026ldquo;Empire Ants\u0026rdquo; are nothing short of breathtaking.\nAll of these elements come together to create an album that is truly greater than the sum of its parts. \u0026ldquo;Plastic Beach\u0026rdquo; is a sonic masterpiece that demands repeated listens, with its intricate layering of sounds and intricate compositions. The album is also visually stunning, with its accompanying artwork and music videos showcasing the band\u0026rsquo;s unique and captivating visual aesthetic.\nIf there is one critique to be made of the album, it is perhaps that its length could be trimmed down slightly. At times, the sheer breadth and depth of the music can feel a little overwhelming, and some listeners may find themselves wishing for a more streamlined experience. But for those willing to dive deep into the digital world of \u0026ldquo;Plastic Beach,\u0026rdquo; the rewards are truly endless.\nIn conclusion, \u0026ldquo;Plastic Beach\u0026rdquo; is a remarkable album that solidifies Gorillaz\u0026rsquo;s place as one of the most innovative and creative bands in the world. With its eclectic mix of musical styles, thought-provoking lyrics, and stunning visuals, this album is an essential addition to any music lover\u0026rsquo;s collection.\nRating: 7/10\n","permalink":"https://atharvashah.netlify.app/posts/personal/music-review/plastic-beach/","summary":"Gorillaz\u0026rsquo;s \u0026ldquo;Plastic Beach\u0026rdquo; album is a magnificent work of art that takes the listener on a surreal journey through a digital island filled with both beauty and decay. This is a place where the vibrant colors of the natural world blend with the metallic tones of machinery, and the music echoes that duality with its unique fusion of hip-hop, pop, and psychedelic sounds.\nAs the third studio album from the animated band, \u0026ldquo;Plastic Beach\u0026rdquo; stands out as a bold and ambitious piece of work that has clearly been meticulously crafted with an acute attention to detail.","title":"Album Review: Plastic Beach by Gorillaz"},{"content":"Stratosphere, the 1998 slowcore classic by Duster, is a sonic force to be reckoned with. From the minimalist album cover to the dreamy soundscapes, this album evokes a sense of tranquility and longing that is both nostalgic and futuristic. The songs are slow and atmospheric, each one feeling like a journey through space and time, with recurring beats and tempo changes that keep things interesting.\nThe album\u0026rsquo;s structure is unorthodox and unconventional, with songs flowing into each other seamlessly, creating a hypnotic effect that is both meditative and transportive. The lyrics, which are few and far between, are shrouded in a drony static noise that adds to the ethereal quality of the music. The muted vocals blend in perfectly with the lush instrumentation, creating a haunting, otherworldly atmosphere that is hard to resist.\nDuster\u0026rsquo;s Stratosphere is a true masterpiece of the slowcore genre, with each song exuding a calm and serene ambiance that is both soothing and introspective. The music feels like a cosmic hug, enveloping the listener in a warm and comforting embrace. It\u0026rsquo;s hard not to get lost in the dreamy soundscapes and the nostalgic mood of the album.\nThe album is a testament to the power of minimalism, with its stripped-down instrumentation and sparse lyrics creating a sense of space and openness that is rare in modern music. The songs are simple yet complex, with layers of sound that reveal themselves upon repeated listens. The album\u0026rsquo;s beauty lies in its simplicity, with each note and chord serving a purpose in the greater scheme of things.\nThe standout tracks on the album include \u0026ldquo;Constellations,\u0026rdquo; a slow and introspective track that evokes a sense of longing and yearning; \u0026ldquo;Gold Dust,\u0026rdquo; a hypnotic and repetitive song that builds slowly, like a wave crashing on the shore; and \u0026ldquo;Inside Out,\u0026rdquo; a catchy and upbeat track that showcases Duster\u0026rsquo;s ability to craft poppy melodies within a slowcore framework. I\u0026rsquo;ve replayed these songs countless times, and they never fail to put a smile on my face.\nOverall, Duster\u0026rsquo;s Stratosphere is a must-listen for fans of slowcore and ambient music. It\u0026rsquo;s a mesmerizing and transportive experience that will leave you feeling relaxed and contemplative. This album is perfect for those moments when you need to escape the chaos of the world and retreat into your own personal space. It\u0026rsquo;s a timeless classic that deserves to be heard by anyone who loves music that is both beautiful and contemplative.\nRating: 8/10\n","permalink":"https://atharvashah.netlify.app/posts/personal/music-review/stratosphere/","summary":"Stratosphere, the 1998 slowcore classic by Duster, is a sonic force to be reckoned with. From the minimalist album cover to the dreamy soundscapes, this album evokes a sense of tranquility and longing that is both nostalgic and futuristic. The songs are slow and atmospheric, each one feeling like a journey through space and time, with recurring beats and tempo changes that keep things interesting.\nThe album\u0026rsquo;s structure is unorthodox and unconventional, with songs flowing into each other seamlessly, creating a hypnotic effect that is both meditative and transportive.","title":"Album Review: Stratosphere by Duster"},{"content":"Boost Your Interview Success with our Exclusive Digital Product Series We are thrilled to announce the launch of our brand new series of digital products on Gumroad, designed to help you excel in your interviews and land your dream job! Our products are carefully crafted to provide you with the necessary tools and resources to master key concepts, enhance your problem-solving skills, and confidently tackle coding interviews.\nIntroducing the First Set of Resources We are excited to release the first few resources that are now available for purchase at an incredibly affordable rate:\n⭐ Visit the Gumroad Page! ⭐\nMaster FAANG Interviews: 25+ Frequently Asked Array Problems This comprehensive guide is packed with 25+ frequently asked array problems that often appear in interviews conducted by top tech companies like FAANG. Each problem is accompanied by detailed solutions and comprehensive explanations, empowering you to grasp the underlying concepts and sharpen your problem-solving skills. With this resource, you\u0026rsquo;ll be fully prepared to tackle any array-related question that comes your way!\n💼 Get your copy today 🏆\nPython Solutions for Efficient Problem-Solving In today\u0026rsquo;s tech landscape, Python has become a go-to language for many developers. Our Python solutions resource provides you with a wide range of problem-solving techniques specifically tailored to Python. Whether you\u0026rsquo;re a beginner looking to familiarize yourself with Python\u0026rsquo;s syntax or an experienced programmer aiming to optimize your code, this resource is your ultimate companion for efficient problem-solving.\nAccess to a Convenient Code Editor for Hands-On Practice We understand the importance of hands-on practice in honing your coding skills. That\u0026rsquo;s why we\u0026rsquo;re including access to a convenient code editor as part of our product series. With this tool, you can write and run code directly from your browser, allowing you to practice coding problems and experiment with different approaches effortlessly.\nDetailed Explanations for Conceptual Understanding Our products go beyond providing solutions by offering in-depth explanations for each problem and concept covered. We believe that understanding the underlying principles is crucial for your long-term growth as a developer. With our detailed explanations, you\u0026rsquo;ll gain a solid grasp of key concepts, enabling you to approach interviews with confidence and clarity.\nBoost Your Coding Skills and Nail Interviews Our ultimate goal is to boost your coding skills and help you excel in interviews. By incorporating our resources into your preparation routine, you\u0026rsquo;ll be equipped with the knowledge and techniques needed to stand out from the competition. With our interview preparation resources, you\u0026rsquo;ll be one step closer to landing your dream job.\nStay Tuned for More This is just the beginning! We have exciting plans to expand our product series and provide you with an even broader range of resources in the near future. We are committed to continuously updating our offerings to ensure that you have the most relevant and effective materials to succeed in your career aspirations.\nVisit our Gumroad profile today and grab these valuable resources at a special introductory price. Boost your interview success and unlock the opportunities you\u0026rsquo;ve been dreaming of!\n","permalink":"https://atharvashah.netlify.app/posts/tech/gumroad-dsa-announcement/","summary":"Boost Your Interview Success with our Exclusive Digital Product Series We are thrilled to announce the launch of our brand new series of digital products on Gumroad, designed to help you excel in your interviews and land your dream job! Our products are carefully crafted to provide you with the necessary tools and resources to master key concepts, enhance your problem-solving skills, and confidently tackle coding interviews.\nIntroducing the First Set of Resources We are excited to release the first few resources that are now available for purchase at an incredibly affordable rate:","title":"Digital Product Series Launch!"},{"content":"TEST Another Test Test 3 Test 4 Emerging from the literary depths, following the consuming voyage through \u0026ldquo;Harassment Architecture,\u0026rdquo; I eagerly embarked upon the haunting terrain of \u0026ldquo;Gothic Violence.\u0026rdquo; In this eagerly awaited sequel, my anticipation was richly rewarded, for within its pages lie potent and evocative fragments of prose that reverberate with profound resonance. While the quantity may be lesser than its predecessor, the impact remains undiminished, as the narrative unfurls with a potent force, relentlessly piercing the reader\u0026rsquo;s consciousness.\nWith trepidation and fascination entwined, I present to you a curated selection of these profound quotations—a glimpse into the darkened recesses of the human psyche that resound with a disquieting elegance. Brace yourself as you navigate the realms of shadow and light, surrendering to the intoxicating allure of this literary endeavor that defies categorization. \u0026ldquo;Gothic Violence\u0026rdquo; may present a different narrative, but fear not, for its incisive incantations penetrate just as deep, leaving an indelible mark upon the reader\u0026rsquo;s soul.\nAt the break of six in the morning I\u0026rsquo;m awoken by a woman wrapped in black wool and living ivy. Her eyes are violent and her breath is heavy with wine. She lays across the length of a velvet corner lounge and cackles towards the foot of my bed. With everything plugged-in and running, we use pre-loaded peer-to-peer programs to pull every ten zombie computers back to one primary computer. That makes one hundred and sixty primaries, all of which control the ten lowers they are assigned to. The day begins again for a second time. On each device, we fire up a number of programs. First, a batch program that mimics the activity of your typical internet user while running an ad program. This program clicks every single ad it sees, at rapid speed in this case, and each click costs the company money with zero return on investment. Not a single new customer, just a bill paid for space used and what\u0026rsquo;s counted as engagement. This alone, across the sixteen hundred devices, will cause an estimated dent of two million dollars per day, spanning over all involved businesses. After this, we start another program that automates the creation of free storage accounts and then fills the maximum allowed space with documents tided in federally-observed keywords. Inside, the documents contain nothing but innocuous baking recipes. It\u0026rsquo;s capable of making and filling both accounts every thirty seconds. On top of this, the contents of each account are then sent to every email on a list of over three point four million \u0026ldquo;subscribers\u0026rdquo;, as pulled from public company registries. CEOs, lawyers, real estate agents, financiers, stock brokers, landlords, intellectuals, professors, branch managers, et cetera. The subject line of each is also padded with watchlist keywords but contain none of the actual contraband. Whether it\u0026rsquo;s opened or not, the sheer number of notifications handed out becomes a rattling experience. If, for some reason, the recipient chooses to open it, the contents trigger a shutdown sequence on each of the various operating systems - phones, computers, and tablets. Because this is done through a text code error, it falls into the \u0026ldquo;technically legal\u0026rdquo; category. The devices will, on average, take five to ten minutes to fully reboot. When they do, there\u0026rsquo;s a fifty percent chance that it reboots to the same screen it last showed, causing another shutdown sequence. Again, not illegal. This can brick the device until it must be physically reset by customer service. Much like the aforementioned, another program accomplishes the same task in terms of making and filling storage accounts, but this time loads them with cryptographic, information-dense photos at the highest possible resolution. These too are titled with more trigger words and each is entirely different, generated by a photoshop action with shifting parameters. Also loaded into these is the near-exact scan of a hundred dollar bill most often used by top counterfeiters, though the portrait is replaced with someone smiling in corpse paint. These too are emailed en-masse to the subscriber list. These two create-and-load programs, operating in their most efficient form, launch nearly two million new accounts per day. Because it\u0026rsquo;s all automated, nobody has to be in the facility for any of this to work. This is true efficiency. Behind all of the main programs is one that correctly automates the work required for those numerous pay-to-survey gift card sites. In theory, it could make up to ten thousand dollars an hour in various payouts. Most of the proceeds go immediately back into the machine. For us, this means more computers, faster internet, increased security. A faster killswitch as well. The remainder is used to pump carefully selected enemy companies and trade options across various platforms. Massive buy orders for shares in devious organizations like meat replacement companies, biotech research facilities, and metal miners. Another program, aptly named Patel One, uses a scattering of convincing but pre-recorded customer service calls from large companies in automated mass-calls made free though shell call-forwarding accounts. \u0026ldquo;Hello, who am I speaking with? Hi, yes. I\u0026rsquo;m with so-and-so service provider calling to inform you that we\u0026rsquo;ve charged your card on file with a minor hundred dollar fee for services rendered. You should see it on your next statement.\u0026rdquo; \u0026lsquo;When the call-taker inevitably lashes out or questions the charges, the recording waits a moment then replies with something along the lines of: \u0026lsquo;We understand your frustration but this is not the correct department for disputed charges. I will forward you to such.\u0026quot; The line rings for a tone or two then connects to the actual customer service line of the company in question. Whatever happens from here forward is simply bonus points. The program ensures that the call-taker is a customer of said company by way of various public registries. Other unrelated sub-programs and projects include one that has our devices mass-download underplayed free games to dethrone actual top picks. One that simply overloads smaller websites with innocent mass-visitors to crash it, one that uses the previously mentioned storage accounts to comment single sentence anti-government sentiments on every trending video, one that uses every attached computer to vote said comments to the top of the page, one that brute-forces millions of generic follow-bot accounts and unfollows everyone it once followed, one that uses light funds to put inflammatory location filters in major cities, one that asks random companies for free samples, one that fills top multiplayer mobile games with bots to intentionally lose matches, one that changes dates by a single day in Wikipedia articles, one that directs thousands of physical spam letters to a special-ed camp near Monmouth University, one that ships pallets of free LISPS boxes to UPS, one that schedules appointments at primary care offices but never shows up, one that leaks paid internet whore content across thousands of forums and websites, one that finds algorithms on social sites and works in direct opposition to them, one that mines cryptocurrencies with free energy, one that scatters credible threats in slant anagrams. The list goes on. All of these are surmounted by Mother Magda, our master stroke program. Using all of the above programs and the millions of data points they collect, we are able to predict huge leaps and dives in specific corners of the stock market. A thousand profit in options placed on SPY here, nine thousand profit on a low weed start-up there. It\u0026rsquo;s so close to insider trading that it\u0026rsquo;s not. Either way, the money is laundered squeaky clean through your typical routes. Whatever money we can\u0026rsquo;t get through the pipeline is cleaned by way of an in-house, undisclosed Chinese wholesale arbitrage system. The profits made here are almost exclusively used to keep a crooked and pricey legal team on retainer. We are talking about my lawyer\u0026rsquo;s lawyer and his entire staff. All extra cash, and there tends to be plenty, is pocketed by everyone involved for personal use. Men have to live, have to eat well, have to stay armed. The entire facility is disguised as a generic heating and cooling repair shop. Everything inside is attached to a killswitch for the unlikely moment it gets raided by police. All you have to do is call the suicide hotline on the big green phone. It comes to mind that every human may be capable, extremely capable, and that\u0026rsquo;s why it hurts to see the many fall short of even average. Capable of what though? Of altering the course of human history for the better? Dramatically said, but yes. Even if the majority of common men were to maintain livestock and know a fraction of something like carpentry, would that not raise the value of commonality? Maybe common would become less of an insult and more of a compliment. Perhaps it would create a world where people always said things like \u0026ldquo;Thank God for the common man.\u0026rdquo; And by that, those common men became necessary for good. Instead, we see that the common man of today is largely expendable, and many times by no fault of his own. He\u0026rsquo;s masterfully tricked to sit comfortably below the average. He was replaced by the gargoylic claw of the abstract global economy. Cheaper and more nameless labor, a life focused around work, billion dollar smart technology that requires constant human maintenance. If only we had elected an Amish president prior to the Industrial Revolution, I think we may have made it out of the trench. The world is bountiful and full of solutions that grow on trees or spring up from the dirt. The blueprint was always in our hands. Meeting people who refuse this or ignore the qualities of nature ends in worry. One day I will meet a woman who looks to me as the world does, so constantly impressive in its beauty. A regenerative source of good in every aspect. A woman dancing like the moon on her own lake. All that defies natural order stands on weak fooling. Either kick the legs out or apply additional pressure. Never in the history of time has an artificial system rivaled the original blueprint, and none ever will. It feels good to cut firewood and cook your dinner with it. It feels good to run around a field with no roads or power lines in sight. It feels good to tend to goats, and cows, and hens. It feels good to lay in the sun for hours. It feels good to eat when you\u0026rsquo;re hungry, drink when you\u0026rsquo;re thirsty, sleep when you\u0026rsquo;re tired. It feels good to know that your work provides for yourself and your family, not for a faceless organization. These are practices we cannot afford to abandon. Traditional life is heralded not because it is fashionable, but because it works. It is a framework from which all creative and heroic endeavors might spring. Science and medicine are simpler and more intuitive than we are taught by the powers that be. They overcomplicate and mythologize both so that they are seen as out-of-reach and therefore remain profitable, protected sectors. No sane population would ever trust the purported labcoats of our time. All of their \u0026ldquo;knowledge\u0026rdquo; is a scattering of words blindly memorized from a couple books over the course of ten years in school. These are not serious people, but midwits squirting food coloring into beakers or telling people that a cough is fixed with antibiotics. Medical and scientific authority is earned by action and innovation, not by looking at flash cards for a decade. We learn through experimentation, not by sitting through eternal lectures. Imagine that I\u0026rsquo;m a baby about eight months into development and for some reason I\u0026rsquo;ve gained the ability to hear and understand English. I was listening intently for months and somehow figure it out, you know? Anyways, I\u0026rsquo;m listening and my mom is talking to some doctor about the ways to go about a very late term abortion. It\u0026rsquo;s an entire production and eventually she and the doctor agree on a date to pull my plug. I have some time to prepare. I start filing all of my little fingernails into jagged razors. Teeth too, just in case. 1 get a little bored and start filing my toe nails with `cm. It\u0026rsquo;s a hard task, as everything is very tiny. The abortion day finally arrives. My baby heart is racing. I feel the chill those patient rooms always have. Three, two, one. Like some kind of machine gun I start prison-shivving the inside of my whore mother. I\u0026rsquo;m hitting anything I can reach, piercing holes like you wouldn\u0026rsquo;t believe. She\u0026rsquo;s screaming and the doctor has absolutely no idea what\u0026rsquo;s going on. I\u0026rsquo;m blinded by the light of the holes I\u0026rsquo;ve made. I\u0026rsquo;m hanging halfway out, grunting, kicking, and stabbing. Fluid going everywhere, sounds like someone is drowning me. The doctor tries to pin me but I cut his wrists and fingers up. \u0026ldquo;Draw thy tools. My naked weapon is out!\u0026rdquo; I shout as more lab coats file in. None respond, only stand in fear. \u0026ldquo;I said draw thy tools!\u0026rdquo; In real life, I wait for women outside the local abortion clinic and shoot them in the parking lot. If I know which car is theirs, I\u0026rsquo;ll save some trouble and cut their brake lines. PROCESSIONS OF THE LOST AVALON Almost all extended contact with the normal world now ends in some grand unveiling of how strange you and your choices are. It\u0026rsquo;s usually avoided when the contact is brief, like ringing up at a store, but anything beyond that may become an embarrassing curtain-pulling ceremony. What do you mean you drink your milk raw? What do you mean you didn\u0026rsquo;t go to college? What do you mean you haven\u0026rsquo;t had a job in seven years and you were able to buy land in the middle of nowhere? What do you mean you have eight wives and stare at the sun? If you truly want to make it, you have to go fully into the void. You need to accept that you may not come out the other side. You have to walk so far and so confidently that not a measure could be half. It\u0026rsquo;s not unlike jumping ship in the middle of the night. You\u0026rsquo;re diving with empty hands into a dark ocean where you can either sink or swim. You have to make yourself so foreign to the normal world that you\u0026rsquo;d be a spectacle upon return. Have you heard of that man who was gone for years? He reappeared one day, at the grocery store, in deerskin armor and dried blood. That\u0026rsquo;s you. Your hair is long and sun-kissed, your eyes are jagged glass refractors, and you smell like a man who\u0026rsquo;s nearly died but never has. Carts and feet shuffle backwards as you enter. The intercom music hurts your ears. You howl at the burn of florescent lights and leave. It\u0026rsquo;s another seven years before anyone sees you again. The gap between you and the average man widens. You\u0026rsquo;ve only come to claim warbrides. If you are instilled with the hatred of wage labor, you and you alone must go so far into the wild that you could never possibly return. Rarely can anyone else do this for you. Maybe you\u0026rsquo;re lucky enough to get stolen by a pack of wolves. Unlikely though. The middle world sees every outcast as self-exiled. They like to think that every outcast is doing it on purpose, that he needs attention or otherwise. Never a consideration that he was born to be on the outside. Then, when the outcast climbs to the top through outside means, they throw rocks at his feet and shout insults. How dare a man exist outside the system and win. How dare he find different ways to meet better ends. This too is an exile. The cashier race and their boundaries of what\u0026rsquo;s acceptable are a pitfall for many. No ancient hero, or his soldiers, listened to what the cubicle kind had to say. The pencil pushers and paper shufflers of this world are doomed to remain as such, pressing buttons and passing ill judgement. Pay no mind until it\u0026rsquo;s time to kill or enslave them. Don\u0026rsquo;t get me wrong, it is entirely possible because love is real, but you should examine it thoroughly. There are criteria that reveal women who are suited for marriage. It\u0026rsquo;s hard to go wrong with a young homeschooled virgin, raised by two parents. No debt, no tattoos, waiting for marriage to leave home. No strange hair dye, no strange clothes, no racy photos or online presence. Reject the bullshit opinions you\u0026rsquo;ll hear when you say you prefer these things. Reject the excuses you\u0026rsquo;ll hear from women about why they have those tattoos, why they had sex before marriage, why they thought it was a good idea to move out and go to college. Accept no substitute for the real thing: a woman of actual value. Avoid whores like the plague, a phrase I will use even though viruses are not contagious, but the self-generated cleansing solution to a weak body. If this all sounds hateful to you, you\u0026rsquo;re due for a natural awakening. ","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-gothic-violence-by-mike-ma/","summary":"TEST Another Test Test 3 Test 4 Emerging from the literary depths, following the consuming voyage through \u0026ldquo;Harassment Architecture,\u0026rdquo; I eagerly embarked upon the haunting terrain of \u0026ldquo;Gothic Violence.\u0026rdquo; In this eagerly awaited sequel, my anticipation was richly rewarded, for within its pages lie potent and evocative fragments of prose that reverberate with profound resonance. While the quantity may be lesser than its predecessor, the impact remains undiminished, as the narrative unfurls with a potent force, relentlessly piercing the reader\u0026rsquo;s consciousness.","title":"Best Quotes from Gothic Violence by Mika Ma"},{"content":"Immersed within the profound literary labyrinth that is Mike Ma\u0026rsquo;s oeuvre, I stumbled upon an enigmatic tapestry of words that left me astounded, pondering why this luminary artist had not yet ascended to the pinnacles of recognition. Within the tapestry of his creations, one finds a captivating amalgamation of satire, philosophy, and humor that defies conventional categorization. Yet, it is not through the predictable lens of conventional narratives that Ma\u0026rsquo;s genius shines. Rather, it is through his mastery of the absurd and the surreal that he casts an unyielding, dissonant reflection upon our world—a reflection that emanates from the depths of a mind steeped in delusions of grandeur, a godlike complex, and a masochistic disposition.\nWith each turn of the page, the contours of reality warp and morph into an unpredictable, chaotic tapestry, the brushstrokes of Ma\u0026rsquo;s prose rendering a stark and uncompromising portrayal of the human condition. Moments of utter astonishment seized hold of me, my jaw dropping repeatedly as I navigated the pages of this extraordinary opus. Laughter, unbridled and relentless, erupted from my being as I encountered passages and inner monologues that embraced the absurdity of existence with an audacious gusto. In this singular literary experience, I offer a promise—there exists no other tome that bears resemblance to this visionary work.\nNow, dear reader, let us embark on a perilous journey into the intricate labyrinth of the protagonist\u0026rsquo;s psyche—a realm where he emerges as a deranged maestro, orchestrating a cult-like following of devotees with twisted, even offensive, allure. Brace yourself as we delve into the vast expanse of this intellectual maelstrom, where each quote serves as a provocative lightning rod, striking at the very heart of societal norms, challenging us to question the boundaries of acceptability and bask in the unsettling allure of the unconventional.\nHello sophia from new york city. i see you as you open at random to specifically 41 HARASSMENT ARCHITECTURE this page, by total coincidence. it\u0026rsquo;s not coincidence, in reality. i wanted you here, in this obscure manhattan book shop that you kill time in until your friend says she\u0026rsquo;s outside. tonight, when you walk home, ill follow you and catch the main door to your apartment complex before it closes (don\u0026rsquo;t want to ask a stranger for the code). ill watch you undress only to stare disgusted at yourself in the $10 walmart mirror your parents had shipped to you, at your request. you couldn\u0026rsquo;t afford that? really? ill watch you order takeout time and time again because you are far too \u0026ldquo;busy\u0026rdquo; to learn how to cook your own meals. sophia, ill watch you cry over shitty netflix shows. ill watch you molest yourself to porn you found thru extremely SPECIFIC search terms. ill watch you spend more of your parents money on things in poor taste. you were stuck for a while, debating whether or not you could pull off fake designer or not. i saw that. you went with the real one, surprisingly. not really surprising, it\u0026rsquo;s your parents money. ill watch you attempt a new workout routine, which lasts all of exactly 5 minutes. ill watch you lose a little more ambition. ill watch you read listicles on buzzfeed, the ones you share with your friends who don\u0026rsquo;t actually click them when you send it. you keep doing this for months and come summer they will lose all respect for you. especially elizabeth -she\u0026rsquo;s not a total normie like you and she\u0026rsquo;s well aware that buzzfeed is for empty fuckups like you, sophia. ill watch you for all this time and not once lust for you, SOPHIA. SOPHIA YOU DISGUST ME AND YOUR PARENTS ALIKE. SOPHIA, STOP GETTING DRUNK I\u0026rsquo;m back to normal, I\u0026rsquo;d say. I have a routine and a respectable sleep schedule. That or I\u0026rsquo;m so deep inside a sleep-deprived daydream that I\u0026rsquo;ve entered believable stages of a new dream world. YOU KNOW THOSE PEOPLE WHO SPEND ALL DAY SHIT-TALKING RELIGIOUS FAITH ON REDDIT? JESUS DIED FOR THEIR SINS, EVEN, BUT NOT YOURS. HOW PATHETIC, SOPHIA. I want to see the ugly burned out forever because it\u0026rsquo;s an affront, plain and simple. Man was once the sum of his choices, maybe the books he read, or the people he spoke with. Today, man is the sum of that all in addition to the videos he\u0026rsquo;s seen, the number of people who like him online, the amount of government-sanctioned foodpoison he\u0026rsquo;s consumed, and so much more. You are now, from the start, the death you will become ¬unless of course you defer to our holy originators. Life\u0026rsquo;s most violent pain is the result of nature denied. It is the careful blueprint contractors often ignore, nature. They think they know more than it has to offer. They think they know how to operate outside its ways. But it will forever and always win. Submission to nature is one of the only submissions you should welcome in life. Physical fitness is inherently correct. It\u0026rsquo;s always in style, timeless and waiting. All the things required of someone to be truly in shape are all things scumbags not only despise, but despise out of inability. Inner strength, outer strength, courage, self-control, a desire to sweat and bleed for results. Your standard worm-brain faggot would rather stay fat and unsightly than submit to the fascist 53 HARASSMENT ARCHITECTURE creation known as the gym. Strength is imposing and bold, strength is fascism — I guess maybe they are right about that. So when you see disgusting pigs like AAAAAA or AAAAAAAA just remember, they\u0026rsquo;ve shown you their hand of cards. Don\u0026rsquo;t be surprised when they beg you to meet the enemy half way. Act accordingly against the yeastern kind, the weak, the unwilling. Make them submit. They must submit. \u0026ldquo;When you are with women, you are alone. When you are with homosexuals, you are alone. When you are with men far outside your socioeconomic class, you are alone. You will, for the majority of your life, be alone,\u0026rdquo; a friend tells me. Women never get home gyms because then nobody would give them the attention they want. The rare few who do build home gyms will proceed to upload squat videos to Instagram. If you can imagine it, they will always squat in the tightest pants they own — never a slightly loose pair of sweatpants, never a burka, Poor people all tend to smell the same. Cheap spray-on scents (take a shower and wear aluminum-free deodorant), shitty laundry detergent (you don\u0026rsquo;t need it), cat piss diluted by repeated dryer sheet exposure (don\u0026rsquo;t own a cat). The poor always smell like those strange flea market stress remedies ¬the ones in the little glass bottles. The poor always smell like public transportation and in turn public transportation begins to smell poor. The poor smell poor, and the second they get a little bit of extra cash, they buy expensive things that still look or smell poor. And they can\u0026rsquo;t shop for their lives, either. They will pay $5.99 for a bag of ten microwave-ready chicken nuggets rather than the $6.99 for a fair selection of fresh chicken cutlets, or just get double that amount at a butcher for $3.99. It\u0026rsquo;s not about the ease of cooking, or the inability to do so, they just genuinely believe this is the smartest option. That\u0026rsquo;s the worst part. Not only do these meals provide lesser, more expensive portions, but they are loaded with horrible preservatives and strange, experimental USDA chemicals. Seed oil ridden body killers, shelf stable astronaut concoctions, 61 HARASSMENT ARCHITECTURE things that would look fitting in an actual witch\u0026rsquo;s cauldron. Those Tyson chicken bites could last centuries or a voyage to Neptune and back, meaning they are probably not safe for human consumption. In the grand scheme of things, we are all victims. Soy, anti-nutrients, plaque, and viscous chemicals run ample in our blood. It manipulates the very code that makes us, us. We are being weakened, made docile for whoever yells the orders next. Nothing is truly safe to eat anymore unless you exile yourself to a forest and physically choose and kill what enters your stomach — or know someone who does that When it comes to modern food, there is only really bad and sort of bad. The grandmasters don\u0026rsquo;t want us dead, they want us weak and subservient, obviously. This is nothing new, but finding out exactly what does it, well that is new. Fluoride in the water, hormones in the milk, gender dysmorphia in the air. I see them in the same way I see a bored video game player. You have someone who\u0026rsquo;s played Grand Theft Auto so much that he\u0026rsquo;s exhausted all the normal ways routes of continuing. He\u0026rsquo;s beat the whole game, but something keeps him there (maybe he feels there\u0026rsquo;s nothing better), and so he finds a new approach. He breaks the boundaries and walls, glitches through the floors and ceilings, grants himself immunity and infinite resources, etc. The normal playstyle is now foreign to him, he\u0026rsquo;s circled back around and sees everything as exploitable. Asians see real life this way, or at least this is what I believe. I sat on YouTube for hours once, enamored by videos of this Japanese guy making razor-sharp knives from a bunch of unexpected materials. A knife made out of cardboard, a knife made out of glass, a knife made out of ice, a knife made out of noodles It killed others, what makes you think it won\u0026rsquo;t kill us? It won\u0026rsquo;t just do that, it will ravage us. It will rape us senseless, to the point where everything we respect and care for is degraded in such horrible ways that we never see the same again. The future we are headed towards is one full of disgust beyond human comprehension. There are endless ways it can strike and that it will. But it\u0026rsquo;s okay because we deserve it.This is what we get for building robots to suck you off in a bar . This is what we get for turning our eight-year-old sons into women. This is what we get for turning everything into something you can fuck. This is what we get for 73 HARASSMENT ARCHITECTURE everything and saying okay. This is what we get for sexualizing so many people that it becomes hard to sleeping with remember the last. This is what we get for too much meaningless play, not enough meaningful work. This is what we get for making everything readily available, to everyone, anywhere. Realistically, there is nothing left to live for. In our effort to ease the burdens on humanity we\u0026rsquo;ve made the creation and raising of worthwhile human life an absolute gamble. Modem technology allows the weak to not just survive, but flourish. I say flourish in their sense of the word, not mine. Nihilism breathes down your neck as you realize that spending time with your beloved daughter didn\u0026rsquo;t stop her from sleeping with her every coworker at that electronic music startup in Brooklyn. It didn\u0026rsquo;t stop her from getting blackout drunk in a wine lounge and tearing her off clothes, fully \u0026amp; happily exposed to the entire establishment. Most often, the worst of this new pain is within ourselves. We are born into this mess, and by that alone, we are impure. This is the kind of world baptism can\u0026rsquo;t fix. This is the kind of slime that good upbringing can\u0026rsquo;t wash off. This is the kind of pain medication can\u0026rsquo;t stop. It all requires fire and only fire. It\u0026rsquo;s in and on every single one of us. Born into sin, through sin, with sin, and only collecting more as the days linger on. Today\u0026rsquo;s kind, 74 MIKE MA they collect sin like bugs on the windshield of a barreling eighteen-wheeler. I feel the urge to destroy, to hurt, to rape, to hunt, to abuse, to ambush, and be ambushed so I can react with violence. To all things, a desire to respond with violence. It\u0026rsquo;s growing and growing and growing. Growing more when I reject more. Thanks to damaged women provided by effortless dating apps, I can act on that urge with absolute consent. But every time I do it gets worse. Every time I do it I realize how much more I am capable of, how much darker this all could get. Soon after it does, it gets much darker, and as expected there\u0026rsquo;s someone ready to take it in with pleasure. This is where disgust t-bones ambition. The collision is bloody, no doubt a result of burnt out streetlights. The scraping metal cries harmonious. It sounds like Heaven weeping. Just when you think it\u0026rsquo;s all plateaued, the stakes are raised yet again. We humans are capable of impossible feats. Discovering fire, birthing kingdoms, landing on the moon, and yes, unlimited variations of sexuality depravity. It\u0026rsquo;ll end when we do. Regardless of this minor detail, I am on the way to return a book to a friend. Her name is also a minor detail. I\u0026rsquo;m tired of committing females to memory, especially ugly ones. There is no \u0026lsquo;friendship\u0026rsquo; between men and women, only the times where you 75 HARASSMENT ARCHITECTURE think about having sex and the times when you are. You could argue that an ugly girl could be a man\u0026rsquo;s friend. You would be half correct because, by law, she\u0026rsquo;s potentially a man• That\u0026rsquo;s realpolitik.(Editor\u0026rsquo;s note: Nobody fucking cares. Get back to the other stuff.) I click on the newly deceased\u0026rsquo;s profile and go through his endless amounts of pictures, memories, whatever. He looks like shit, probably smelled like shit, and died in the corner of high school party he probably wasn\u0026rsquo;t invited to, shooting up dope he probably didn\u0026rsquo;t pay for. I say give me rights to the funeral arrangements so we can bury this dead faggot in a ditch full of syringes and slut vomit like he deserves. In place of a flower-draped portrait, we can just have pictures of the heroin tracks that ran down his arms. Hopefully the mortician can brush those out.His family will pay their respects to their degenerate faggot son who drugged up so hard that police found him in a puddle of his own shit and piss. Respects rightfully paid. I\u0026rsquo;d say throw his ugly corpse in the ocean, but that\u0026rsquo;d be marine pollution on par with the Exxon Valdez. Fuck you, you dead dope-dealing faggot scum. I hope everything Dante wrote about the depths of Hell is real, and more so, I hope you\u0026rsquo;re making his experience look like a trip to the Brooklyn Zoo. Your girlfriend looks stupid when she cries over you, and if I see her when I\u0026rsquo;m back home, I\u0026rsquo;ll cave her face in with the heel of my boot. I\u0026rsquo;ll get away with it too, and whenever it is they 80 MIKE MA post her Facebook commemoration, I\u0026rsquo;ll be waiting there at the keyboard, ready to say something hilarious about her too. I\u0026rsquo;ve been dragged to an Applebee\u0026rsquo;s through some impressive level of extortion or otherwise. Sitting in a booth, I take in that crisp Applebee\u0026rsquo;s air and understand what it\u0026rsquo;s like to be a piece of shit. Across from my table is a family that can\u0026rsquo;t seem to stop smiling. I should be appreciative of this, a wholesome family, braving the piss-storm with teeth out throughout, but I\u0026rsquo;m not. The reason I\u0026rsquo;m not is because of the father and his stupid decision to wear what he perceives as \u0026ldquo;nice dinner attire\u0026rdquo; to a fucking Applebee\u0026rsquo;s. A brown houndstooth sports coat over an Izod polo tucked into stonewashed Levi\u0026rsquo;s boot cut jeans, held up by a Docker\u0026rsquo;s belt and topped off with white New Balance\u0026rsquo;s. This is his Sunday best, on Wednesday. He dressed up to pay absurd prices for food that is nearly advertised as \u0026ldquo;Yes, we fucking microwave it, what are you going to say? Don\u0026rsquo;t microwave it? We already did.\u0026rdquo; It\u0026rsquo;s not only this but the fact that only two minutes down this very road is a family-owned restaurant with much cheaper food. Food that is cooked using real ovens and real stoves. But no, Jerry Russo from the local Honda dealership took his family to this disgusting, chemical-ridden death trap. Applebee\u0026rsquo;s translates to Auschwitz. This sick fuck has growing children to feed and he\u0026rsquo;s shoving microwaved chicken bites into their smiling mouths. They trusted him. Their mother trusted him. I trusted him. I can\u0026rsquo;t hear the waitress reply, too soft-spoken, but I imagine she asks him how he\u0026rsquo;d like his steak microwaved. Microwave the sides too, please. Microwave the check before you bring it out. I\u0026rsquo;ll make sure to leave a big tip if you promise to microwave it and charge fourteen ninety-nine for the burned remains. Double that, add an appetizer and we\u0026rsquo;ve got a commercial-worthy deal on our hands. Inhaling two large Red Bulls has put me into total maniac deathmode. I\u0026rsquo;d kick a hole through my own neck if I had insurance to cover it. I don\u0026rsquo;t have insurance. I don\u0026rsquo;t even know how or where you go to get it, without being dragged into debt of course. Maybe that\u0026rsquo;s student loans I\u0026rsquo;m thinking of. Credit scores are an assclown\u0026rsquo;s game, a faggot\u0026rsquo;s number. Something only a desk jockey jerk-off would concern himself with. WHEN YOU SLEEP, MY BLOODY VALENTINE Soaked in reverb, obscured by strange noise and poor vocal quality. \u0026ldquo;When I look at you, oh, I don\u0026rsquo;t know what\u0026rsquo;s for real\u0026hellip;\u0026rdquo; Not much compares to this single song. It has a certain magic. I don\u0026rsquo;t drink alcohol. I find that among other reasons, it is one of life\u0026rsquo;s ultimate cop-outs. Do you remember the part in Dante\u0026rsquo;s Inferno when he noted that towards the end of Hell, some men went down before they had even died? How their earthly bodies were hollowed out and replaced with a demon until said body\u0026rsquo;s true \u0026ldquo;death\u0026rdquo;? How their soul itself was relegated to the frozen lower ditches, unable to move for eternity? This is how I see alcohol, recreational or otherwise. Not to mention that beer is estrogenic, extremely high on the glycemic index, and 88 MIKE MA contains gluten. That, paired with the way it\u0026rsquo;s consumed throughout the entire course of the night, intermittently, is a nightmare for your blood sugar levels. To spike your blood sugar is to accept an early and ugly death. To do that while also being an embarrassing drunk is something else. Drinking, if it has to be done, should be celebrarory. Not for a promotion at your chain restaurant. Not because it\u0026rsquo;s the end of the work week. Not because you\u0026rsquo;re bored. Grow up. delivered intravenously in school libraries that resemble FEMA camps. BPA-bong death overdrive. Sexual depravity passing heart disease as the leading cause of death. Tesla Motor death camps. Public dubstep handjobs. Homeless concerts. Elon Musk selling 3D self-suck virtual reality zip downloads, sponsored by Sony, the newest Zuckerberg acquisition. Frozen insect dinner ads. Robots laughing you out of your coal mining job. Your fingernails taste more like food than food tastes like it used to. They really want you to start eating bugs. Suicide passing sexual depravity as the leading cause of death. Spotify cutting into your playlist with nuclear warnings. Nuclear warnings become the most played song. Songs don\u0026rsquo;t sound very different anymore. They want you to love eating bugs. Uber drivers double as deep state spies, reporting the locations of even the most lightly suspected cyber criminals. Israeli sleeper cells awaken to kill other Israeli sleeper cells. Saudi princes holding the majority share of America. Cointelpro run by ex-slave hoejabi immigrants. NASA enforcing the death penalty. Breath tax, violence 90 MIKE MA tax, piss tax. Video game streamers reading CIA headlines. Mixed race cereals and protein bars. Homeless senators and congresspeople. The future isn\u0026rsquo;t World Peace. The future is a spiteful coworker deepfaking videos of you masturbating on the clock. It\u0026rsquo;s the microchip in your arm \u0026ldquo;accidentally overheating\u0026rdquo; because you catcalled the airport trash robot. It\u0026rsquo;s your parents being buried in the cloud courtesy of GoogleTM. It\u0026rsquo;s your children asking why restaurant menus aren\u0026rsquo;t touch screen. It\u0026rsquo;s your grandparents asking why your children are such retards. It\u0026rsquo;s your grandchildren being diagnosed as gay in the womb. It\u0026rsquo;s your Juul not working because you put too many apps on it. It\u0026rsquo;s Jeff Bezos giving you Two-Day Free Shipping on a pile of wet dicks with which to go fuck yourself, forever and eternally. The future is gay cops on fire. \u0026ldquo;I wouldn\u0026rsquo;t have sex with her, no. She was pale, not in the attractive way. Timid, not in the charming way. And poorly dressed, not in the ironic way. Some girls dress like shit and it kinda works, like Mac Demarco\u0026rsquo;s girlfriend. But this girl though\u0026hellip; she looks like the type of girl who\u0026rsquo;s scared to kiss boys at the age of twenty-four.” You can never fully defeat a human spirit if it wants to keep going. If something truly wants then it will want forever. I feel this way and I know many others do too. The day I\u0026rsquo;m torn into a million pieces and buried spurs only new plans of attack. What\u0026rsquo;s left me will chase you down forever, and that scares people. I remember this monologue of mine and recite it whenever someone cuts me in line at those shitty ghetto Walmart\u0026rsquo;s. It\u0026rsquo;s okay that we are different because once you finally interlock perfectly with someone who understands things the same way you do, you\u0026rsquo;re capable of many things. We are constantly aware of the divide. There\u0026rsquo;s not a single moment that it doesn\u0026rsquo;t bury itself into how we view a person, even more so in women. We watch and wait, preying upon body language and subtle remarks. Truth in jest, awkward giggling, a couple attempts to move closer. We watch and wait and watch. The number of thoughts that take flight when a woman compliments you on something you\u0026rsquo;d just noticed about yourself. The way her perfume smells, half-hoping it\u0026rsquo;s the kind that emanates through sweat born of nervousness, because once you start dating for too long, it\u0026rsquo;ll likely retreat. It was fun while it lasted. It was more like a novel than fun actually, because we put a lot into it for the time we had. The new divide makes it horribly apparent that everything is over. She was thinking indie pop when you were thinking indie rock. She was thinking Thai when you were thinking Chinese. She was thinking about a future together when you were thinking about her ass in a sundress. Always just a fraction of a hair away, not much in the larger picture, but still not perfectly aligned. Maybe you don\u0026rsquo;t want 103 HARASSMENT ARCHITECTURE to perfectly align. Maybe you don\u0026rsquo;t want to be intertwined soulmates. Maybe you are a Disraeli of the soul. Maybe you wish to come home and fall into the lap of some semi-maternal figure. Maybe you want nothing, forever. DC is a fucking graveyard. DC is dry like the wombs of its women in politics. I don\u0026rsquo;t drink alcohol. I think it\u0026rsquo;s on par with owning a cable subscription, playing excessive video games, and smoking weed in terms of being a trampled-on doofus. Drinking rarely makes a person more interesting. Very few cases exist, Hunter S. Thompson being one of them. I don\u0026rsquo;t drink alcohol. Have I drank before? Yeah, here and there, usually to fit in. Never to excess. Always to maintain a social standing. Did I like it? Not at all. It\u0026rsquo;s disgusting, suppressive to the edge that I am constantly trying to sharpen. It also kills the liver. And the spirit of man. Alcohol is bad for you in almost every aspect imaginable. But if you\u0026rsquo;re like those other faggots who have to watch four hours of cable television every night, it\u0026rsquo;s probably just for you. Go belly up, loser. Conversation is an important thing. Soon it\u0026rsquo;ll be the most important thing. The days are coming when all we have are words to remember a time when Sweden was Sweden, when France was France, when Europe was actually Europe. We\u0026rsquo;re being robbed of everything to prove those claims. Monuments, culture, archives, human beings, they will all be quickly erased. But what we do have is our word. We have the ability to carry on, at the very least, a memory of the world before it was thrown into the furnaces. All we have left is conversation. Just pray nobody misremembers the words you choose. \u0026ldquo;I\u0026rsquo;m a man of work, I\u0026rsquo;ve got no time for vanity. The second I stop to think too deeply about my appearance is the second I lose focus on my builds. There\u0026rsquo;s nothing I hold in higher regard than putting work before oneself.” It\u0026rsquo;s one of those of \u0026lsquo;good feelings\u0026rsquo;, one that grows within you over time. This is one step towards combatting the usual resting heart rate of panic, that dependence on dopamine through internet numbers, that degree of separation Deleting social media leaves me with a feeling of disconnection to the outside world. It\u0026rsquo;s one of those of \u0026lsquo;good feelings\u0026rsquo;, one that grows within you over time. This is one step towards combatting the usual resting heart rate of panic, that dependence on dopamine through internet numbers, that degree of separation from mother nature. And a mother she truly is. I am the aesthete and the ethicist. I am the alpha and the omega. I am war and peace. I am ying and yang. I am calling girls fat on the internet. Sit down for a second and imagine the direction of the world below our feet. Do you feel it pointing more and more downward as time goes on? Do you feel the downward pointed Earth? Do you feel the fog reaching its highest tide? Do you feel the ground rumble like war has come, but look outside and see only chemically abused and tired death walkers?I feel it. And I feel it. And I see it. And I see it. Do you believe it? Do you believe it? It\u0026rsquo;s simple. Past a certain point, art has never gotten better. Literature has never gotten better. Culture has never gotten better. Government has never gotten better. Past a certain point, life stopped getting better. Oh, but you have an electronic phone watch. Oh, but you have a robot that answers questions on command. Oh, but you have applications to help you sleep with more strangers and applications to deliver your food. Oh, but we have things we didn\u0026rsquo;t before so the Earth must be pointed upwards after all. Over the next half-century you will see, even more clearly than now, how downwards the Earth truly points. You will see how everything in museums is everything you have seen for decades prior. You will see that everything to be used as source material is everything you have used before. You will see that new advice is 125 HARASSMENT ARCHITECTURE never made because the old advice knew best. The Earth tilts downwards until we all come sliding, crashing into the bow. As of late, I\u0026rsquo;ve been writing down things said by both myself and others around me. The criteria is simply this: it must be worth writing down. \u0026ldquo;I\u0026rsquo;m on a juice cleanse, you shitty faggot.\u0026rdquo; - Random girl, upon being offered an apple fritter. \u0026ldquo;I can\u0026rsquo;t stop jerking off dude. Seriously. It\u0026rsquo;s like every time I think I got it under control, there\u0026rsquo;s something that sets me off. Seriously dude, like it could be anything. Yesterday I was four days 126 MIKE MA clean and I saw some girl\u0026rsquo;s thighs in a YouTube thumbnail. Next thing I know I\u0026rsquo;m searching for chubby girl porn.\u0026rdquo; - College kid sitting with friend, waiting for his ride. \u0026ldquo;Can you check out this girl\u0026rsquo;s Insta page for me? She wants to meet up later and I think she might have a dick, but I\u0026rsquo;m not sure. You can\u0026rsquo;t even tell anymore, man.\u0026rdquo; - Two guys sharing a drink in a bar, mid-day. \u0026ldquo;How about a slut holocaust? No really, why not right? I\u0026rsquo;ll wait for an argument.\u0026rdquo; - Not myself, not recently. \u0026ldquo;I got raped at a Farmer\u0026rsquo;s Market once and haven\u0026rsquo;t been able to look at produce since.\u0026rdquo; - Girl, in line at a Food Lion. \u0026ldquo;The only thing standing between me and starting a fatty holocaust is the locked doors of every Pepsi Co. bottling warehouse. Seriously, who drinks Pepsi nowadays besidesstraight up fatasses? Nobody drinks Pepsi dude. Let\u0026rsquo;s just poison it and watch all the right people die off.\u0026rdquo; - Not myself; not ever. \u0026ldquo;The next person who asks me if I heard the new Drake single is getting their knees shot at long-distance with my Red Ryder.\u0026rdquo; - Middle School-aged teen, Bass Pro Shops. \u0026ldquo;I\u0026rsquo;m the king of Fortnite, bitch ass nigga. Oh let me see the homework, by the way. Need to copy that shit, baby.\u0026rdquo; \u0026ldquo;This would be like the first assignment you\u0026rsquo;ve done in weeks. Why start now?\u0026rdquo; 127 HARASSMENT ARCHITECTURE \u0026ldquo;Have you seen how much gaming streamers make, dude? Fuck you, I don\u0026rsquo;t need the homework actually. Bitch ass nigga.\u0026rdquo; - Two college students, school library. The one saying \u0026ldquo;nigga\u0026rdquo; is a scrawny hispanic kid in fake Supreme. \u0026ldquo;My DNA test says my family mostly came from the Irish Coast.\u0026rdquo; \u0026ldquo;You mean Ivory Coast?\u0026rdquo; \u0026ldquo;No Irish Coast, it had the Irish flag.\u0026rdquo; - Different people (girls), same library. \u0026ldquo;I feel like getting raped isn\u0026rsquo;t even that bad.\u0026rdquo; - Also that same library. \u0026ldquo;I didn\u0026rsquo;t go to work for a month. I didn\u0026rsquo;t leave my bed for eight days straight. I haven\u0026rsquo;t hung out with anyone — if I did, I\u0026rsquo;d have nothing to say. I didn\u0026rsquo;t feel angry or depressed. I didn\u0026rsquo;t feel anything at all.\u0026rdquo; - Modest Mouse, the band. \u0026ldquo;Okay, Crunchwrap Supreme meal and what to drink?\u0026rdquo; \u0026ldquo;Uhh, can I get, uhh\u0026hellip; Mountain Dew Banjo Blast.\u0026rdquo; \u0026ldquo;Baja Blast?\u0026rdquo; \u0026ldquo;Yeah, Banjo Blast please.\u0026rdquo; - Guy in front of me, Taco Bell drive-thru. 128 MIKE MA \u0026ldquo;The poor get poorer, and uglier too, and gayer, bitch. Keep eating those fuckin\u0026rsquo; asteroid nuggets because they look easy to cook. You and your kids are gonna be chemically gay in like two to three years max. Fucking n—\u0026rdquo; - Not myself, not at the black woman who cart-checked me in Harris Teeter. \u0026ldquo;Why\u0026rsquo;s his dick so tiny? It sucks because his body is so good too.\u0026rdquo; \u0026ldquo;Emily shut the fuck up, you virgin ass bitch. You have the vaginal depth of a field mouse. If anything, he\u0026rsquo;d probably leave you on crutches. Might just be a grower.\u0026rdquo; \u0026ldquo;You\u0026rsquo;re such a bitch when you drink.\u0026rdquo; - Some college girls, getting stealth-drunk at the museum, staring at David. \u0026ldquo;I had no idea the Halo book series was actually good. I don\u0026rsquo;t even care if anyone thinks I\u0026rsquo;m gay or autistic, shit rocks.\u0026rdquo; - Someone who tied his New Balances Sit down for a second and imagine the direction of the world below our feet. Do you feel it pointing more and more downward as time goes on? Do you feel the downward pointed Earth? Do you feel the fog reaching its highest tide? Do you feel the ground rumble like war has come, but look outside and see only chemically abused and tired death walkers?I feel it. And I feel it. And I see it. And I see it. Do you believe it? Do you believe it? It\u0026rsquo;s simple. Past a certain point, art has never gotten better. Literature has never gotten better. Culture has never gotten better. Government has never gotten better. Past a certain point, life stopped getting better. Oh, but you have an electronic phone watch. Oh, but you have a robot that answers questions on command. Oh, but you have applications to help you sleep with more strangers and applications to deliver your food. Oh, but we have things we didn\u0026rsquo;t before so the Earth must be pointed upwards after all. Over the next half-century you will see, even more clearly than now, how downwards the Earth truly points. You will see how everything in museums is everything you have seen for decades prior. You will see that everything to be used as source material is everything you have used before. You will see that new advice is never made because the old advice knew best. The Earth tilts downwards A- t the end of it all, in those darkest of day, smiles man atop the mountain debris. He can see the many stars, smell the coming wind, only now does he know that he\u0026rsquo;s free. I\u0026rsquo;m listening to Wagner\u0026rsquo;s Tannhäuser with the windows down, mostly because I want the people at this red light to think I\u0026rsquo;m a cultured guy. I feel like I am dead. Dead, roaming but not rotting, among this downward pointed Earth. I\u0026rsquo;m bound by zero consequence, terrified for everyone around me. I\u0026rsquo;m not worried for myself though, because I\u0026rsquo;m quickly accepting that whatever happens to me, however bad it may be, is supposed to happen. Admittedly, this is due to some light spiritual reading I\u0026rsquo;ve done as of late. Parts of the genre are wise, other parts are horseshit. I\u0026rsquo;ve only lightly sprinkled that new knowledge into my grander worldview. Do not worry, the whole story isn\u0026rsquo;t like this. I won\u0026rsquo;t continue to narrate completely standard days. It gets better, you son of a bitch. I hope at least a few of these words make you want a long walk. Or a cigarette outside. Maybe you\u0026rsquo;ll start a farm on mortgaged land. It\u0026rsquo;s hard to take someone seriously when they\u0026rsquo;ve become fanatical over something truly undeserving. You\u0026rsquo;re crying about a cable show? You still watch shows? You still have cable? How fucking dull. Pick something with more merit. Maybe get sickly attached to New Order or emotionally handcuff yourself to a death cult in the middle of Iowa. For bonus points, pick something from actual obscurity — and no, not Bauhaus. \u0026ldquo;Cum is God,\u0026rdquo; also known as \u0026ldquo;pay attention to me, I\u0026rsquo;m a different kind of slut\u0026rdquo;. She wouldn\u0026rsquo;t be bad looking if she wasn\u0026rsquo;t so bad looking. I have no interest in this 5'5 dead end and so I excuse myself again, this time outside. I can see my car down the road and it\u0026rsquo;s calling me to drive home. I do. It\u0026rsquo;s another day and I\u0026rsquo;m in New York City for work. This place is the type of shithole that would frustrate me into an early grave granted I couldn\u0026rsquo;t find the words to describe it. It\u0026rsquo;s our recollection of \u0026ldquo;back then,\u0026rdquo; and you couldn\u0026rsquo;t change it even if you tried. People do try, all the time. Bitter children of the true 90s always twitching to correct the vision, like schoolmarms or war veterans or something. They never win. Our vision, not theirs. Whether or not any of what! said is true is irrelevant, because it\u0026rsquo;s our vision, and so it becomes true. It\u0026rsquo;s our recollection of \u0026ldquo;back then,\u0026rdquo; and you couldn\u0026rsquo;t change it even if you tried. People do try, all the time. Bitter children of the true 90s always twitching to correct the vision, like schoolmarms or war veterans or something. They never win. Our vision, not theirs. We\u0026rsquo;ll push on, tying flannels around our waists, ripping holes into pairs of ill-fitting jeans. We\u0026rsquo;ll knock things down in the mall and listen to the new Smashing Pumpkins record in someone\u0026rsquo;s father\u0026rsquo;s car. Our parents will shoot us looks of disgust when we come home for dinner, smelling faintly of cigarettes and fast food. We\u0026rsquo;ll sleep like angels to the sound of leaves blowing down crimefree suburban streets. There\u0026rsquo;s nothing that can touch us; we live our lives like an old Disney Channel movie. Not even Columbine could happen here. We\u0026rsquo;ll make out in public parks, steal some candy bars, and run like someone actually cares. We\u0026rsquo;ll skate past the girls tanning on the beach. Our hair styled perfectly by saltwater and sun. Blonde and brown bangs in our eyes. Bodies chiseled from marble, a result of paddling out into head-high waves and pushing steel around after school. Sun children with sun skin from sun worship, skin dear from the same. It\u0026rsquo;s like this forever because those visions replay. Well graduate high school, go to university, and marry super pretty girls. We\u0026rsquo;ll try drugs, and experience those Lifetime movie hardships. Some of us won\u0026rsquo;t stop trying drugs and die in gas stations like pathetic deadbeats. Those people simply dissolve from the vision. The rest of us die of old age, some with grandchildren who ask us about what the 1990s were like. Some with grandchildren that know we\u0026rsquo;re excited to tell them. I\u0026rsquo;m not disinterested by her, I\u0026rsquo;m just recovering from a rich daydream of another life. The more she goes on, the deeper I fall into my own liquid images, more so than usual. This fantasy is fermented; it digests slowly and without any strain on the system. You look forward to it throughout not just days, but an entire lifetime. It\u0026rsquo;s a dessert, dense in both texture and nutrition. A lot of my recent daydreams have felt like this. Anything can make you feel full, but few things can fill you without regret. There\u0026rsquo;s something sinister about New York City that I\u0026rsquo;ve never felt in any other place on Earth. It goes beyond the resting heart rate of panic, and beyond the general disgust. New York City reeks of more than just hot homeless garbage piss — it reeks of guilt and fear and so much else. It\u0026rsquo;s a city that dove too deeply, too quickly into the world of technology and the idea of a melting pot, then realized how empty that future felt. Occasionally, they\u0026rsquo;ll try to claw their way back to former days, but can only poorly mimic them. Burger shacks that rely solely on iPads as cash registers, that cook their food using intentionally-dated stoves and tools. Manic NYU students in ugly H\u0026amp;M sweatpants, staring into their twenty-dollar minimalist salads, sitting uncomfortably at rustic wood tables (artificially banged up by crafty Chinatown merchants). Every new dent is another twenty-five dollars onto the asking price. Not a single smoothie shop CEO bothers to argue. They love the look and even write pridefully about it in their Moleskine day journals. What fucking faggots. A city of queers buying anything that looks like it came from a tree because they haven\u0026rsquo;t actually seen one in a lifetime. Did you know the trees in Central Park are made of ultradense recycled plastics? That\u0026rsquo;s why they don\u0026rsquo;t break, even when some sand creature sets off explosives on passing joggers. Romanticism isn\u0026rsquo;t buying flowers for your girlfriend. Romanticism is buying flowers for your girlfriends. Romanticism is your wife admitting to you the rapist roleplay she\u0026rsquo;s been so eager to try. Romanticism is a gunshot victim dabbing his fingers into the wound, painting stripes on his face before the medics arrive. Romanticism is hunting down local Grindr users and beating them with a phonebook or a sock full of coins. Romanticism is voluntary celibacy. Romanticism is baseball bat hate crimes. Romanticism is total debauchery or total anti-debauchery. Romanticism is sex, and sex is just a fight where you come at the end. Romanticism could be none of these things. It varies. Maybe it\u0026rsquo;s just whatever you feel it is. I realize I\u0026rsquo;m probably mouthing these words as they cross my mind because thewoman next to me is moving inch-by-inch into her husband\u0026rsquo;s lap. What\u0026rsquo;s in a name? That which we call a woman by any other name would still cause problems. No, I\u0026rsquo;m not Thoreau; I haven\u0026rsquo;t exiled myself to a cut of barren woods and written down my findings. I\u0026rsquo;m just some son of a bitch sitting outside his home beside a beautiful piece of property. I don\u0026rsquo;t care if I\u0026rsquo;m pretentious. Everything is pretentious when everyone is a nihilist. Everything is pretentious on the downwards pointed Earth. Everyone is all rotting and talk. There\u0026rsquo;s no purity left to us here because the apathetic tailspinners have consolidated life into one big joke. Sincerity is dead or laughed at. That\u0026rsquo;s why it\u0026rsquo;s so peaceful inside the liquid dream, the thoughts that move inside me when I do. There are no twenty-something liberal arts majors to tell me that what I\u0026rsquo;m writing about comes off as hollow. They\u0026rsquo;re hollow. Their personality is the legal intellectual property of a television series. They are ugly and expendable. They are burdens hiding in clearance rack mall clothes. They are the rape of the world. \u0026ldquo;YOU WILL NEVER GET TO SEE FIFTY FOOT STATUES OF WARLORDS AND EMPERORS OR FEEL THE TRIUMPH OF CONQUEST. YOU WILL NEVER SEE MAN LIVE AS THE ANCIENTS DREAMED HE WOULD, ALL BECAUSE A COUPLE OF RATS TUNNELED THEIR WAY INTO POSITIONS OF POWER. THEY SAID THE PAST IS WRONG. THEY SAID INVADERS SHOULD HAVE YOUR LAND. THEY SAID IT\u0026rsquo;S OKAY TO EMBRACE APATHY. YOU ARE A VICTIM OF THE TECHNOCRACY, OF AN ABUSE NAMED \u0026lsquo;CIVILITY\u0026rsquo;. YOU HAVE BEEN ROBBED OF A FULFILLING, EARNEST LIFE.\u0026rdquo; It\u0026rsquo;s not so bad to be alone. We put too much energy into always seeking the presence of another. Especially men seeking women. I\u0026rsquo;d say it\u0026rsquo;s unhealthy to spend too much time with other people. It\u0026rsquo;d be trite to say I wish for a day where the world is empty and I\u0026rsquo;m the only one alive; it\u0026rsquo;d also be untrue. Our lifetimes are akin to that feeling you get when you\u0026rsquo;re having too much fun. Too much, too good, for too long. You sense that something very bad is just around the corner. You know this because it has happened before, maybe not to you, but to relatives or someone you read about. The entire presence of industrialized man has been a violent preface to his looming and inescapable consequence. The final consequence. It\u0026rsquo;s not so bad to be alone. We put too much energy into always seeking the presence of another. Especially men seeking women. I\u0026rsquo;d say it\u0026rsquo;s unhealthy to spend too much time with other people. It\u0026rsquo;d be trite to say I wish for a day where the world is empty and I\u0026rsquo;m the only one alive; it\u0026rsquo;d also be untrue. We are the rapidly increasing rate of change over minimal time. We are the exponential climb towards ultradeath. It goes and it goes and it goes. \u0026ldquo;There are women you can marry and there are women youcan\u0026rsquo;t. The ones you can\u0026rsquo;t are called `thots\u0026rsquo; and they\u0026rsquo;ve earned thistitle after emerging as veterans from the battlefield of male attentionand casual sex.\u0026rdquo; I explain to a friend.\u0026ldquo;Thots are a commodity. They are there when you need tounload pent up testosterone and, generally, they\u0026rsquo;ll never interjectthemselves into your actual life, your actual relationships, orwhatever else. This doesn\u0026rsquo;t mean we shouldn\u0026rsquo;t have a death squadthat rounds them up for execution, it just means we should use themfor what they\u0026rsquo;re trained for until they are gone.\u0026rdquo; Oh, I\u0026rsquo;m sure you\u0026rsquo;ve heard it so many times, but the truth of the matter is this: Not only is everyone starring in that movie inside their heads, but the movies and other inspirations behind it all continues to get worse. Maybe there was a time when the people based their personal mental movie on things of better taste and, in effect, this made them slightly better to be around. But now, at this late or otherwise stage in the lowerworld, the characters have all become so lame. It ranges from bad to worse, from the people who parrot Disney Channel conversation fragments to the faggots firing off Reddit lingo and dork-film mannerisms, from worse to horrible. Frat-flick mimickers, reality television nightmare sluts, action film philosophers, the drooling masses who dream of their sci-fi superhero of the galaxy moment. I understand their need for synthetic \u0026lsquo;motivation\u0026rsquo;, that tiny artificial something to help them mold a sort of identity, but what we see now is just plain bad. I wish I could say that people were playing out bastardized versions of their favorite ultra-wild superhero movie characters, but we don\u0026rsquo;t even get that. The people you walk by every day are computer generated images. They are digitized fill-ins, computer bodies delivering lines to fill the empty space. Where there\u0026rsquo;s a gap, there may bea guy in superhero fan gear. Where there\u0026rsquo;s some room, you could find a sassy black college girl and her gay Latino friend with green hair. Maybe you yourself are generated by computers to fill the void. Yeah, you are in that movie in your head, but it fucking sucks and it\u0026rsquo;ll never end. We\u0026rsquo;re all here. The casting director blew it. There is no walking away from the explosion scene. There is no tear MIKE MA jerking redemption scene. There is no \u0026lsquo;all was lost but now it\u0026rsquo;s found\u0026rsquo; scene. There isn\u0026rsquo;t even an end — the director probably left. People say \u0026ldquo;damned if you do, damned if you don\u0026rsquo;t\u0026rdquo; about a fair share of things. It makes a kind of larger sense here. You\u0026rsquo;ll always have nails driven through your hands and feet. You\u0026rsquo;ll always wear the crown of thorns. You\u0026rsquo;ll always get made fun of by someone on the internet. There\u0026rsquo;s a striking amount of people who don\u0026rsquo;t understand the science behind thick girls. Fat is fat, we know this. But thick falls within very fine lines. It\u0026rsquo;s a product of pure nature, a glimpse of Eden, the sacrosanct in symphony. When all is in order, the connoisseur could weep. Did you know the CIA put anime into black communities nationwide? Undoubtedly their largest psychological operation to date, followed by the introduction of crack-cocaine and World Star Hip Hop. All of these factors combined leaves us with what we see today. Fatherless black males, dressed in Naruto costumes, stealing and destroying things in various chain stores/fast food locations. Yes, this is a form of acceleration. God sits above and mourns the construction of yet another strip mall. It\u0026rsquo;s true, I\u0026rsquo;ve seen and felt him do so. God to me sometimes feels like a close and personal friend, and he looks constantly disappointed, even in me. He mourns the destruction of his lush and hungry forests for GameStop number seven thousand and Chinese buffet number whatever. Those responsible for decisions like these will pay dearly for this level of sin; you\u0026rsquo;d have to be a fucking idiot to think you escape free of punishment. All this \u0026ldquo;honest work\u0026rdquo; kills beauty in man too. It forces men into poor diet, poor choices, poor paths outside the workplace. Everything in life for them, whether they chose so or not, must revolve around their \u0026ldquo;honest work\u0026rdquo;. No time to research, pick, and cook a proper meal so I have chips and soda again. No time to work out, to worship the sun in peace, to study so I watch television and jerk off in-between beers again. No time to even so much as consider another way of life so I hammer nails into useless thing for useless people in useless place again. You are being scammed, robbed Quit your job and rob the world blind, legally if you can manage it. Honest work here today, in this lower kind of world, is a spook. Complete illusion. You aren\u0026rsquo;t a better person for making money in a \u0026ldquo;respectable\u0026rdquo; fashion — you are handicapped and lying to yourself. Honest work is a confused and pointless shot in the foot. You\u0026rsquo;ll limp home every day for the rest of your life. Quit your job and sit in the sun every day. Quit your job and run away into the woods forever. Quit your job and shoot a politician. Escape by speedboat off the coast of Miami, hide in the tropics somewhere. Do it again there, speedboat even farther south. Kill your miser boss and his miser boss and escape using one of their private jets. Go to the marina at night with twenty-five friends and steal every yacht you can. Sail as a fleet, down into the southern world, and conquer small towns. Kill yourself if it doesn\u0026rsquo;t work out. Fly to East Europe and die in war. Or just keep making department stores until you rot away, maybe have a couple beers and play a little golf in-between. As of 2015, rates of depression have gone up by almost 20% globally. That\u0026rsquo;s 322 million people affected worldwide; lots of damaged souls. These are of course only the cases we know about, meaning that there are millions or however many more who haven\u0026rsquo;t been diagnosed or, in the spirit of their depression, haven\u0026rsquo;t told anyone their troubles. What makes us hurt? What dampens the complex human soul? I say we do. I wholeheartedly believe that the most damaging blow to the human race is disappearing beauty. Our drill sergeants were right — shit rolls downhill, and fast. Bad mood equals bad outcomes, bad outcomes equals more bad moods, and it tailspins like this forever. Are we not here? Are we not experiencing this due to the ugly? Rising levels of obesity. People mangled by the many toxins in food and water. People devoured by absurdity, by the downward pointed Earth. Hollowed out by prescription medications, birth control, alcohol, synthetic drugs. Clothes getting uglier and more ill fitting. Art is rarely inspiring, always more abstract, always harder to look at. Forget arguing about whether we\u0026rsquo;ve lost sight of what\u0026rsquo;s right and wrong — we\u0026rsquo;ve lost sight of what\u0026rsquo;s beautiful and what\u0026rsquo;s not. Anti-beauty, the ugly, the unaesthetic is a mental and visual depressant, eye and mind poison. Modern life is surviving government-funded psychological warfare. When you are down, you are submissive. You have to wake up every day, walk six blocks through miserable Manhattan, talk to miserable people in your miserable cubicles, in-between making miserable spreadsheets in miserable clothes, and every night sleep with miserable thoughts. Should you expect anything but a miserable existence? What if everything looked better? Everything looked better to inspire more creations of beauty, which in turn inspired everyone else to treat beautiful things better. What if everything the eyes may cross was captivating. Large and powerful testaments to the man you should be, the culture you should create, the land you must protect. Surrounding you are constant reminders that you carry the blood of emperors, of struggle and conquest, of former beauty and the squashing of former ugly. You are made of what kills the unappealing. Sometimes you feel it when you witness a bloody car accident, or stumble across the scene of a shooting. Sometimes you feel it when you\u0026rsquo;re simply having a good day. It comes via endless routes, but fleetingly so. Most can never hold onto it. The feeling of exiting normalcy, the feeling of purpose, will almost always slip away. Not for me though.Now, imagine how I feel after having declared war on the world itself. Even more so, winning the war. Am I though? Do you share this swelling inside my chest? Maybe you do, but only for a moment. Mine? Not even a stir. From this day on, it never leaves these callused hands. I am tired and broken but never ready to let the chaos centrifuge run home. I see demons in the artificial. I see demons in alcohol. I see demons in fluorescent lights. I see demons in doctors, scientists, dealers of data. I see demons in agriculture. I see demons in cars. I see demons in activism. I see demons in most women.I see God in raw meat. I see God in rare meat. I see God when I bathe in the sun. I see God in low blood sugar. I see God in pine trees. I see God in most all trees. I see God in a few good men. I see God when I breathe the right way. I see God when I stand up straight. I see God during fasts. I saw God and he told me to burn it all down. I saw a boy and his father on the sidewalk today. They walked like they had somewhere to be. Then the sky crashed down — all of it, everywhere. It was loud and covered all you could see. That boy — he squealed, he giggled, he danced. To the ears did his smile extend. He wasn\u0026rsquo;t happy \u0026lsquo;cause his school would be canceled today, he was thrilled because the world may just end. ","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-harassment-architechture-by-mike-ma/","summary":"Immersed within the profound literary labyrinth that is Mike Ma\u0026rsquo;s oeuvre, I stumbled upon an enigmatic tapestry of words that left me astounded, pondering why this luminary artist had not yet ascended to the pinnacles of recognition. Within the tapestry of his creations, one finds a captivating amalgamation of satire, philosophy, and humor that defies conventional categorization. Yet, it is not through the predictable lens of conventional narratives that Ma\u0026rsquo;s genius shines.","title":"Best Quotes from Harassment Architechture by Mika Ma"},{"content":"Amidst the whirlwind of academic and professional commitments, I managed to carve out precious moments to immerse myself in the magic of cinema. The month of May brought forth an array of highly anticipated films, and while my movie-watching endeavors were limited, the experiences I had were truly captivating. This is partly to blame on TV shows like Better Call Saul which I recently finished and Succession which I just picked up and have been obsessively binge watching. But hey, this blog is about movies! Brace yourselves as I take you on a thrilling journey through some of the cinematic gems that left an indelible mark on my imagination.\nClick the banner below to follow me on Letterboxd and see what I\u0026rsquo;m watching next!\nJohn Wick: Chapter 4, 2023 - ★★★★ Watched on: 23 May 2023\nReview\nPrepare to be on the edge of your seat as John Wick returns in \u0026ldquo;Chapter 4,\u0026rdquo; delivering a nerve-wracking action experience that rivals the intensity of a superhero movie. This latest installment of the franchise takes the already high-octane action to new heights, surpassing its predecessors in a relentless onslaught of jaw-dropping sequences.From the very beginning, the film catapults you into a world where combat reigns supreme. John Wick, portrayed by the enigmatic Keanu Reeves, is once again the unstoppable force we\u0026rsquo;ve come to know and admire. Armed with his signature blend of precise gunplay and lethal hand-to-hand combat, Wick embarks on a blood-soaked journey that defies all logic and leaves you breathless. Nun chucks face blasts were a godsend!The action sequences in here are a mind-boggling spectacle, pushing the boundaries of what seems humanly possible. Wick\u0026rsquo;s encounters with armored samurais, biker gangs, and the relentless High Table assassins are nothing short of astonishing. Director Chad Stahelski orchestrates each fight with impeccable precision, weaving together a symphony of violence that is both visually stunning and emotionally engaging.While the film boasts an impressive array of cool side characters and a satisfying ending, it falls slightly short of perfection due to a juvenile villain and an overly grandiose plot. However, these minor flaws are easily overshadowed by the sheer adrenaline rush provided by the relentless action.\u0026ldquo;John Wick: Chapter 4\u0026rdquo; cements itself as one of the best franchises of our time, delivering a captivating blend of stylized violence, complex choreography, and intense storytelling. It\u0026rsquo;s a rollercoaster ride of non-stop excitement that will leave you both exhilarated and craving for more. Buckle up and brace yourself for an extraordinary cinematic experience.\nRead on Letterboxd\nGuardians of the Galaxy Vol. 3, 2023 - ★★★★ Watched on: 14 May 2023\nReview\nPrepare to embark on another intergalactic journey with the beloved misfit crew in \u0026ldquo;Guardians of the Galaxy Vol. 3,\u0026rdquo; a blessing for the post-Thanos Marvel Cinematic Universe. This installment brings back the quirky charm and infectious humor that made the previous films so delightful.The story picks up with the Guardians facing a new challenge as they reunite to save Rocket, who finds himself in a perilous predicament. The dynamic between the characters remains the heart and soul of the movie, with Star-Lord\u0026rsquo;s melancholy providing an unexpected twist. However, it doesn\u0026rsquo;t take long for the team to find their footing and deliver the hilarious banter and camaraderie we\u0026rsquo;ve come to adore.One of the highlights of the film is the impeccable soundtrack, which serves as a perfect accompaniment to the cosmic adventure. The battles and coordinated fight scenes, although somewhat sparse, are visually impressive, though the 3D effects could have been more immersive.The characters continue to shine, bouncing off each other with their unique personalities and adding depth to the story. Rocket takes center stage as a central character, while Gamora surprises with her fierce presence. The movie doesn\u0026rsquo;t shy away from tugging at the heartstrings, exploring the softer and more emotional side of the narrative.While the villain may not leave a lasting impression, the overall experience of \u0026ldquo;Guardians of the Galaxy Vol. 3\u0026rdquo; is a testament to its entertainment value. It\u0026rsquo;s a great movie to watch with friends, offering a captivating blend of humor, action, and a dash of sentimentality. Marvel fans will find plenty to enjoy in this latest addition to the cosmic saga.\nRead on Letterboxd\nEvil Dead Rise, 2023 - ★★★ Watched on: 09 May 2023\nReview\nEvil Dead Rise, the latest installment in the Evil Dead franchise, is a blood-soaked extravaganza that delivers on the gore and the screams, but falls short in other aspects. This movie is a mixed bag of hilarious try-hard scares, mediocre acting, lazy writing and disappointing character development.Despite its flaws, Evil Dead Rise succeeds in creating a truly unhinged and violent atmosphere that is sure to leave horror fans satisfied. The variety of kills, jump scares, lighting, weapons, and visual effects are impressive, making for a thrilling and visually stunning experience.However, the movie\u0026rsquo;s weak points are hard to overlook. The dialogue is often shoddy and lazy, and the characters are uninteresting, making it difficult to feel connected to their plight. At times, the violence and gore become so excessive that they border on juvenile, taking away from the overall horror experience.Overall, Evil Dead Rise is a good and entertaining watch for horror fans looking for a flesh extravaganza. While it falls short in some aspects, the movie\u0026rsquo;s sheer brutality and stunning visual effects make for a worthwhile experience.\nRead on Letterboxd\nDungeons \u0026amp; Dragons: Honor Among Thieves, 2023 - ★★★★ Watched on: 03 May 2023\nReview\nListen up, fantasy nerds! We\u0026rsquo;ve finally got an entertaining Dungeons \u0026amp; Dragons movie on our hands! \u0026ldquo;Honor Among Thieves\u0026rdquo; doesn\u0026rsquo;t suck ass like the last few attempts at bringing our beloved world to the big screen. This movie is wholly entertaining, meta, and self-aware. It\u0026rsquo;s like the filmmakers knew they had a lot to make up for, and they nailed it!The casting was on point, with each actor perfectly fitting their role. The VFX may have some rough spots, but it\u0026rsquo;s hard not to laugh when the levitation, summoning, and extreme expression-driven acting come into play. It\u0026rsquo;s all intentional, trust me.The lore and world-building is rich and deep, as one would expect from Dungeons \u0026amp; Dragons. And let\u0026rsquo;s talk about the action sequences - they\u0026rsquo;re a delight! The comedy is on point, and the \u0026ldquo;magic\u0026rdquo; aspect of it all is captivating. The movie is light-hearted and inventive, and the camera work and editing are pretty great.Overall, \u0026ldquo;Dungeons \u0026amp; Dragons: Honor Among Thieves\u0026rdquo; is a thieving delight! It\u0026rsquo;s definitely worth watching, especially for the fantasy nerds out there\nRead on Letterboxd\n","permalink":"https://atharvashah.netlify.app/posts/personal/movie-review/may-2023/","summary":"Amidst the whirlwind of academic and professional commitments, I managed to carve out precious moments to immerse myself in the magic of cinema. The month of May brought forth an array of highly anticipated films, and while my movie-watching endeavors were limited, the experiences I had were truly captivating. This is partly to blame on TV shows like Better Call Saul which I recently finished and Succession which I just picked up and have been obsessively binge watching.","title":"May 2023 Movies: Blockbuster Bonanza"},{"content":"Description This article provides step-by-step instructions on how to set up continuous integration and continuous deployment (CI/CD) to Netlify for static site deployments using Github. Readers will learn how to optimize their deployment pipeline for maximum efficiency, streamline their workflow and reduce the risk of errors.\nI. Introduction In today\u0026rsquo;s fast-paced software development landscape, Continuous Integration and Continuous Deployment (CI/CD) have become crucial for ensuring high-quality software releases at a rapid pace. Netlify is a popular cloud-based hosting platform that provides an easy way to deploy static sites. By automating the deployment process with CI/CD, developers can focus on writing code and delivering features rather than manually deploying changes. In this article, we will explore how to set up CI/CD to Netlify for static site deployments. We will discuss the benefits of this approach, and provide a step-by-step guide for integrating Github with Netlify for a streamlined deployment process.\nFor this article, I will be using a Hugo static site that I used to build a personal portfolio and blog for my audience to demonstrate the CI/CD pipeline. Please take a close look at the Github Repository for the same.\nII. Setting Up a Netlify Account In order to set up CI/CD to Netlify for static site deployment, you will need to create a Netlify account. If you already have a Netlify account, you can skip this section and move on to the next section.\nNetlify is a cloud-based service that offers continuous deployment, hosting, and serverless backend functionality for static websites. With Netlify, you can easily deploy and manage static sites with automatic CI/CD capabilities.\nCreating a Netlify account To create a Netlify account, go to netlify.com and click the \u0026ldquo;Sign up\u0026rdquo; button in the upper right corner of the page. You can sign up with your GitHub, GitLab, or Bitbucket account or by using your email address.\nSetting up a new site on Netlify Once you have created a Netlify account, you can set up a new site by clicking the \u0026ldquo;New site from Git\u0026rdquo; button on the Netlify dashboard. From there, you will need to select the Git provider that hosts your repository. In this case, we will be using GitHub.\nLinking the site to a GitHub repository After selecting GitHub as the Git provider, Netlify will prompt you to authenticate with your GitHub account. Once authenticated, you will be able to select the repository that you want to link to your Netlify site. After selecting the repository, you will be presented with a list of configuration options for your site.\nIn the next section, we will discuss how to configure your GitHub repository for automatic deployments to Netlify.\nIII. Setting Up CI/CD to Netlify CI/CD (Continuous Integration and Continuous Deployment) is a process that automates the building, testing, and deploying of code changes. By setting up CI/CD to Netlify for your static site via Github, you can ensure that your code changes are automatically tested, built, and deployed to your production site every time you make a commit.\nNetlify provides a simple and intuitive way to configure CI/CD for your static site. Here\u0026rsquo;s how to do it:\nConfiguring the Build Settings on Netlify Before you can set up CI/CD to Netlify, you need to configure the build settings on Netlify. Netlify uses build plugins to configure the build process. Build plugins are reusable pieces of code that can be shared across different sites and projects.\nTo configure the build settings, follow these steps:\nGo to your site\u0026rsquo;s settings page on Netlify. Click on the \u0026ldquo;Build \u0026amp; deploy\u0026rdquo; tab. Scroll down to the \u0026ldquo;Build plugins\u0026rdquo; section. Click the \u0026ldquo;Add build plugin\u0026rdquo; button. Select the \u0026ldquo;Build Command\u0026rdquo; plugin. In the \u0026ldquo;Command\u0026rdquo; field, enter the build command for your static site. For example, if you\u0026rsquo;re using Jekyll, the build command would be \u0026ldquo;jekyll build\u0026rdquo;. If you\u0026rsquo;re using Hugo, the build command would be \u0026ldquo;hugo\u0026rdquo;. Click \u0026ldquo;Save\u0026rdquo;. Configuring the Deployment Settings on Netlify Once you\u0026rsquo;ve configured the build settings, you need to configure the deployment settings on Netlify. Netlify provides several deployment options, including manual deploys, continuous deployment, and branch deploys.\nTo configure the deployment settings, follow these steps:\nGo to your site\u0026rsquo;s settings page on Netlify. Click on the \u0026ldquo;Build \u0026amp; deploy\u0026rdquo; tab. Scroll down to the \u0026ldquo;Deploy notifications\u0026rdquo; section. Click the \u0026ldquo;Add notification\u0026rdquo; button. Select the deployment method you want to use. For example, if you want to use continuous deployment, select \u0026ldquo;GitHub\u0026rdquo;. If you want to use manual deploys, select \u0026ldquo;Manual deploys\u0026rdquo;. Follow the prompts to authenticate with GitHub and select the repository and branch you want to deploy. That\u0026rsquo;s it! Netlify will now automatically build and deploy your static site every time you push a new commit to the linked GitHub repository. If there are any errors in the build process, Netlify will notify you via email or Slack.\nIV. Setting Up CI/CD with Github Actions In the previous section, we set up the basic CI/CD configuration on Netlify. However, we haven\u0026rsquo;t automated the process yet. In this section, we\u0026rsquo;ll use Github Actions to automate our CI/CD process.\nIntroduction to Github Actions Github Actions is a powerful tool that allows you to automate tasks directly in your Github repository. It works by defining workflows as code that are triggered by specific events such as push, pull request, or cron schedules. A workflow is made up of one or more jobs that can be run on different operating systems and virtual environments. Each job is made up of one or more steps that are executed in sequence. Steps are individual tasks, such as building and testing your code or deploying it to a server.\nGithub Actions provides a wide range of pre-built actions, which are individual tasks that can be used within your workflows. These actions are reusable, making it easy to build custom workflows without having to write much code.\nCreating a Github Actions Workflow for the Static Site To create a workflow, we need to create a YAML file in the .github/workflows directory in our Github repository. This file defines the workflow and its associated jobs and steps.\nFirst, we need to define the event that triggers the workflow. In our case, we want the workflow to be triggered whenever changes are pushed to the main branch. Here\u0026rsquo;s an example YAML configuration that achieves this:\ncodename: Deploy to Netlify on: push: branches: - main Next, we need to define the jobs that make up the workflow. In our case, we only need one job, which will build and deploy our site. Here\u0026rsquo;s an example YAML configuration for the job:\ncodejobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Install dependencies run: npm install - name: Build site run: npm run build - name: Deploy site to Netlify uses: nwtgck/actions-netlify@v1 with: publish-dir: ./dist production-command: echo \u0026#39;No production command required for static site deployment\u0026#39; env: NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }} NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }} Let\u0026rsquo;s go through each step of the job:\nruns-on: ubuntu-latest specifies that the job will run on a Ubuntu environment. actions/checkout@v2 checks out the code from Github so that it can be built and deployed. npm install installs the dependencies required to build the site. npm run build builds the site using the build command specified in our package.json file. nwtgck/actions-netlify@v1 is an action that deploys our site to Netlify. publish-dir: ./dist specifies the directory containing our built site. production-command: echo 'No production command required for static site deployment' is not required for static site deployments. NETLIFY_AUTH_TOKEN and NETLIFY_SITE_ID are environment variables that contain the API key and site ID for our Netlify account. These are passed in as secrets in the Github repository settings. Once we\u0026rsquo;ve created this YAML configuration file, Github Actions will automatically detect it and run it whenever changes are pushed to the main branch.\nConfiguring the Workflow to Deploy to Netlify Before we can deploy to Netlify using Github Actions, we need to configure the workflow to tell it where to deploy and how to authenticate with Netlify.\nFirst, we need to set up an access token in Netlify to allow Github to deploy to our site. To do this, navigate to the Netlify dashboard and click on the site we want to deploy to. Then, click on the \u0026ldquo;Settings\u0026rdquo; tab and scroll down to the \u0026ldquo;Access tokens\u0026rdquo; section. Click the \u0026ldquo;New access token\u0026rdquo; button, and give it a name that reflects its use, such as \u0026ldquo;Github Actions deployment.\u0026rdquo;\nNext, select the desired permissions for the token. For deployment purposes, we only need to grant the \u0026ldquo;deploy\u0026rdquo; permission. Once we have selected the \u0026ldquo;deploy\u0026rdquo; permission, click the \u0026ldquo;Generate token\u0026rdquo; button at the bottom of the page. Netlify will generate a new access token, which we need to copy and store safely in our Github repository\u0026rsquo;s secrets.\nTo add the Netlify access token to our repository\u0026rsquo;s secrets, we need to navigate to the repository\u0026rsquo;s \u0026ldquo;Settings\u0026rdquo; tab and click on \u0026ldquo;Secrets\u0026rdquo; on the left-hand side. Then, click the \u0026ldquo;New repository secret\u0026rdquo; button, and enter \u0026ldquo;NETLIFY_AUTH_TOKEN\u0026rdquo; as the name of the secret. In the \u0026ldquo;Value\u0026rdquo; field, paste the access token we just copied from Netlify. Finally, click the \u0026ldquo;Add secret\u0026rdquo; button to save the token.\nNow that we have our access token set up and safely stored, we can add the deployment step to our Github Actions workflow. To do this, we need to modify the workflow YAML file we created earlier. We will add a new step at the end of the workflow to deploy the site to Netlify.\nHere\u0026rsquo;s an example deployment step that we can add to our YAML file:\ncodename: Deploy to Netlify uses: nwtgck/actions-netlify@v1 with: NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }} NETLIFY_SITE_ID: your_site_id DIR_TO_UPLOAD: your_dir_to_upload This step uses the \u0026ldquo;nwtgck/actions-netlify\u0026rdquo; Github Action, which simplifies the deployment process to Netlify. We need to provide the access token we just created, along with the site ID and directory we want to upload.\nTo find the site ID, navigate to the site\u0026rsquo;s \u0026ldquo;Settings\u0026rdquo; tab in the Netlify dashboard and scroll down to the \u0026ldquo;Site details\u0026rdquo; section. The site ID will be listed under the site name.\nFinally, we need to specify the directory we want to upload to Netlify. This directory should contain the built version of our static site. The directory can be specified using the \u0026ldquo;DIR_TO_UPLOAD\u0026rdquo; parameter in the YAML file.\nOnce we have added the deployment step to the workflow YAML file, we can commit and push the changes to Github. Github Actions will automatically run the workflow when changes are pushed to the repository, which will trigger the build and deployment process to Netlify.\nWith everything set up, we can now sit back and watch as our site is automatically built and deployed to Netlify every time we push changes to Github. This is a powerful workflow that simplifies the deployment process and frees up time to focus on developing our site.\nV. Best Practices for CI/CD with Netlify and Github Setting up CI/CD to Netlify via Github is a powerful combination that allows for seamless deployments of static sites. However, there are some best practices that can help optimize the process and ensure smooth operations. Here are some tips for optimizing your CI/CD pipeline and managing your Github repository and Netlify site:\nRegularly test your deployment process: It\u0026rsquo;s important to test your deployment process regularly to catch issues early on. You can do this by creating a test branch and testing the deployment process on a separate staging site before deploying to production. Use version control effectively: Make sure to use version control effectively by using clear commit messages, creating meaningful branch names, and enforcing code reviews. This helps keep your codebase organized and makes it easier to roll back changes if needed. Use environment variables: Netlify allows for the use of environment variables to keep sensitive information secure, such as API keys or access tokens. Make sure to use these variables and not hardcode any sensitive information into your deployment scripts. Optimize build time: Netlify has a limit of 15 minutes for the build time of each deployment. If your build time exceeds this limit, you may run into issues. To optimize build time, make sure to only install necessary dependencies and remove any unnecessary files or processes. Use caching: Caching is a great way to speed up build times and reduce the number of API calls needed. Netlify supports caching of dependencies, and Github Actions supports caching of build artifacts. Monitor your deployments: Keep an eye on your deployments to ensure they are successful and catch any errors early on. You can set up notifications to alert you of failed deployments or use tools like Sentry or New Relic for error monitoring. Backup your data: Regularly backup your data to prevent data loss. Netlify provides built-in backup functionality, but it\u0026rsquo;s always a good idea to have an offsite backup as well. By following these best practices, you can optimize your CI/CD pipeline and ensure smooth deployments of your static site to Netlify. Remember to test regularly, use version control effectively, keep sensitive information secure with environment variables, optimize build time, use caching, monitor your deployments, and backup your data to prevent data loss.\nVI. Troubleshooting CI/CD Issues Even with the best practices in place, issues can arise during the CI/CD process that can cause headaches for developers. Here are some common issues and troubleshooting steps to help you diagnose and resolve problems with the deployment pipeline.\nBuild Fails One of the most common issues that developers face is a failed build. This can be caused by a number of factors, including incorrect build settings, missing dependencies, or errors in the code. When a build fails, the first step is to check the build logs to identify the source of the problem. Netlify provides detailed logs that can help you diagnose the issue. Once you have identified the problem, you can make the necessary changes to the build settings or code to resolve the issue.\nDeployment Fails Another common issue is a failed deployment. This can occur if there are errors in the deployment settings or if there are issues with the Netlify API. When a deployment fails, check the deployment logs to identify the source of the problem. If the issue is with the deployment settings, make the necessary changes and try again. If the issue is with the Netlify API, you may need to contact Netlify support for assistance.\nSlow Builds or Deployments Sometimes, builds or deployments may take longer than expected. This can be caused by a variety of factors, including slow network speeds, large files, or complex code. To resolve this issue, try optimizing your code or reducing the size of your files. You can also consider upgrading to a higher-tier Netlify plan for faster build and deployment speeds.\nCaching Issues Caching can also cause issues during the CI/CD process. If changes are not reflected in the deployed site, it may be due to caching. To resolve this issue, you can clear the cache in Netlify or disable caching in your browser.\nAuthentication Issues Authentication issues can also cause problems during the CI/CD process. If you are having trouble authenticating with Github or Netlify, double-check your credentials and make sure that you have the necessary permissions to access the repository or site.\nVII. Conclusion In conclusion, setting up CI/CD to Netlify for a static site via Github provides a streamlined approach to deploying code changes. It eliminates the need for manual deployment processes, saves time and increases productivity.\nTo set up this process, you will need to create a Netlify account, link it to your Github repository, configure the build and deployment settings on Netlify, and create a Github Actions workflow.\nIn the workflow, you will define the steps to build and deploy the site to Netlify. Github Actions is a powerful tool that allows for a wide range of customization, making it possible to fine-tune the deployment process to your specific needs.\nTo optimize the pipeline, we recommend implementing best practices such as using Git branches and pull requests, setting up automatic testing, and monitoring the deployment pipeline for errors.\nIn case of any issues during the CI/CD process, it is important to have a troubleshooting plan in place. This includes diagnosing and resolving issues with the pipeline, using tools such as logs and error messages to determine the root cause of the issue.\nOverall, setting up CI/CD to Netlify for a static site is a valuable addition to any development workflow. It simplifies the deployment process and frees up developers\u0026rsquo; time to focus on building and improving the site itself. With the steps outlined in this guide, you can easily set up and customize the pipeline to fit your specific needs.\n","permalink":"https://atharvashah.netlify.app/posts/tech/netlify-ci-cd/","summary":"Description This article provides step-by-step instructions on how to set up continuous integration and continuous deployment (CI/CD) to Netlify for static site deployments using Github. Readers will learn how to optimize their deployment pipeline for maximum efficiency, streamline their workflow and reduce the risk of errors.\nI. Introduction In today\u0026rsquo;s fast-paced software development landscape, Continuous Integration and Continuous Deployment (CI/CD) have become crucial for ensuring high-quality software releases at a rapid pace.","title":"Setting Up CI/CD to Netlify for Static Sites via Github"},{"content":" Directed By : Quentin Tarantino\nRelease Year : 1994\nStarring : John Travolta, Samuel L. Jackson, Uma Thurman, Bruce Willis\nNarrative Pulp Fiction adopts a non-linear narrative with three protagonists, namely, Vincent Vega (a quirky hitman), Jules Winnfield (Vega’s partner in crime) and Butch Coolidge(a prizefighter). The movie is split into seven episodic events which do not follow a chronological order. All the episodic stories are a blend of genres and Tarantino is known to sprinkle various Easter-eggs and references throughout. That really binds all the scenes together. What fascinates me the most is that the scenes have absolutely no exposition dump and all the narrative themes as well as the plot lines are communicated to the audience through the bizarre, peculiar and anomalously stylistic lives of the protagonists in the form of coarse, vulgar and gritty dialogues.\nHaving watched this movie more times than I can remember, I have come to admire the dialogue-writing in this movie so much that I can perform any particular scene with no rehearsal. Every conversation in this movie feels intimate and is to be relished. Right from the start, the movie is a frenzied, reflective, humorous ride and most of the characters are unhinged. The narrative is distinctive because it defies convention and jolts every human sense with its wicked brutality and captivating fluidity.\nScreenplay The dialogue is the soul of the movie. Pulp Fiction boasts the most iconic dialogues and the way the conversation flows between a pair of characters feels very spontaneous and natural and that is precisely the allure of this entire movie. It creates a vivid image without making the audience conscious of its beauty and remarkable direction and screenplay.\nFrankly, I could listen to the scene with the dialogue Royale with Cheese endlessly and never get weary. Also, Zed’s Dead, Baby, Zed’s Dead is very witty and has a dark comedy flair to it. Samuel L. Jackson really set the standard with his Ezekiel 25:17 monologue- it is truly rare to find such intensity, passion and commitment in modern cinema. The performances are lively and splendid, but I have to commend Samuel L. Jackson for captivating the audience here. The way he uttered his lines was menacing and sometimes even hilarious.\nTowards the end of the movie, we see the seven tales converging towards each other and our protagonists entangled in each others destiny. This is the essence of Tarantino’s storytelling.\nCostumes and Set Design The costumes in the movie may appear simplistic at first sight, with monochrome suits and vintage jumpsuits dominating the scene. However, a closer look reveals the subtle nuances and hints that Tarantino has embedded into the fabric of the film. These details unveil the inner workings and personalities of the gangsters and charming ladies that inhabit the movie. As I immersed myself in the film, I was mesmerized by the intricate details of the costumes. The monochrome suits, for instance, were not merely uniform, but rather customized to each character’s physique and persona. The vintage jumpsuits, likewise, were not just a nod to a past era, but rather an expression of the characters’ individual eccentricities and traits. Tarantino’s meticulousness is astounding, and it manifests in every facet of the film, from the costumes to the dialogue. As I watched the movie, I was transported to the world that he had crafted, a world that was both recognizable and yet utterly original. It is a demonstration of his prowess as a filmmaker that he is able to create such a rich and complex world, one that is both amusing and stimulating. In summary, the costumes in the movie are not just rudimentary garments, but rather a reflection of the characters’ identities and aspirations. Tarantino’s meticulousness is unrivaled, and it is this meticulousness that makes the movie such a riveting and compelling experience.\nTarantino took immaculate care to develop the characters through their stand-out in your face fashion choices. The story is set in Las Vegas or a fictionalized version of it and the fashion suits the time period.\nSoundtrack Pulp Fiction is a mash-up of American pop, rock and roll, surf, and soul. Every single track has a style that fits the scenes and acts as a backbone in raising the audience\u0026rsquo;s emotional commitment. There is no monotony because the music is appealing, rhythmic, and diverse. There is no shortage of groovy tunes and retro classics - the opening title flashes on the screen with the iconic Misirlou theme, Son of a Preacher Man perfectly capturing the mood when Vincent meets the godly Mia Wallace for the first time, and Ricky Nelson\u0026rsquo;s Lonesome Town is both comforting and pensive. Clearly, my favourite moment is the one in which Mia and Vincent show off their elegant and famous dancing routines to You Can Never Tell, an all-time classic in film history. Girl, You\u0026rsquo;ll Be a Woman Soon brilliantly conveys Mia\u0026rsquo;s impending overdose and emphasises her extravagant lifestyle. In a nutshell, I adore every second of it, and it is really easy to say. Tarantino has an uncanny ability to select songs that become immediate favourites.\nCamera and Lighting This film\u0026rsquo;s passion and vibrant beauty cannot be denied. The quick pan of the camera, the close-up, grainy film filters, a sun washed colour scheme, and the kaleidoscopic narrative all come together in a masterpiece of total audacious violence combined with cruel perversity. During silly debates and unusual scenes, the camera remains very stable, making it uncomfortable and unsettling. The camera is placed from the characters\u0026rsquo; feet, in the trunk of the car when Travolta and Jackson lift it off, at diner tables and restaurants during the opening, focusing on facial expressions and hand gestures, and finally, far away during the dance-scene.\nThere are layers within layers, and it takes a keen eye to spot all the details hidden in plain sight, as Tarantino frequently uses gore in a \u0026ldquo;in your face\u0026rdquo; manner, making us overlook the other beautiful aspects on the frame. All of these placement strategies capture the rich language and colourful aural imagery of our diverse characters. The lighting in the pub scene, where we see the hulk of a character, totally menacing and the possible antagonist with his back to the camera and the room flooded with red light and smoke, is, to put it mildly, menacing.\nAwards and Accolades Pulp Fiction has won over 70 awards and has been nominated for more 75 accolades. Some notable awards received are:-\nBAFTA Film Award - Best Actor in a Supporting Role, Best Screenplay - Original Academy Awards - Best Writing, Screenplay National Society of Film Critics - Best Picture Closing Thoughts The cinematic masterpiece, Pulp Fiction, is unequivocally a quintessential work of popular culture that elevated the status of cinema to a new level of prestige. Of course, like any art form, it is not without its imperfections. Nevertheless, Pulp Fiction effectively bridges the gap between cinematic perfection and artistic flaws.\nThe film embodies a plethora of elements that tantalize the senses and leave an indelible mark on the viewer\u0026rsquo;s psyche. From the clever incorporation of pop culture references to the subtle religious metaphors, the movie immerses the audience in a world of edgy and provocative themes. Samuel L. Jackson\u0026rsquo;s masterful use of expletives and slurs coupled with blood-soaked thrills and tempting fast food, create a symphony of sensory experiences.\nThe film\u0026rsquo;s iconic dances, witty one-liners, and engaging dialogues, complemented by catchy tunes, are a testament to the movie\u0026rsquo;s once-in-a-generation status. Pulp Fiction ushered in a new era of modern filmmaking, characterized by sophisticated yet whimsical narratives, memorable characters, kick-ass tunes, and bizarrely entertaining scenarios, that have stood the test of time.\nMoreover, in my candid opinion, Mia Wallace is the quintessential character in all of cinema, whose effortless charm, wit, and grace, have captivated audiences for decades.\n","permalink":"https://atharvashah.netlify.app/posts/personal/critical-analysis-pulp-fiction/","summary":"Directed By : Quentin Tarantino\nRelease Year : 1994\nStarring : John Travolta, Samuel L. Jackson, Uma Thurman, Bruce Willis\nNarrative Pulp Fiction adopts a non-linear narrative with three protagonists, namely, Vincent Vega (a quirky hitman), Jules Winnfield (Vega’s partner in crime) and Butch Coolidge(a prizefighter). The movie is split into seven episodic events which do not follow a chronological order. All the episodic stories are a blend of genres and Tarantino is known to sprinkle various Easter-eggs and references throughout.","title":"A Critical Analysis of Pulp Fiction"},{"content":"Introduction Welcome to the final part of the 3-part technical tutorial series, where have been building a Django project that enables users to manage their cryptocurrency portfolios. To implement the functionalities and additional features, we\u0026rsquo;ll be utilizing API calls to coingecko or any other cryptocurrency API.\nIn the first part, we set up the project and created the models. In the second part continued off from that point and added all the templates, views and urls and code up the entire crypto project. So, if you haven\u0026rsquo;t read the previous parts, I highly recommend you to do so before continuing with this part. Here, we will exclusively discuss testing approach by writing test cases for Models, Views and Templates using Pytest. We will also write a ton of tests to ensure that our code is working as expected and generate a coverage report to see how much of our code is covered by the tests.\nThe code for the entirety of the project can be found here -\u0026gt; Github Repo for Django Crypto App\nTesting is an important part of software development. It helps us to ensure that our code is working as expected and also helps us to catch bugs early on. It also helps us to ensure that our code is maintainable and readable. So, let\u0026rsquo;s get started.\nTest Driven Development Explained In Django, automated testing can be performed at three levels: URL testing, model testing, and view testing.\nURL Testing URL testing in Django is used to check if the endpoints specified in the URL patterns are correctly configured and pointing to the appropriate views. This is important because if an endpoint is incorrect or pointing to the wrong view, the application will not be able to process the request, leading to errors or incorrect behavior. URL testing is typically performed using the Django Client class, which simulates a web client and allows the developer to send requests to the application.\nModel Testing Model testing in Django is used to check if the data stored in the database matches the expected schema and constraints specified in the models.py file. It helps ensure that the application is storing and retrieving data correctly and that the database is working as expected. Model testing is typically performed using the Django TestCase class and its various assertion methods, which allow the developer to create test data, save it to the database, and verify that the data has been saved correctly.\nView Testing View testing in Django is used to check if the business logic defined in the views.py file is functioning correctly. It is used to test whether the views are handling requests as expected and returning the appropriate responses. View testing is typically performed using the Django TestCase class and its various assertion methods, which allow the developer to simulate requests and verify the responses.\nFor this crypto-wallet app, I used all three types of automated testing. For URL testing, I created a series of test cases that used the Django Client class to simulate requests to various endpoints in the application. Each test case sent a request to the endpoint and verified that the response was the expected template.\nFor model testing, I created a series of test cases that used the Django TestCase class to create test data, save it to the database, and verify that it had been saved correctly. Each test case tested a specific model or relationship between models to ensure that the data was being stored and retrieved correctly.\nFor view testing, I created a series of test cases that used the Django TestCase class to simulate requests to various views in the application. Each test case sent a request to the view and verified that the response was the expected result.\nWriting Tests Go to the tests.py file in the mainapp folder and add the following imports since we will be using them in our tests.\nfrom decimal import Decimal from unittest.mock import patch from django.contrib.auth import authenticate, login from django.contrib.auth import views as auth_views from django.contrib.auth.forms import AuthenticationForm, UserCreationForm from django.contrib.auth.hashers import make_password from django.contrib.auth.models import User from django.core.exceptions import ValidationError from django.test import Client, TestCase from django.urls import resolve, reverse from test_plus import TestCase from .forms import CustomUserCreationForm from .models import * from .views import * Now that we have understood the theory, motivation and the approach, let\u0026rsquo;s start writing tests.\nTesting URLS This is a test class for testing the URLs of a web application. The test class inherits from Django\u0026rsquo;s TestCase class, and it has test methods for each of the URLs in the application.\nThe class has a setUp() method that creates a test user to use for the tests.\nThe test methods are named according to the following convention:\ntest[PageName] tests that the page with the given name can be accessed by the client. test[PageName]Url tests that the URL for the given page resolves to the correct view function. test[PageName]Template tests that the correct template is used for the given page. test[PageName]ContainsCorrectHtml tests that the correct HTML content is displayed on the given page. test[PageName]FormCorrect tests that the correct form is used for the given page. test[PageName]RedirectsTo[OtherPageName] tests that the given page redirects to the correct other page. test[PageName]RedirectIfAlreadyLoggedIn tests that the given page redirects to the correct page if the user is already logged in. The test methods use Django\u0026rsquo;s testing client to make requests to the application\u0026rsquo;s URLs and check the responses. They use Django\u0026rsquo;s reverse() function to generate URLs for the application\u0026rsquo;s views, and they use Django\u0026rsquo;s resolve() function to match URLs to view functions. They also use Django\u0026rsquo;s assertTemplateUsed() function to check that the correct template is used, and they use Django\u0026rsquo;s assertContains() and assertNotContains() functions to check for the presence or absence of specific HTML content in the response.\nclass UrlTest(TestCase): # CREATE THE TEST USER def setUp(self): self.user = User.objects.create_user( username=\u0026#39;testuser\u0026#39;, email=\u0026#39;testuser@example.com\u0026#39;, password=\u0026#39;12345\u0026#39; ) \u0026#34;\u0026#34;\u0026#34; ---------------- HOME PAGE TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; def testHomePage(self): response = self.client.get(\u0026#39;/\u0026#39;) self.assertEqual(response.status_code, 200) def testHomePageUrl(self): url = reverse(\u0026#39;home\u0026#39;) self.assertEqual(resolve(url).func, home_view) def testHomePageTemplate(self): response = self.client.get(\u0026#39;/\u0026#39;) self.assertTemplateUsed(response, \u0026#39;home.html\u0026#39;) def testHomePageContainsCorrectHtml(self): response = self.client.get(\u0026#39;/\u0026#39;) self.assertContains(response, \u0026#39;Top 10 CryptoCurrency Rankings\u0026#39;) self.assertNotContains(response, \u0026#39;Hi there! I should not be on the page.\u0026#39;) \u0026#34;\u0026#34;\u0026#34; ---------------- LOGIN PAGE TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; def testLoginPage(self): response = self.client.get(\u0026#39;/login/\u0026#39;) self.assertEqual(response.status_code, 200) def testLoginPageUrl(self): url = reverse(\u0026#39;login\u0026#39;) self.assertEqual(resolve(url).func, login_view) def testLoginPageTemplate(self): response = self.client.get(\u0026#39;/login/\u0026#39;) self.assertTemplateUsed(response, \u0026#39;login.html\u0026#39;) def testLoginPageContainsCorrectHtml(self): response = self.client.get(\u0026#39;/login/\u0026#39;) self.assertContains(response, \u0026#39;Login\u0026#39;) self.assertNotContains(response, \u0026#39;Hi there! I should not be on the page.\u0026#39;) def testLoginPageRedirectsToPortfolioPage(self): self.client.login(username=self.user.username, password=\u0026#39;12345\u0026#39;) response = self.client.get(\u0026#39;/login/\u0026#39;) self.assertRedirects(response, \u0026#39;/portfolio/\u0026#39;) def testLoginPageRedirectIfAlreadyLoggedIn(self): self.client.login(username=self.user.username, password=\u0026#39;12345\u0026#39;) response = self.client.get(\u0026#39;/login/\u0026#39;) self.assertRedirects(response, \u0026#39;/portfolio/\u0026#39;) def testLoginPageFormCorrect(self): response = self.client.get(\u0026#39;/login/\u0026#39;) form = response.context.get(\u0026#39;form\u0026#39;) self.assertIsInstance(form, AuthenticationForm) self.assertContains(response, \u0026#39;csrfmiddlewaretoken\u0026#39;) \u0026#34;\u0026#34;\u0026#34; ---------------- SIGNUP PAGE TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; def testSignupPage(self): response = self.client.get(\u0026#39;/signup/\u0026#39;) self.assertEqual(response.status_code, 200) def testSignupPageUrl(self): url = reverse(\u0026#39;signup\u0026#39;) self.assertEqual(resolve(url).func, signup_view) def testSignupPageTemplate(self): response = self.client.get(\u0026#39;/signup/\u0026#39;) self.assertTemplateUsed(response, \u0026#39;signup.html\u0026#39;) def testSignupPageContainsCorrectHtml(self): response = self.client.get(\u0026#39;/signup/\u0026#39;) self.assertContains(response, \u0026#39;Signup\u0026#39;) self.assertNotContains(response, \u0026#39;Hi there! I should not be on the page.\u0026#39;) def testSignupPageRedirectIfAlreadyLoggedIn(self): self.client.login(username=self.user.username, password=\u0026#39;12345\u0026#39;) response = self.client.get(\u0026#39;/signup/\u0026#39;) self.assertRedirects(response, \u0026#39;/portfolio/\u0026#39;) def testSignupPageFormCorrect(self): response = self.client.get(\u0026#39;/signup/\u0026#39;) form = response.context.get(\u0026#39;form\u0026#39;) self.assertIsInstance(form, UserCreationForm) self.assertContains(response, \u0026#39;csrfmiddlewaretoken\u0026#39;) \u0026#34;\u0026#34;\u0026#34; ---------------- PORTFOLIO PAGE TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; def testPortfolioPageNoLogin(self): # check if logged out user can access portfolio page response = self.client.get(\u0026#39;/portfolio/\u0026#39;) self.assertEqual(response.status_code, 302) def testPortfolioPageLogin(self): # check if logged in user can access portfolio page self.client.login(username=self.user.username, password=\u0026#39;12345\u0026#39;) response = self.client.get(\u0026#39;/portfolio/\u0026#39;) self.assertEqual(response.status_code, 200) def testPortfolioPageUrl(self): url = reverse(\u0026#39;portfolio\u0026#39;) self.assertEqual(resolve(url).func, portfolio_view) def testPortfolioPageTemplate(self): self.client.login(username=self.user.username, password=\u0026#39;12345\u0026#39;) response = self.client.get(\u0026#39;/portfolio/\u0026#39;) self.assertTemplateUsed(response, \u0026#39;portfolio.html\u0026#39;) def testPortfolioPageContainsCorrectHtml(self): self.client.login(username=self.user.username, password=\u0026#39;12345\u0026#39;) response = self.client.get(\u0026#39;/portfolio/\u0026#39;) self.assertContains(response, \u0026#39;Wallet\u0026#39;) self.assertNotContains(response, \u0026#39;Hi there! I should not be on the page.\u0026#39;) \u0026#34;\u0026#34;\u0026#34; ---------------- RESET PAGE TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; def testResetPasswordPageUrl(self): url = reverse(\u0026#39;password_reset\u0026#39;) self.assertEqual(resolve(url).func.view_class, auth_views.PasswordResetView) def testResetPasswordPageTemplate(self): response = self.client.get(\u0026#39;/password_reset/\u0026#39;) self.assertTemplateUsed(response, \u0026#39;reset/password_reset.html\u0026#39;) def testResetPasswordPageContainsCorrectHtml(self): response = self.client.get(\u0026#39;/password_reset/\u0026#39;) self.assertContains(response, \u0026#39;Reset Password\u0026#39;) self.assertNotContains(response, \u0026#39;Hi there! I should not be on the page.\u0026#39;) def testResetPasswordDonePageUrl(self): url = reverse(\u0026#39;password_reset_done\u0026#39;) self.assertEqual(resolve(url).func.view_class, auth_views.PasswordResetDoneView) def testResetPasswordDonePageTemplate(self): response = self.client.get(\u0026#39;/password_reset_done/\u0026#39;) self.assertTemplateUsed(response, \u0026#39;reset/password_reset_done.html\u0026#39;) def testResetPasswordDonePageContainsCorrectHtml(self): response = self.client.get(\u0026#39;/password_reset_done/\u0026#39;) self.assertContains(response, \u0026#39;An email has been sent with instructions to reset your password\u0026#39;) self.assertNotContains(response, \u0026#39;Hi there! I should not be on the page.\u0026#39;) def testResetPasswordCompletePageUrl(self): url = reverse(\u0026#39;password_reset_complete\u0026#39;) self.assertEqual(resolve(url).func.view_class, auth_views.PasswordResetCompleteView) def testResetPasswordCompletePageTemplate(self): response = self.client.get(\u0026#39;/password_reset_complete/\u0026#39;) self.assertTemplateUsed(response, \u0026#39;reset/password_reset_complete.html\u0026#39;) def testResetPasswordCompletePageContainsCorrectHtml(self): response = self.client.get(\u0026#39;/password_reset_complete/\u0026#39;) self.assertContains(response, \u0026#39;Your password has been set.\u0026#39;) self.assertNotContains(response, \u0026#39;Hi there! I should not be on the page.\u0026#39;) \u0026#34;\u0026#34;\u0026#34; ---------------- SEARCH PAGE TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; def testSearchPageNoLogin(self): response = self.client.get(\u0026#39;/search/\u0026#39;) self.assertEqual(response.status_code, 302) def testSearchPageUrl(self): url = reverse(\u0026#39;search\u0026#39;) self.assertEqual(resolve(url).func, search_view) # check if search page can only be accessed by POST request def testSearchPagePostOnly(self): self.client.login(username=self.user.username, password=\u0026#39;12345\u0026#39;) response = self.client.get(\u0026#39;/search/\u0026#39;) self.assertEqual(response.status_code, 405) response = self.client.post(\u0026#39;/search/\u0026#39;) self.assertEqual(response.status_code, 200) Testing Models These test cases are written using the Python unittest framework and are designed to test the functionality of different models in a Django web application.\nThe setUp() method is a special method that is run before every test method. In this method, two User objects are created - one to serve as a test user and the other as a referral user.\nThe individual test methods are defined using the def keyword, followed by the name of the test method. Each test method tests a specific aspect of a particular model, such as the User, Cryptocurrency, Referral, Portfolio, or Profile model.\nWithin each test method, specific actions are taken to test certain aspects of the model, such as creating an instance of the model, setting its attributes, and checking that the expected values are returned. For example, the testUserModelCorrectData() method checks that the attributes of the User model, such as username and email, are correctly set.\nThe assert statements are used to check that the expected values are equal to the actual values. If the test fails, an error is raised and the test method stops running.\nOverall, these test cases aim to ensure that each model in the Django web application functions correctly and behaves as expected.\nclass ModelTest(TestCase): # CREATE THE TEST USER def setUp(self): self.user = User.objects.create_user( username=\u0026#39;testuser2\u0026#39;, email=\u0026#39;testuser2@example.com\u0026#39;, password=\u0026#39;12345\u0026#39; ) self.referral = User.objects.create_user( username=\u0026#39;referraluser\u0026#39;, email=\u0026#39;referreduser@example.com\u0026#39;, password=\u0026#39;12345\u0026#39; ) \u0026#34;\u0026#34;\u0026#34; ---------------- USER MODEL TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; def testUserModelCorrectData(self): test_user = self.user self.assertEqual(test_user.username, \u0026#39;testuser2\u0026#39;) self.assertEqual(test_user.email, \u0026#39;testuser2@example.com\u0026#39;) self.assertTrue(isinstance(test_user, User)) self.assertTrue(test_user.is_active) self.assertFalse(test_user.is_staff) def testErrorOnDuplicateUsername(self): with self.assertRaises(IntegrityError): User.objects.create_user( username=\u0026#39;testuser2\u0026#39;, email=\u0026#39;testuser2@example.com\u0026#39;, password=\u0026#39;12345\u0026#39; ) def testErrorOnDuplicateEmail(self): with self.assertRaises(IntegrityError): User.objects.create_user( username=\u0026#39;testuser3\u0026#39;, email=\u0026#39;testuser2@example.com\u0026#39;, password=\u0026#39;12345\u0026#39; ) \u0026#34;\u0026#34;\u0026#34; ---------------- CRYPTOCURRENCY MODEL TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; def testCryptocurrencyModel(self): cryptocurrency = Cryptocurrency.objects.create( user = User.objects.create(username=\u0026#39;testuser\u0026#39;), id_from_api = \u0026#39;bitcoin\u0026#39;, name = \u0026#39;Bitcoin\u0026#39;, symbol = \u0026#39;BTC\u0026#39;, current_price = 10000, quantity = 1 ) self.assertEqual(cryptocurrency.name, \u0026#39;Bitcoin\u0026#39;) self.assertEqual(cryptocurrency.symbol, \u0026#39;BTC\u0026#39;) self.assertEqual(cryptocurrency.current_price, 10000) self.assertEqual(cryptocurrency.quantity, 1) self.assertEqual(cryptocurrency.user.username, \u0026#39;testuser\u0026#39;) self.assertTrue(isinstance(cryptocurrency, Cryptocurrency)) def testCryptocurrencyModelErrorOnDuplicate(self): Cryptocurrency.objects.create( user = User.objects.create(username=\u0026#39;testuser\u0026#39;), id_from_api = \u0026#39;bitcoin\u0026#39;, name = \u0026#39;Bitcoin\u0026#39;, symbol = \u0026#39;BTC\u0026#39;, current_price = 10000, quantity = 1 ) with self.assertRaises(IntegrityError): Cryptocurrency.objects.create( user = User.objects.create(username=\u0026#39;testuser\u0026#39;), id_from_api = \u0026#39;bitcoin\u0026#39;, name = \u0026#39;Bitcoin\u0026#39;, symbol = \u0026#39;BTC\u0026#39;, current_price = 10000, quantity = 1 ) self.fail(\u0026#39;Cryptocurrency model should not allow duplicate cryptocurrencies\u0026#39;) def testCryptocurrencyCurrentPrice(self): crypto = Cryptocurrency.objects.create( user=self.user, id_from_api=\u0026#39;bitcoin\u0026#39;, name=\u0026#39;Bitcoin\u0026#39;, symbol=\u0026#39;BTC\u0026#39;, current_price=10000, quantity=1 ) self.assertEqual(crypto.current_price, 10000) def testCryptocurrencyStr(self): crypto = Cryptocurrency.objects.create( user=self.user, id_from_api=\u0026#39;bitcoin\u0026#39;, name=\u0026#39;Bitcoin\u0026#39;, symbol=\u0026#39;BTC\u0026#39;, current_price=10000, quantity=1 ) self.assertEqual(str(crypto), \u0026#39;Bitcoin (BTC)\u0026#39;) def testCryptocurrencyQuantityDefaultValue(self): crypto = Cryptocurrency.objects.create( user=self.user, id_from_api=\u0026#39;bitcoin\u0026#39;, name=\u0026#39;Bitcoin\u0026#39;, symbol=\u0026#39;BTC\u0026#39;, current_price=10000 ) self.assertEqual(crypto.quantity, 1) \u0026#34;\u0026#34;\u0026#34; ---------------- REFERRAL MODEL TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; # make a referral and check if it is created correctly def testReferralModel(self): referral = Referal.objects.create( user=self.user, referrer=self.referral ) self.assertEqual(referral.user.username, \u0026#39;testuser2\u0026#39;) self.assertEqual(referral.referrer.username, \u0026#39;referraluser\u0026#39;) self.assertTrue(isinstance(referral, Referal)) \u0026#34;\u0026#34;\u0026#34; ---------------- PORTFOLIO MODEL TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; def testPortfolioModel(self): portfolio = Portfolio.objects.create( user=self.user, total_value=10000 ) self.assertEqual(portfolio.user.username, \u0026#39;testuser2\u0026#39;) self.assertEqual(portfolio.total_value, 10000) self.assertTrue(isinstance(portfolio, Portfolio)) \u0026#34;\u0026#34;\u0026#34; ---------------- PROFILE MODEL TESTS ----------------- \u0026#34;\u0026#34;\u0026#34; def testProfileModel(self): # referral code should be generated automatically using small uuid import shortuuid shortuuid.ShortUUID().random(length=10) referral_code = shortuuid.uuid() # make a dummy user dummy_user = User.objects.create_user( username=\u0026#39;dummyprofile\u0026#39;, email = \u0026#39;dummyemail@example.com\u0026#39;, password=\u0026#39;12345\u0026#39; ) profile = Profile.objects.create( user=dummy_user, referral_code=referral_code ) self.assertEqual(profile.user.username, \u0026#39;dummyprofile\u0026#39;) self.assertEqual(profile.referral_code, referral_code) self.assertTrue(isinstance(profile, Profile)) Testing Views \u0026#34;\u0026#34;\u0026#34; MAKING SEPERATE TEST CLASSES FOR VIEWS \u0026#34;\u0026#34;\u0026#34; class LoginViewTest(TestCase): def setUp(self): self.client = Client() self.user = User.objects.create_user(username=\u0026#39;testuser\u0026#39;, email=\u0026#34;example@example.com\u0026#34;, password=\u0026#39;testpass\u0026#39;) def test_login_view_with_valid_credentials(self): url = reverse(\u0026#39;login\u0026#39;) response = self.client.post(url, {\u0026#39;username\u0026#39;: \u0026#39;testuser\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;testpass\u0026#39;}) self.assertRedirects(response, reverse(\u0026#39;portfolio\u0026#39;)) def test_login_view_with_invalid_credentials(self): url = reverse(\u0026#39;login\u0026#39;) response = self.client.post(url, {\u0026#39;username\u0026#39;: \u0026#39;invaliduser\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;invalidpass\u0026#39;}) self.assertEqual(response.status_code, 200) self.assertContains(response, \u0026#34;Invalid username or password.\u0026#34;) class TestAddToPortfolioView(TestCase): def setUp(self): self.client = Client() self.user = User.objects.create_user( username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpassword\u0026#39;) self.client.login(username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpassword\u0026#39;) def test_add_to_portfolio_view_success(self): with patch(\u0026#39;mainapp.views.requests.get\u0026#39;) as mock_get: mock_data = { \u0026#39;name\u0026#39;: \u0026#39;Bitcoin\u0026#39;, \u0026#39;id\u0026#39;: \u0026#39;bitcoin\u0026#39;, \u0026#39;symbol\u0026#39;: \u0026#39;BTC\u0026#39;, \u0026#39;market_data\u0026#39;: { \u0026#39;current_price\u0026#39;: { \u0026#39;usd\u0026#39;: 50000.00 } } } mock_get.return_value.json.return_value = mock_data data = { \u0026#39;id\u0026#39;: \u0026#39;bitcoin\u0026#39;, \u0026#39;quantity\u0026#39;: 10 } response = self.client.post( reverse(\u0026#39;add_to_portfolio\u0026#39;), data=data) self.assertEqual(response.status_code, 302) self.assertRedirects(response, reverse(\u0026#39;portfolio\u0026#39;)) crypto_currency = Cryptocurrency.objects.get( user=self.user, id_from_api=\u0026#39;bitcoin\u0026#39;) self.assertEqual(crypto_currency.name, \u0026#39;Bitcoin\u0026#39;) self.assertEqual(crypto_currency.symbol, \u0026#39;BTC\u0026#39;) self.assertEqual(crypto_currency.quantity, 10) self.assertEqual(crypto_currency.current_price, 50000.00) portfolio = Portfolio.objects.get(user=self.user) self.assertEqual(portfolio.total_value, 500000.00) def test_add_to_portfolio_view_get_request(self): response = self.client.get(reverse(\u0026#39;add_to_portfolio\u0026#39;)) self.assertEqual(response.status_code, 200) self.assertContains(response, \u0026#39;Need a crypto currency to add to your portfolio. Go back to the home page and search for a crypto currency.\u0026#39;) from django.contrib.auth.models import User from django.test import Client, TestCase class SearchViewTestCase(TestCase): def setUp(self): self.client = Client() self.user = User.objects.create_user( username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpassword\u0026#39; ) self.client.login(username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpassword\u0026#39;) def test_valid_search(self): response = self.client.post(\u0026#39;/search/\u0026#39;, {\u0026#39;search_query\u0026#39;: \u0026#39;bitcoin\u0026#39;}) self.assertEqual(response.status_code, 200) self.assertContains(response, \u0026#39;BTC\u0026#39;) def test_invalid_search(self): response = self.client.post(\u0026#39;/search/\u0026#39;, {\u0026#39;search_query\u0026#39;: \u0026#39;invalid_crypto_currency\u0026#39;}) self.assertEqual(response.status_code, 200) self.assertContains(response, \u0026#39;No crypto currency found based on your search query.\u0026#39;) class DeleteFromPortfolioViewTest(TestCase): def setUp(self): self.client = Client() self.user = User.objects.create_user(username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpass\u0026#39;) self.crypto_currency = Cryptocurrency.objects.create(user=self.user, id_from_api=\u0026#39;bitcoin\u0026#39;, name=\u0026#39;Bitcoin\u0026#39;, symbol=\u0026#39;BTC\u0026#39;, current_price=Decimal(\u0026#39;10000\u0026#39;), quantity=Decimal(\u0026#39;2\u0026#39;)) self.portfolio = Portfolio.objects.create(user=self.user, total_value=Decimal(\u0026#39;20000\u0026#39;)) def test_delete_from_portfolio_view(self): self.client.login(username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpass\u0026#39;) url = reverse(\u0026#39;delete_from_portfolio\u0026#39;, args=[self.crypto_currency.pk]) response = self.client.post(url) self.assertRedirects(response, reverse(\u0026#39;portfolio\u0026#39;)) self.assertFalse(Cryptocurrency.objects.filter(pk=self.crypto_currency.pk).exists()) self.portfolio.refresh_from_db() self.assertEqual(self.portfolio.total_value, Decimal(\u0026#39;0\u0026#39;)) def test_delete_from_portfolio_view_with_unauthenticated_user(self): url = reverse(\u0026#39;delete_from_portfolio\u0026#39;, args=[self.crypto_currency.pk]) response = self.client.post(url) self.assertRedirects(response, reverse(\u0026#39;login\u0026#39;) + \u0026#39;?next=\u0026#39; + url) self.assertTrue(Cryptocurrency.objects.filter(pk=self.crypto_currency.pk).exists()) self.portfolio.refresh_from_db() self.assertEqual(self.portfolio.total_value, Decimal(\u0026#39;20000\u0026#39;)) class TestHomeView(TestCase): def setUp(self): self.client = Client() self.top_10_crypto_url_global = \u0026#39;https://api.coingecko.com/api/v3/coins/markets?vs_currency=USD\u0026amp;order=market_cap_desc\u0026amp;per_page=10\u0026amp;page=1\u0026amp;sparkline=true\u0026#39; self.top_10_crypto_data_global = requests.get(self.top_10_crypto_url_global).json() self.user = User.objects.create_user(username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpass\u0026#39;) self.crypto = Cryptocurrency.objects.create(name=\u0026#39;Bitcoin\u0026#39;, symbol=\u0026#39;BTC\u0026#39;, id_from_api=\u0026#39;bitcoin\u0026#39;, user=self.user, current_price=Decimal(\u0026#39;10000\u0026#39;), quantity=Decimal(\u0026#39;2\u0026#39;)) self.portfolio = Portfolio.objects.create(user=self.user, total_value=Decimal(\u0026#39;20000\u0026#39;)) self.url = reverse(\u0026#39;home\u0026#39;) def test_home_view_authenticated(self): self.client.login(username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpass\u0026#39;) response = self.client.get(self.url) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, \u0026#39;home.html\u0026#39;) self.assertTrue(\u0026#39;top_10_crypto_data_global\u0026#39; in response.context) self.assertTrue(\u0026#39;user_cryptocurrencies\u0026#39; in response.context) self.assertTrue(\u0026#39;user_portfolio\u0026#39; in response.context) self.assertTrue(\u0026#39;crypto_price_changes\u0026#39; in response.context) def test_home_view_unauthenticated(self): response = self.client.get(self.url) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, \u0026#39;home.html\u0026#39;) self.assertTrue(\u0026#39;top_10_crypto_data_global\u0026#39; in response.context) self.assertFalse(\u0026#39;user_cryptocurrencies\u0026#39; in response.context) self.assertFalse(\u0026#39;user_portfolio\u0026#39; in response.context) self.assertFalse(\u0026#39;crypto_price_changes\u0026#39; in response.context) class SignupWithReferrerViewTestCase(TestCase): def setUp(self): self.client = Client() self.referrer = User.objects.create_user( username=\u0026#39;test_referrer\u0026#39;, email=\u0026#39;test_referrer@example.com\u0026#39;, password=\u0026#39;testpassword\u0026#39;) self.referrer_profile = Profile.objects.get(user=self.referrer) self.referral_code = self.referrer_profile.referral_code def test_signup_with_referrer_view_GET(self): response = self.client.get(reverse(\u0026#39;signup_with_referrer_view\u0026#39;, args=[self.referral_code])) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, \u0026#39;signup.html\u0026#39;) def test_signup_with_referrer_view_POST(self): data = { \u0026#39;username\u0026#39;: \u0026#39;testuser\u0026#39;, \u0026#39;email\u0026#39;: \u0026#39;testuser@example.com\u0026#39;, \u0026#39;password1\u0026#39;: \u0026#39;testpassword\u0026#39;, \u0026#39;password2\u0026#39;: \u0026#39;testpassword\u0026#39; } response = self.client.post(reverse(\u0026#39;signup_with_referrer_view\u0026#39;, args=[self.referral_code]), data) self.assertEqual(response.status_code, 302) self.assertEqual(User.objects.count(), 2) # get the user object from the database self.assertEqual(Referal.objects.get(user__username=\u0026#39;testuser\u0026#39;).referrer, self.referrer) self.assertEqual(Profile.objects.get(user__username=\u0026#39;test_referrer\u0026#39;).bonus, 100) self.assertRedirects(response, reverse(\u0026#39;login\u0026#39;)) class SignupViewTestCase(TestCase): def setUp(self): self.client = Client() self.signup_url = reverse(\u0026#39;signup\u0026#39;) self.valid_data = { \u0026#39;username\u0026#39;: \u0026#39;johndoe\u0026#39;, \u0026#39;email\u0026#39;: \u0026#39;johndoe@example.com\u0026#39;, \u0026#39;password1\u0026#39;: \u0026#39;passw0rd\u0026#39;, \u0026#39;password2\u0026#39;: \u0026#39;passw0rd\u0026#39; } def test_signup_view_get(self): response = self.client.get(self.signup_url) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, \u0026#39;signup.html\u0026#39;) self.assertIsInstance(response.context[\u0026#39;form\u0026#39;], CustomUserCreationForm) def test_signup_view_post_invalid_data(self): invalid_data = self.valid_data.copy() invalid_data[\u0026#39;password2\u0026#39;] = \u0026#39;different_password\u0026#39; response = self.client.post(self.signup_url, invalid_data) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, \u0026#39;signup.html\u0026#39;) self.assertIsInstance(response.context[\u0026#39;form\u0026#39;], CustomUserCreationForm) self.assertEqual(User.objects.count(), 0) class LogoutViewTestCase(TestCase): def setUp(self): self.client = Client() self.user = User.objects.create_user( username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpass\u0026#39; ) self.client.login(username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpass\u0026#39;) def test_logout_view(self): # make sure user is logged in response = self.client.get(reverse(\u0026#39;home\u0026#39;)) self.assertEqual(response.status_code, 200) # this is only visible to logged in users below the Top 10 Cryptocurrencies table self.assertTrue(\u0026#39;24 Hour Price Changes\u0026#39; in str(response.content)) # logout response = self.client.get(reverse(\u0026#39;logout\u0026#39;)) self.assertEqual(response.status_code, 302) # check if user is logged out response = self.client.get(reverse(\u0026#39;home\u0026#39;)) self.assertEqual(response.status_code, 200) self.assertFalse(\u0026#39;testuser\u0026#39; in str(response.content)) class LoginViewTestCase(TestCase): def setUp(self): self.client = Client() self.login_url = reverse(\u0026#39;login\u0026#39;) self.user = User.objects.create_user( username=\u0026#39;testuser\u0026#39;, email=\u0026#39;testuser@test.com\u0026#39;, password=\u0026#39;testpass\u0026#39; ) def test_login_view_get(self): response = self.client.get(self.login_url) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, \u0026#39;login.html\u0026#39;) def test_login_view_post_valid_credentials(self): response = self.client.post(self.login_url, { \u0026#39;username\u0026#39;: \u0026#39;testuser\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;testpass\u0026#39;, }) self.assertRedirects(response, reverse(\u0026#39;portfolio\u0026#39;)) user = authenticate(username=\u0026#39;testuser\u0026#39;, password=\u0026#39;testpass\u0026#39;) self.assertIsNotNone(user) self.assertEqual(user, self.user) self.assertTrue(user.is_authenticated) def test_login_view_post_invalid_credentials(self): response = self.client.post(self.login_url, { \u0026#39;username\u0026#39;: \u0026#39;wronguser\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;wrongpass\u0026#39;, }) self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, \u0026#39;login.html\u0026#39;) self.assertContains(response, \u0026#34;Invalid username or password.\u0026#34;) def tearDown(self): self.user.delete() These are unit tests for a Django web application, testing various views in the application. Here\u0026rsquo;s a detailed explanation of each of the views being tested and the purpose of the tests:\nLoginViewTest: test_login_view_with_valid_credentials: This test checks if a user can successfully log in to the application with valid credentials. It sends a POST request to the login URL with a valid username and password, and expects to be redirected to the portfolio page (assuming successful login). test_login_view_with_invalid_credentials: This test checks if a user is unable to log in with invalid credentials. It sends a POST request to the login URL with an invalid username and password, and expects to receive a status code of 200 (assuming failed login) and to see an error message on the login page. TestAddToPortfolioView: test_add_to_portfolio_view_success: This test checks if a user can successfully add a cryptocurrency to their portfolio. It sends a POST request to the add-to-portfolio URL with a valid cryptocurrency ID and quantity, and expects to be redirected to the portfolio page (assuming successful addition). It also checks if the added cryptocurrency and its details (name, symbol, quantity, and current price) have been saved in the database, and if the user\u0026rsquo;s portfolio value has been updated accordingly. test_add_to_portfolio_view_get_request: This test checks if a user cannot add a cryptocurrency to their portfolio through a GET request. It sends a GET request to the add-to-portfolio URL and expects to receive a status code of 200 and an error message on the page. SearchViewTestCase: test_valid_search: This test checks if a user can successfully search for a cryptocurrency by sending a POST request to the search URL with a valid search query. It expects to receive a status code of 200 and to see the cryptocurrency\u0026rsquo;s symbol on the search results page. test_invalid_search: This test checks if a user receives an error message when searching for an invalid cryptocurrency. It sends a POST request to the search URL with an invalid search query and expects to receive a status code of 200 and an error message on the search results page. DeleteFromPortfolioViewTest This test case is testing a view called DeleteFromPortfolioView. The view is expected to receive a POST request with the primary key of a cryptocurrency object. The view should delete that cryptocurrency object from the database and update the user\u0026rsquo;s portfolio value accordingly. The setUp method creates a test client, a test user, a test cryptocurrency object, and a test portfolio object in the database. The test_delete_from_portfolio_view method tests the view when the user is authenticated. It logs in the user using the test client, makes a POST request to the view with the primary key of the test cryptocurrency object, and asserts that the response redirects to the portfolio page. It then checks that the test cryptocurrency object no longer exists in the database and that the portfolio\u0026rsquo;s total value is 0. The test_delete_from_portfolio_view_with_unauthenticated_user method tests the view when the user is not authenticated. It makes a POST request to the view with the primary key of the test cryptocurrency object and asserts that the response redirects to the login page. It then checks that the test cryptocurrency object still exists in the database and that the portfolio\u0026rsquo;s total value is still 20000. TestHomeView This test case is testing a view called HomeView. The view is expected to render a template called home.html and display a list of the top 10 cryptocurrencies, the user\u0026rsquo;s cryptocurrencies, the user\u0026rsquo;s portfolio, and the percentage changes in cryptocurrency prices. The setUp method creates a test client, a test user, a test cryptocurrency object, and a test portfolio object in the database. It also makes a request to an external API to get the top 10 cryptocurrencies. The test_home_view_authenticated method tests the view when the user is authenticated. It logs in the user using the test client, makes a GET request to the view, and asserts that the response status code is 200 and the correct template is used. It also checks that the response context contains the top 10 cryptocurrencies, the user\u0026rsquo;s cryptocurrencies, the user\u0026rsquo;s portfolio, and the percentage changes in cryptocurrency prices. The test_home_view_unauthenticated method tests the view when the user is not authenticated. It makes a GET request to the view and asserts that the response status code is 200 and the correct template is used. It also checks that the response context contains the top 10 cryptocurrencies but does not contain the user\u0026rsquo;s cryptocurrencies, the user\u0026rsquo;s portfolio, or the percentage changes in cryptocurrency prices. SignupWithReferrerViewTestCase This test case checks the behavior of the view used for signing up with a referral code. In the setUp() method, a test user (referrer) is created, and the referral code is obtained from their profile. The test_signup_with_referrer_view_GET() method sends a GET request to the view using the referral code and checks that the response status code is 200 and the 'signup.html\u0026rsquo; template is used. The test_signup_with_referrer_view_POST() method sends a POST request with valid user data and the referral code. It checks that the response status code is 302, indicating a successful redirect, the User object count is 2, and the referrer of the test user is the referrer created in setUp(). Additionally, it checks that the bonus of the referrer is now 100, and the response redirects to the \u0026lsquo;login\u0026rsquo; view. SignupViewTestCase This test case checks the behavior of the view used for normal user sign up. The setUp() method initializes the Client object, the URL of the view, and valid user data. The test_signup_view_get() method sends a GET request to the view and checks that the response status code is 200, the \u0026lsquo;signup.html\u0026rsquo; template is used, and the context form is of type CustomUserCreationForm. The test_signup_view_post_invalid_data() method sends a POST request with invalid user data, and it checks that the response status code is 200, the \u0026lsquo;signup.html\u0026rsquo; template is used, and the form is of type CustomUserCreationForm. Additionally, it checks that no User objects have been created. LogoutViewTestCase This test case checks the behavior of the view used for user logout. The setUp() method initializes the Client object, creates a test user, and logs them in. The test_logout_view() method sends a GET request to the home page and checks that the response status code is 200 and the \u0026lsquo;24 Hour Price Changes\u0026rsquo; element is present. It then sends a GET request to the logout view and checks that the response status code is 302. Finally, it sends another GET request to the home page and checks that the response status code is 200, and the test user\u0026rsquo;s name is not present. LoginViewTestCase This test case checks the behavior of the view used for user login. The setUp() method initializes the Client object, the URL of the view, and creates a test user. The test_login_view_get() method sends a GET request to the view and checks that the response status code is 200, and the 'login.html' template is used. The test_login_view_post_valid_credentials() method sends a POST request with valid user credentials and checks that the response is a successful redirect to the portfolio view, the user object is authenticated, and the user object is the same as the one created in setUp(). The test_login_view_post_invalid_credentials() method sends a POST request with invalid user credentials and checks that the response status code is 200, the \u0026lsquo;login.html\u0026rsquo; template is used, and an error message is displayed. Finally, the tearDown() method deletes the test user object. How to Run Tests All tests are written in the tests.py file in the mainapp folder.\n# to run all tests python manage.py test # to run tests for a specific class python manage.py test -k \u0026lt;class-name\u0026gt; # start coverage coverage run --source=\u0026#39;.\u0026#39; --omit=mainapp\\tests.py manage.py test mainapp # generate coverage report coverage html # check the htmlcov folder and open the index.html file Conclusion This concludes the third and the final part of the series. Here we learned how to write tests for our Django project as well as the TDD approach. We saw how to write tests for models, views, and reverse urls and wrote over 60 test cases for our project achieving 90%+ test coverage.\nThis project was a great learning experience for me. I learned a lot about Django, and I also learned how to use the CoinGecko API. I also learned how to use the unittest module to write tests for my Django project. I hope you enjoyed reading this article. If you have any questions or suggestions, feel free to leave a comment below. Thank you for reading! 😊\n","permalink":"https://atharvashah.netlify.app/posts/tech/django-crypto-app/part3/","summary":"Introduction Welcome to the final part of the 3-part technical tutorial series, where have been building a Django project that enables users to manage their cryptocurrency portfolios. To implement the functionalities and additional features, we\u0026rsquo;ll be utilizing API calls to coingecko or any other cryptocurrency API.\nIn the first part, we set up the project and created the models. In the second part continued off from that point and added all the templates, views and urls and code up the entire crypto project.","title":"Django Crypto App Part 3"},{"content":"Introduction Welcome to the second part of the 3-part technical tutorial series, where we\u0026rsquo;ll be building a Django project that enables users to manage their cryptocurrency portfolios. To implement the functionalities and additional features, we\u0026rsquo;ll be utilizing API calls to coingecko or any other cryptocurrency API.\nIn the previous part, we set up the project and created the models. Now, we will continue off from that point and add the templates, views and urls and code up the entire project. This will be the most complex and detailed part of this series.\nThe code for the entirety of the project can be found here -\u0026gt; Github Repo for Django Crypto App\nSetting up the URLs In Django, URLs are defined in the urls.py file for each app. The URL patterns are matched to a view function that will handle the request/response.\nIn the given code snippet, we can see the import statements for the path and views modules. We are also importing auth_views which is a Django module for handling authentication views. Additionally, we are importing the admin module from Django\u0026rsquo;s contrib package.\nThe urlpatterns list contains all of the URL patterns for our app. Each URL pattern is defined using the path() function, which takes the following parameters:\nroute: A string that contains a URL pattern. view: The view function that should be called when the URL pattern is matched. name: A unique name for the URL pattern. For our project, we have defined URLs for several views:\nhome_view: The default view for our app, accessed at the root URL. login_view, logout_view: Views for user authentication. signup_view, signup_with_referrer_view: Views for user registration. portfolio_view: View for displaying user\u0026rsquo;s portfolio. search_view: View for searching and adding new cryptocurrencies to a user\u0026rsquo;s portfolio. add_to_portfolio_view, delete_from_portfolio_view: Views for adding/deleting cryptocurrencies from a user\u0026rsquo;s portfolio. password_reset: View for resetting the user\u0026rsquo;s password. password_reset_done: View displayed after password reset email is sent. password_reset_confirm: View for confirming the password reset. password_reset_complete: View displayed after the password has been reset. from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path from . import views urlpatterns = [ path(\u0026#34;\u0026#34;, views.home_view, name=\u0026#34;home\u0026#34;), # user authentication path(\u0026#34;login/\u0026#34;, views.login_view, name=\u0026#34;login\u0026#34;), path(\u0026#34;logout/\u0026#34;, views.logout_view, name=\u0026#34;logout\u0026#34;), path(\u0026#34;signup/\u0026#34;, views.signup_view, name=\u0026#34;signup\u0026#34;), path(\u0026#39;signup/\u0026lt;str:referral_code\u0026gt;/\u0026#39;, views.signup_with_referrer_view, name=\u0026#39;signup_with_referrer_view\u0026#39;), # wallet page path(\u0026#34;portfolio/\u0026#34;, views.portfolio_view, name=\u0026#34;portfolio\u0026#34;), # CRUD operations on cryptos path(\u0026#34;search/\u0026#34;, views.search_view, name=\u0026#34;search\u0026#34;), path(\u0026#34;add_to_portfolio/\u0026#34;, views.add_to_portfolio_view, name=\u0026#34;add_to_portfolio\u0026#34;), path(\u0026#39;delete_from_portfolio/\u0026lt;int:pk\u0026gt;/\u0026#39;, views.delete_from_portfolio_view, name=\u0026#39;delete_from_portfolio\u0026#39;), # password reset stuff path(\u0026#39;password_reset/\u0026#39;, auth_views.PasswordResetView.as_view(template_name=\u0026#34;reset/password_reset.html\u0026#34;), name=\u0026#39;password_reset\u0026#39;), path(\u0026#39;password_reset_done/\u0026#39;, auth_views.PasswordResetDoneView.as_view(template_name=\u0026#34;reset/password_reset_done.html\u0026#34;), name=\u0026#39;password_reset_done\u0026#39;), path(\u0026#39;password_reset_confirm/\u0026lt;uidb64\u0026gt;/\u0026lt;token\u0026gt;/\u0026#39;, auth_views.PasswordResetConfirmView.as_view( template_name=\u0026#39;reset/password_reset_confirm.html\u0026#39;), name=\u0026#39;password_reset_confirm\u0026#39;), path(\u0026#39;password_reset_complete/\u0026#39;, auth_views.PasswordResetCompleteView.as_view( template_name=\u0026#39;reset/password_reset_complete.html\u0026#39;), name=\u0026#39;password_reset_complete\u0026#39;), ] Overall, the urlpatterns list provides a clear mapping between URLs and the corresponding views, allowing us to easily navigate and use our web application.\nSetting Up Templates Views and templates are important components of the Model-View-Template (MVT) architecture in Django. Views handle the request/response flow and business logic of the application, while templates provide the presentation layer for the user interface.\nWe will be using some custom CSS and JavaScript files in our templates. These files are located in the static directory of our app. We can import these files using the static template tag in our templates. So go ahead and create a static directory in the main app and add the following files to it:\nstyle.css We will not be covering a ton of CSS explanation since Django is the focus of this article. The content of the style.css file is as follows:\n@import url(\u0026#39;https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700\u0026amp;display=swap\u0026#39;); ::-webkit-scrollbar { width: 10px; } ::-webkit-scrollbar-track { background: #f1f1f1; } ::-webkit-scrollbar-thumb { background: #888; border-radius: 10px; } ::-webkit-scrollbar-thumb:hover { background: #555; } body { overflow-x: hidden !important; color: white !important; font-family: \u0026#39;Roboto\u0026#39;, sans-serif !important; background-color: #130f40 !important; background-image: linear-gradient(315deg, #130f40 0%, #000000 74%) !important; background-repeat: no-repeat !important; background-attachment: fixed !important; background-size: cover !important; min-height: 100vh !important; } .green-arrow { font-size: 18px; color: green } .red-arrow { font-size: 18px; color: red } .flex-container { display: flex; flex-wrap: wrap; justify-content: center; gap: 20px; } .crypto-item { display: flex; flex-direction: row; justify-content: space-between; align-items: center; border: 1px solid gray; padding: 10px; width: 300px; } .crypto-info { margin-left: 10px; } .tt-menu { width: 100%; } .tt-suggestion { padding: 10px; font-size: 16px; cursor: pointer; background-color: #fff; } .tt-suggestion:hover { background-color: #f5f5f5; } .tt-suggestion.tt-cursor { background-color: #f5f5f5; } .typeahead { border-radius: 0; } .custom-nav-logo { font-family: \u0026#39;Roboto\u0026#39;, sans-serif; font-size: 24px; font-weight: 500; } nav { box-shadow: -10px 8px 0px rgb(196 181 253); background: #0f0f0f; color: white; margin-bottom: 50px; position: fixed ; top: 0; width: 100%; z-index: 1; } footer { position: fixed; left: 0; bottom: 0; width: 100%; background-color: rgb(0, 0, 0); color: white; text-align: center; } .referral-code { background-color: #080808; border-radius: 5px; padding: 1rem; margin-bottom: 1rem; border: 1px solid #fff; } .referral-code p { font-size: 1.1rem; } .custom-heading { font-family: \u0026#39;Montserrat\u0026#39;, sans-serif; font-size: 2.5rem; font-weight: 600; letter-spacing: 2px; text-transform: uppercase; text-decoration: underline #fff solid 1px; text-underline-offset: 10px; margin-bottom: 1rem; } .custom-table { text-transform: uppercase; width: 100%; margin-bottom: 1rem; color: #fff; background-color: rgba(255, 255, 255); box-shadow: 10px -8px 0px rgb(253 230 138); } th, td { padding: 0.75rem; vertical-align: middle; border-top: 1px solid rgba(255, 255, 255, 0.1); } th { font-weight: bold; text-transform: uppercase; border-bottom: 5px solid rgb(0, 0, 0) text-align: center; font-family: \u0026#39;Roboto\u0026#39;, sans-serif; } tbody tr:hover { background-color: rgba(255, 255, 255, 0.1); } .alert { border-radius: 2px !important; color: #fff !important; font-weight: bold !important; font-size: 1rem !important; letter-spacing: 0.05em !important; font-weight: 300 !important; padding: 0.5rem 1rem !important; } .alert-success { background-color: #007f1e; color: rgb(0, 0, 0) !important; font-weight: bold !important; } .alert-info { background-color: #009cb4; color: rgb(0, 0, 0) !important; font-weight: bold !important; } .alert-danger { background-color: #520008 !important; color: rgb(0, 0, 0) !important; font-weight: bold !important; } .fancy-color { background-color: #4158D0; background-image: linear-gradient(43deg, #4158D0 0%, #C850C0 46%, #FFCC70 100%); } .custom-title { margin-left: -175px !important; margin-top: -30px !important; margin-bottom: 50px !important; padding: 0.5rem 0.5rem !important; width: fit-content !important; background: rgba(255, 255, 255, 0.9); } .welcome-user-text { font-size: 1rem !important; font-weight: 500 !important; letter-spacing: 0.05em !important; } Remember we defined the urlpatterns list in the urls.py file? Each URL pattern in the list is mapped to a view function. For example, the home_view function is mapped to the root URL of our app. And we also made a templates folder in our app directory. This is where we will store all of our HTML templates and link them to the corresponding views.\nJust to give you a peek into the structure of our app, here is a screenshot of the templates folder:\nWe will be creating the following templates in our app so you can go ahead and make empty HTML files for them. Now let\u0026rsquo;s start writing our views and templates.\nBefore writing the views, let us first create a base.html file in the templates folder. This file will contain the common HTML code that will be used in all of our templates. We will be using the Bootstrap CSS framework for styling our templates. So we will add the Bootstrap CDN link in the base.html file. We will also add the CSS code that we wrote in the style.css file in the base.html file. The base.html file will look like this:\n{% load static %} \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, shrink-to-fit=no\u0026#34;\u0026gt; \u0026lt;!--Custom CSS--\u0026gt; \u0026lt;link href=\u0026#34;{% static \u0026#39;css/custom.css\u0026#39; %}\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;link href=\u0026#34;{% static \u0026#39;css/style.css\u0026#39; %}\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;!-- Bootstrap CSS --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\u0026#34; integrity=\u0026#34;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;link href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;!--Clipboard--\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.11/clipboard.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--Sweet Alert--\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/sweetalert/dist/sweetalert.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;title\u0026gt;Crypto App | {% block title %}{% endblock title %}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {% include \u0026#39;navbar.html\u0026#39; %} \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; {% block content %} {% endblock content %} \u0026lt;/div\u0026gt; {% include \u0026#39;footer.html\u0026#39; %} {% block scripts %} {% endblock scripts %} \u0026lt;!-- Optional JavaScript --\u0026gt; \u0026lt;!-- jQuery first, then Popper.js, then Bootstrap JS --\u0026gt; \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.3.1.slim.min.js\u0026#34; integrity=\u0026#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\u0026#34; integrity=\u0026#34;sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\u0026#34; integrity=\u0026#34;sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Now, since we are referencing the navbar.html and footer.html files in the base.html file, we need to create these files in the templates folder. The navbar.html file will contain the navigation bar of our app and the footer.html file will contain the footer of our app. The navbar.html file will look like this:\n\u0026lt;nav class=\u0026#34;navbar navbar-expand-md\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-brand text-light my-2 my-sm-0 custom-nav-logo\u0026#34; href=\u0026#34;{% url \u0026#39;home\u0026#39; %}\u0026#34;\u0026gt;Crypto App\u0026lt;/a\u0026gt; \u0026lt;button class=\u0026#34;navbar-toggler\u0026#34; type=\u0026#34;button\u0026#34; data-toggle=\u0026#34;collapse\u0026#34; data-target=\u0026#34;#navbarNav\u0026#34; aria-controls=\u0026#34;navbarNav\u0026#34; aria-expanded=\u0026#34;false\u0026#34; aria-label=\u0026#34;Toggle navigation\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;navbar-toggler-icon\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;div class=\u0026#34;collapse navbar-collapse\u0026#34; id=\u0026#34;navbarNav\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;navbar-nav mr-auto\u0026#34;\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;navbar-nav\u0026#34;\u0026gt; {% if user.is_authenticated %} \u0026lt;div class=\u0026#34;btn-group\u0026#34; role=\u0026#34;group\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;btn btn-primary my-2 my-sm-0 mr-2\u0026#34; href=\u0026#34;{% url \u0026#39;portfolio\u0026#39; %}\u0026#34;\u0026gt;View My Wallet\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;btn btn-danger my-2 my-sm-0 mr-2\u0026#34; href=\u0026#34;{% url \u0026#39;logout\u0026#39; %}\u0026#34;\u0026gt;Logout\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {% else %} \u0026lt;div class=\u0026#34;btn-group\u0026#34; role=\u0026#34;group\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;btn btn-primary my-2 my-sm-0 mr-2\u0026#34; href=\u0026#34;{% url \u0026#39;login\u0026#39; %}\u0026#34;\u0026gt;Login\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;btn btn-success my-2 my-sm-0\u0026#34; href=\u0026#34;{% url \u0026#39;signup\u0026#39; %}\u0026#34;\u0026gt;Signup\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {% endif %} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; The footer.html file will look like this:\n{% load static %} \u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;row justify-content-center\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-lg-12 col-md-12 col-sm-12 col-xs-12\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;copy-right text-center\u0026#34;\u0026gt; \u0026lt;p\u0026gt;© 2023 Crypto App. Developed By \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;text-light\u0026#34;\u0026gt;Atharva Shah\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; Now, the final step for the template setup is to write the alerts.html file. This file will contain the code for displaying alerts to the user. In Django, alerts are messages that can be displayed to users after certain events or actions have occurred, such as a successful login or a failed form submission. They are a way to provide feedback to the user about what has happened, and can be used to convey important information or instructions.\nDjango provides a built-in messaging framework that makes it easy to use alerts in your application. This framework allows you to create different types of messages, such as success, warning, or error messages, and to customize the way they are displayed.\nThe alerts.html file will look like this:\n{% if messages %} {% for message in messages %} \u0026lt;div class=\u0026#34;alert alert-{{message.tags}} alert-dismissible fade show w-50 d-flex justify-content-center align-items-center ml-auto mr-auto \u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; {{ message }} \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;close\u0026#34; data-dismiss=\u0026#34;alert\u0026#34; aria-label=\u0026#34;Close\u0026#34;\u0026gt; \u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;times;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; {% endfor %} {% endif %} Setting Up Views To use views and templates in Django, we first need to import the necessary modules. The requests module is used for sending HTTP requests to external APIs. The auth module is used for user authentication related functionality. The messages module is used for displaying messages to the user. The decorators module is used for adding functionality to views based on certain conditions, such as requiring the user to be logged in or having certain permissions. The forms module is used for creating HTML forms that map to Django models. The models module is used for defining the database schema and ORM of the application.\nWe can import these modules using the following code snippet in views.py since we will be using them in our views:\nimport requests from django.contrib import auth, messages from django.contrib.auth import authenticate, login, logout from django.contrib.auth.decorators import login_required, user_passes_test from django.contrib.auth.forms import AuthenticationForm, UserCreationForm from django.contrib.auth.hashers import make_password from django.contrib.auth.models import User from django.contrib.auth.tokens import default_token_generator from django.core.exceptions import PermissionDenied from django.db import IntegrityError from django.http import HttpResponse, HttpResponseNotAllowed from django.shortcuts import redirect, render from django.template.defaultfilters import slugify from django.utils.http import urlsafe_base64_decode from .forms import CustomUserCreationForm from .models import Cryptocurrency, Portfolio, Profile, Referal Once we have imported these modules, we can start writing our views and templates to create the desired functionality for our application.\n🚨 Please note that most of these views depend on each other so we recommend that you follow the order in which they are presented here. and test them at the very end since they are all interconnected and you may get errors if the dependent views/templates are not created yet.\nSignup Let\u0026rsquo;s start with the signup_view function. This view is mapped to the /signup/ URL pattern in the urls.py file. The signup_view function is responsible for displaying the signup form to the user and creating a new user account if the form is valid.\ndef signup_view(request): # check if user is already logged in if request.user.is_authenticated: return redirect(\u0026#39;portfolio\u0026#39;) if request.method == \u0026#39;POST\u0026#39;: form = CustomUserCreationForm(request.POST) if form.is_valid(): user = form.save(commit=False) user.password = make_password(form.cleaned_data[\u0026#39;password1\u0026#39;]) user.email = form.cleaned_data[\u0026#39;email\u0026#39;] user.save() messages.success(request, \u0026#39;You have successfully signed up!\u0026#39;, extra_tags=\u0026#39;success\u0026#39;) return redirect(\u0026#39;login\u0026#39;) else: form = CustomUserCreationForm() return render(request, \u0026#39;signup.html\u0026#39;, {\u0026#39;form\u0026#39;: form}) # block access to signup page if user is already logged in def signup_with_referrer_view(request, referral_code): # check if user is already logged in if request.user.is_authenticated: return redirect(\u0026#39;portfolio\u0026#39;) try: # get the User Profile of the referrer referrer = User.objects.get(profile__referral_code=referral_code) except User.DoesNotExist: # show error message if referrer does not exist return HttpResponse(\u0026#34;Referrer does not exist\u0026#34;) if request.method == \u0026#39;POST\u0026#39;: form = CustomUserCreationForm(request.POST) if form.is_valid(): user = form.save(commit=False) user.password = make_password(form.cleaned_data[\u0026#39;password1\u0026#39;]) user.email = form.cleaned_data[\u0026#39;email\u0026#39;] user.save() # create a referral instance referral = Referal.objects.create(user=user, referrer=referrer) referral.save() if referrer is not None: referrer.profile.bonus += 100 # add referral bonus to referrer referrer.profile.save() messages.success(request, f\u0026#39;{referrer.username} recieved a bonus of 100 points from you because you signed up using their referral link!\u0026#39;) messages.success(request, \u0026#39;You have successfully signed up!\u0026#39;) return redirect(\u0026#39;login\u0026#39;) else: form = CustomUserCreationForm() return render(request, \u0026#39;signup.html\u0026#39;, {\u0026#39;form\u0026#39;: form, \u0026#39;referrer\u0026#39;: referrer}) These are two views that handle user signup with and without a referral code.\nThe first view is signup_view. It checks whether the user is already logged in. If the user is logged in, then they will be redirected to their portfolio page. If the request method is POST, it will validate the user\u0026rsquo;s input, create a new user, and save them in the database. The password is hashed before it is saved. If the form is not valid, it will render the same template with the form and display the errors. If the request method is not POST, then the view will render the signup form. In both cases, the view will render the signup.html template with the form.\nThe second view is signup_with_referrer_view. It first checks if the user is already logged in. If they are, they will be redirected to their portfolio page. Then it will try to find the referrer user using the referral code passed in the URL. If the referrer doesn\u0026rsquo;t exist, it will display an error message. If the request method is POST, it will validate the form input and create a new user and save it in the database. It will also create a new referral instance and save it in the database. The referral instance will link the new user to the referrer. It will also add a referral bonus of 100 points to the referrer\u0026rsquo;s profile. Finally, it will redirect the user to the login page with a success message. If the request method is not POST, then the view will render the signup form with the referrer\u0026rsquo;s username displayed on the page. In both cases, the view will render the signup.html template with the form and the referrer\u0026rsquo;s username (if present).\nNow, the signup.html template will be rendered by both views. It will display the signup form to the user. To make the form and render it in the template, we will use the Django forms module. We will create a new file called forms.py in the cryptoapp directory and add the following code to it.\nfrom django import forms from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.models import User class CustomUserCreationForm(UserCreationForm): username = forms.CharField(required=True, label=\u0026#39;Username\u0026#39;, help_text=\u0026#39;Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.\u0026#39;, widget=forms.TextInput(attrs={\u0026#39;class\u0026#39;: \u0026#39;form-control\u0026#39;})) email = forms.EmailField(required=True, label=\u0026#39;Email\u0026#39;, help_text=\u0026#39;Required. Enter a valid email address.\u0026#39;, widget=forms.TextInput(attrs={\u0026#39;class\u0026#39;: \u0026#39;form-control\u0026#39;})) password1 = forms.CharField(required=True, label=\u0026#39;Password\u0026#39;, help_text=\u0026#39;Required. Enter a valid password.\u0026#39;, widget=forms.PasswordInput(attrs={\u0026#39;class\u0026#39;: \u0026#39;form-control\u0026#39;})) password2 = forms.CharField(required=True, label=\u0026#39;Password confirmation\u0026#39;, help_text=\u0026#39;Enter the same password as before, for verification.\u0026#39;, widget=forms.PasswordInput(attrs={\u0026#39;class\u0026#39;: \u0026#39;form-control\u0026#39;})) class Meta: model = User fields = [\u0026#39;username\u0026#39;, \u0026#39;email\u0026#39;, \u0026#39;password1\u0026#39;, \u0026#39;password2\u0026#39;] Now that the form is ready, we can render it in the signup.html template. We will create a new file called signup.html in the templates directory and add the following code to it.\n{% extends \u0026#39;base.html\u0026#39; %} {% block title %} Sign Up {% endblock title %} {% block content %} \u0026lt;h1 class=\u0026#34;mb-4\u0026#34;\u0026gt;Signup\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026#34;post\u0026#34; class=\u0026#34;my-4 p-4 border border-dark rounded\u0026#34;\u0026gt; {% csrf_token %} \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;username\u0026#34;\u0026gt;Username\u0026lt;/label\u0026gt; {{ form.username }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;Email address\u0026lt;/label\u0026gt; {{ form.email }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;password1\u0026#34;\u0026gt;Password\u0026lt;/label\u0026gt; {{ form.password1 }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;password2\u0026#34;\u0026gt;Confirm Password\u0026lt;/label\u0026gt; {{ form.password2 }} \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary mt-3\u0026#34;\u0026gt;Signup\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; {% if form.errors %} \u0026lt;div class=\u0026#34;alert alert-danger mt-3 mb-5\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;Error:\u0026lt;/strong\u0026gt; {{ form.errors }} \u0026lt;/div\u0026gt; {% endif %} \u0026lt;div class=\u0026#34;mt-3\u0026#34;\u0026gt; Already have an account? \u0026lt;a href=\u0026#34;{% url \u0026#39;login\u0026#39; %}\u0026#34; class=\u0026#34;text-primary font-weight-bold\u0026#34;\u0026gt;Login\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; {% endblock %} This is a Django template for the sign-up page that extends the base template. It displays a sign-up form with fields for username, email, password and confirm password. If there are any form errors, they are displayed in an alert box. It also includes a link to the login page. The template uses Django\u0026rsquo;s template language to display the form fields and errors.\nSince after the user signup we want to make a profile for them, we will create a new file called signals.py in the cryptoapp directory and add the following code to it.\nimport shortuuid from django.contrib.auth.models import User from django.db.models.signals import post_save from django.dispatch import receiver from .models import Profile # This file is used to generate a referral code for each user as soon as they sign up. def generate_referral_code(): return shortuuid.ShortUUID().random(length=10) @receiver(post_save, sender=User) def create_profile(sender, instance, created, **kwargs): if created: profile = Profile.objects.create(user=instance, referral_code=generate_referral_code()) profile.save() This signal code generates a referral code for a user as soon as they sign up. It does this by listening for the \u0026quot;post_save\u0026quot; signal sent by the User model. When a new User instance is created, this signal triggers the \u0026quot;create_profile\u0026quot; function which creates a Profile instance for that user and generates a unique referral code using shortuuid library. This generated referral code is then saved to the Profile instance.\nNow to register this signal, we will change the apps.py file.\nfrom django.apps import AppConfig class MainappConfig(AppConfig): default_auto_field = \u0026#34;django.db.models.BigAutoField\u0026#34; name = \u0026#34;mainapp\u0026#34; def ready(self): import mainapp.signals Login Screen The view for the login page will be similar to the signup view. In views.py continue to add the following code.\ndef login_view(request): # check if user is already logged in if request.user.is_authenticated: return redirect(\u0026#39;portfolio\u0026#39;) if request.method == \u0026#39;POST\u0026#39;: form = AuthenticationForm(request, data=request.POST) if form.is_valid(): username = form.cleaned_data.get(\u0026#39;username\u0026#39;) raw_password = form.cleaned_data.get(\u0026#39;password\u0026#39;) user = authenticate(request, username=username, password=raw_password) if user is not None: login(request, user) return redirect(\u0026#39;portfolio\u0026#39;) else: messages.error(request, \u0026#34;Invalid username or password.\u0026#34;, extra_tags=\u0026#39;danger\u0026#39;) else: form = AuthenticationForm() return render(request, \u0026#39;login.html\u0026#39;, {\u0026#39;form\u0026#39;: form}) @login_required(login_url=\u0026#34;login\u0026#34;) def logout_view(request): logout(request) messages.success(request, \u0026#39;You have successfully logged out!\u0026#39;) return redirect(\u0026#39;home\u0026#39;) These are two views related to user authentication in a Django web application.\nlogin_view handles the user login process. It checks if the user is already logged in, and if not, it accepts a POST request with login credentials (username and password) from a form, validates them using Django\u0026rsquo;s built-in AuthenticationForm form, and logs the user in if they are authenticated. If the form is invalid, it displays an error message. If the request is not a POST request, it displays the login form.\nlogout_view handles the user logout process. It logs out the user using Django\u0026rsquo;s logout function, displays a success message, and redirects the user to the home page. This view requires the user to be logged in, and if they are not, it redirects them to the login page specified in the login_url argument of the login_required decorator.\nThe html template for the login page is similar to the signup page. Create a new file called login.html in the templates directory and add the following code to it.\n{% extends \u0026#39;base.html\u0026#39; %} {% block title %} Login {% endblock title %} {% block content %} \u0026lt;h1\u0026gt;Login\u0026lt;/h1\u0026gt; {% for message in messages %} \u0026lt;p class=\u0026#34;alert alert-{{ message.tags }}\u0026#34;\u0026gt;{{ message }}\u0026lt;/p\u0026gt; {% endfor %} \u0026lt;form method=\u0026#34;post\u0026#34; class=\u0026#34;my-4 p-4 border border-dark rounded\u0026#34;\u0026gt; {% csrf_token %} \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;username\u0026#34;\u0026gt;Username\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;password\u0026#34;\u0026gt;Password\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary btn-block my-2\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt;Don\u0026#39;t have an account? \u0026lt;a href=\u0026#34;{% url \u0026#39;signup\u0026#39; %}\u0026#34;\u0026gt;Register\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Forgot your password? \u0026lt;a href=\u0026#34;{% url \u0026#39;password_reset\u0026#39; %}\u0026#34;\u0026gt;Reset Password\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; {% endblock %} Now that the login view is ready, we can also take care of the forgot password functionality.\nForgot Password Page Password Reset Email For convience, we will group the forgot password view templates and save them in the reset folder inside the templates directory. Create a new file called password_reset.html in the reset directory and add the following code to it.\n{% extends \u0026#34;base.html\u0026#34; %} {% load crispy_forms_tags %} {% block content %} \u0026lt;div class=\u0026#34;content-section\u0026#34;\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34;\u0026gt; {% csrf_token %} \u0026lt;fieldset class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;legend class=\u0026#34;border-bottom mb-4\u0026#34;\u0026gt;Reset Password\u0026lt;/legend\u0026gt; {{ form|crispy }} \u0026lt;/fieldset\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-outline-info\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Request Password Reset\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; {% endblock content %} Now, make a file called password_reset_done.html. It will show a message that an email has been sent to the user\u0026rsquo;s email ID.\n{% extends \u0026#34;base.html\u0026#34; %} {% block content %} \u0026lt;div class=\u0026#34;alert alert-info\u0026#34;\u0026gt; An email has been sent with instructions to reset your password \u0026lt;/div\u0026gt; {% endblock content %} Once the user clicks this link he will be redirected to the password reset page. Here he can enter his new password and confirm it. So for this purpose\nNow,make a file called password_reset_confirm.html. It will prompt for the new password.\n{% extends \u0026#34;base.html\u0026#34; %} {% load crispy_forms_tags %} {% block content %} \u0026lt;div class=\u0026#34;content-section\u0026#34;\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34;\u0026gt; {% csrf_token %} \u0026lt;fieldset class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;legend class=\u0026#34;border-bottom mb-4\u0026#34;\u0026gt;Reset Password\u0026lt;/legend\u0026gt; {{ form|crispy }} \u0026lt;/fieldset\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-outline-info\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Reset Password\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; {% endblock content %} Make a final file called password_reset_complete.html. It will show a message that the password has been changed successfully.\n{% extends \u0026#34;base.html\u0026#34; %} {% block content %} \u0026lt;div class=\u0026#34;alert alert-info\u0026#34;\u0026gt; Your password has been set. \u0026lt;/div\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;login\u0026#39; %}\u0026#34;\u0026gt;Sign In Here\u0026lt;/a\u0026gt; {% endblock content %} Password Reset Success Remember we need not define any custom views here since Django provides us with the default views for password reset. Please refer the urls.py file.\nHome Page Now let us focus on the home page. We will show the top 10 cryptocurrencies on the home page. We will use the CoinGecko API to fetch the data.\nThe view for this page will be:\ndef home_view(request): # get the top 10 crypto currencies by market cap top_10_crypto_url_global = \u0026#39;https://api.coingecko.com/api/v3/coins/markets?vs_currency=USD\u0026amp;order=market_cap_desc\u0026amp;per_page=10\u0026amp;page=1\u0026amp;sparkline=true\u0026#39; top_10_crypto_data_global = requests.get(top_10_crypto_url_global).json() # check if user is logged in if request.user.is_authenticated: # get user\u0026#39;s crypto currencies user_cryptocurrencies = Cryptocurrency.objects.filter(user=request.user) user_portfolio = Portfolio.objects.filter(user=request.user).first() # get the prices and price changes for user\u0026#39;s cryptocurrencies names = [crypto.name for crypto in user_cryptocurrencies] symbols = [crypto.symbol for crypto in user_cryptocurrencies] ids = [crypto.id_from_api for crypto in user_cryptocurrencies] prices=[] # NOTE: Only showing the price change for the last 24 hours for now and not the percentage change to reduce the number of api calls. Only 10-20 api calls per minute are allowed for free users. Otherwise, I could have used the /coins/{id}/market_chart?vs_currency=usd\u0026amp;days=1 endpoint to get the price change for the last 24 hours and calculate the percentage change from that. for crytpo_id in ids: prices_url = f\u0026#39;https://api.coingecko.com/api/v3/simple/price?ids={crytpo_id}\u0026amp;vs_currencies=usd\u0026amp;include_24hr_change=true\u0026#39; prices_data = requests.get(prices_url).json() price_change = prices_data[crytpo_id][\u0026#39;usd_24h_change\u0026#39;] prices.append(price_change) # make a dictionary out of the names and prices crypto_price_changes = dict(zip(names, prices)) context = { \u0026#39;top_10_crypto_data_global\u0026#39;: top_10_crypto_data_global, \u0026#39;user_cryptocurrencies\u0026#39;: user_cryptocurrencies, \u0026#39;user_portfolio\u0026#39;: user_portfolio, \u0026#39;crypto_price_changes\u0026#39;: crypto_price_changes, } else: context = {\u0026#39;top_10_crypto_data_global\u0026#39;: top_10_crypto_data_global} return render(request, \u0026#39;home.html\u0026#39;, context) The function does the following:\nSends a GET request to the Coingecko API to retrieve data for the top 10 cryptocurrencies by market capitalization in USD. Checks if the user is authenticated. If the user is authenticated, it retrieves the user\u0026rsquo;s cryptocurrencies from the database and makes an API call to get their prices and price changes for the last 24 hours. Creates a dictionary mapping the cryptocurrencies\u0026rsquo; names to their price changes. Renders the home page template with a context dictionary containing the top 10 cryptocurrencies data, user\u0026rsquo;s cryptocurrencies, user\u0026rsquo;s portfolio, and cryptocurrencies\u0026rsquo; price changes. The view function handles the case where the user is not authenticated, in which case it only renders the home page template with the top 10 cryptocurrencies data.\nThe json response for the CoinGecko API can be found here.\nCreate a new file called home.html in the templates directory and add the following code to it.\n{% extends \u0026#39;base.html\u0026#39; %} {% block title %} Home {% endblock title %} {% block content %} \u0026lt;!--Print messages--\u0026gt; {% if messages %} {% for message in messages %} \u0026lt;div class=\u0026#34;alert alert-success alert-dismissible fade show\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; {{ message }} \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;close\u0026#34; data-dismiss=\u0026#34;alert\u0026#34; aria-label=\u0026#34;Close\u0026#34;\u0026gt; \u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;times;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; {% endfor %} {% endif %} {% if user.is_authenticated %} \u0026lt;div class=\u0026#34;row justify-content-left custom-title\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;text-uppercase text-primary welcome-user-text\u0026#34;\u0026gt;Welcome {{ user.username | capfirst }} \u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; {% endif %} \u0026lt;!--SEARCH BAR--\u0026gt; \u0026lt;div class=\u0026#34;container mt-5 mb-5\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row justify-content-center\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;text-center custom-heading\u0026#34;\u0026gt;Search Cryptocurrency\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row mt-3 justify-content-center\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-6 col-lg-4\u0026#34;\u0026gt; \u0026lt;form action=\u0026#34;{% url \u0026#39;search\u0026#39; %}\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; {% csrf_token %} \u0026lt;div class=\u0026#34;input-group\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;form-control\u0026#34; type=\u0026#34;text\u0026#34; placeholder=\u0026#34;Search cryptocurrencies...\u0026#34; name=\u0026#34;search_query\u0026#34; required\u0026gt; \u0026lt;div class=\u0026#34;input-group-append\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!--GLOBAL CRYPTO CURRENCIES--\u0026gt; \u0026lt;div class=\u0026#34;row justify-content-center\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;text-center mt-5 mb-0 custom-heading\u0026#34;\u0026gt; Top 10 CryptoCurrency Rankings \u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;flex-container\u0026#34;\u0026gt; {% if top_10_crypto_data_global %} {% for obj in top_10_crypto_data_global %} \u0026lt;div class=\u0026#34;crypto-item\u0026#34;\u0026gt; \u0026lt;img src={{obj.image}} height=\u0026#39;70\u0026#39;\u0026gt; \u0026lt;div class=\u0026#34;crypto-info\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;{{obj.name}}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Rank\u0026lt;/b\u0026gt;: {{obj.market_cap_rank}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Market\u0026lt;/b\u0026gt; cap: {{obj.market_cap}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Price\u0026lt;/b\u0026gt;: {{obj.current_price}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Price Change 24H\u0026lt;/b\u0026gt;: {{obj.price_change_24h|floatformat:5 }} {% if obj.price_change_percentage_24h \u0026gt; 0 %} \u0026lt;i class=\u0026#34;fa fa-arrow-up green-arrow\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; {% else %} \u0026lt;i class=\u0026#34;fa fa-arrow-down red-arrow\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; {% endif %} \u0026lt;/p\u0026lt;b\u0026gt; \u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Price Change 24H (%)\u0026lt;/b\u0026gt;: {{obj.price_change_percentage_24h|floatformat:3 }} {% if obj.price_change_percentage_24h \u0026gt; 0 %} \u0026lt;i class=\u0026#34;fa fa-arrow-up green-arrow\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; {% else %} \u0026lt;i class=\u0026#34;fa fa-arrow-down red-arrow\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; {% endif %} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endfor %} {% else %} \u0026lt;h3\u0026gt;No data\u0026lt;/h3\u0026gt; {% endif %} \u0026lt;/div\u0026gt; \u0026lt;!--USER CRYPTO CURRENCIES--\u0026gt; {% if user.is_authenticated %} \u0026lt;div class=\u0026#34;row justify-content-center\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;text-center mt-5 mb-3 custom-heading\u0026#34;\u0026gt;24H Summary of Your Cryptos \u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; {% if user_cryptocurrencies %} \u0026lt;div class=\u0026#34;table-responsive\u0026#34;\u0026gt; \u0026lt;table class=\u0026#34;table table-striped table-bordered custom-table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;#\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Owned\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Price Shift\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; {% for k, v in crypto_price_changes.items %} \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ forloop.counter }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ k }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ v | floatformat:5}} {% if v \u0026gt; 0 %} \u0026lt;i class=\u0026#34;fa fa-arrow-up green-arrow\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; {% else %} \u0026lt;i class=\u0026#34;fa fa-arrow-down red-arrow\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; {% endif %} \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {% endfor %} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; {% else %} \u0026lt;h3 class=\u0026#34;text-center alert alert-danger\u0026#34;\u0026gt;No Cryptocurrencies added to wallet. Use the search bar above. \u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; {% endif %} {% endif %} \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; {% endblock content %} {% block scripts %} {% endblock scripts %} This Django template is used to display a cryptocurrency dashboard with two sections: global top 10 cryptocurrencies and user\u0026rsquo;s owned cryptocurrencies with their price changes in the last 24 hours. It also includes a search bar to find specific cryptocurrencies. The logic involves checking if the user is authenticated, displaying data using a for loop, and using conditional statements to display appropriate messages and symbols.\nAdd Currency / Search Result Page Let us move to the search page which can be accessed via looking up a cryptocurrency in the home page search box at the top. Add the following view:\n@login_required(login_url=\u0026#34;login\u0026#34;) def search_view(request): if request.method != \u0026#39;POST\u0026#39;: # return HTTP status code 405 if the request method is not POST along with a message return HttpResponseNotAllowed([\u0026#39;POST\u0026#39;], \u0026#39;Only POST requests are allowed for this view. Go back and search a cryptocurrency.\u0026#39;) if not (search_query := request.POST.get(\u0026#39;search_query\u0026#39;)): return HttpResponse(\u0026#39;No crypto currency found based on your search query.\u0026#39;) api_url = f\u0026#39;https://api.coingecko.com/api/v3/search?query={search_query}\u0026#39; response = requests.get(api_url) search_results = response.json() try: data = search_results[\u0026#39;coins\u0026#39;][0] except IndexError: return HttpResponse(\u0026#39;No crypto currency found based on your search query.\u0026#39;) coin_id = data[\u0026#39;id\u0026#39;] image = data[\u0026#39;large\u0026#39;] symbol = data[\u0026#39;symbol\u0026#39;] market_cap = data[\u0026#39;market_cap_rank\u0026#39;] # check if the crypto currency is already in the users portfolio and pass that information to the template current_user = request.user is_already_in_portfolio = False user_cryptocurrencies = Cryptocurrency.objects.filter(user=current_user) for cryptocurrency in user_cryptocurrencies: if cryptocurrency.name.lower() == coin_id.lower(): is_already_in_portfolio = True context = { \u0026#39;data\u0026#39;: data, \u0026#39;coin_id\u0026#39;: coin_id, \u0026#39;image\u0026#39;: image, \u0026#39;symbol\u0026#39;: symbol, \u0026#39;market_cap\u0026#39;: market_cap, \u0026#39;is_already_in_portfolio\u0026#39;: is_already_in_portfolio, } return render(request, \u0026#39;search.html\u0026#39;, context) @login_required(login_url=\u0026#34;login\u0026#34;) def add_to_portfolio_view(request): if request.method != \u0026#39;POST\u0026#39;: return HttpResponse(\u0026#39;Need a crypto currency to add to your portfolio. Go back to the home page and search for a crypto currency.\u0026#39;) # get values from the form coin_id = request.POST.get(\u0026#39;id\u0026#39;) quantity = request.POST.get(\u0026#39;quantity\u0026#39;) print(coin_id) # get the crypto currency data from the coingecko api based on the coin id api_url = f\u0026#39;https://api.coingecko.com/api/v3/coins/{coin_id}\u0026#39; response = requests.get(api_url) data = response.json() print(data) # store the name, symbol, current price, and market cap rank of the crypto currency user = request.user name = data[\u0026#39;name\u0026#39;] id_from_api = data[\u0026#39;id\u0026#39;] symbol = data[\u0026#39;symbol\u0026#39;] current_price = data[\u0026#39;market_data\u0026#39;][\u0026#39;current_price\u0026#39;][\u0026#39;usd\u0026#39;] try: # save the crypto currency to the database crypto_currency = Cryptocurrency.objects.create( user = user, name= name, id_from_api= id_from_api, symbol= symbol, quantity= quantity, current_price=current_price, ) except IntegrityError: crypto_currency = Cryptocurrency.objects.get(user=user, name=name) crypto_currency.quantity += int(quantity) crypto_currency.save() # calculate the total value of the crypto currency total_value = int(quantity) * int(current_price) # save the total value of the crypto currency to the database in the portfolio model # check if the user already has a portfolio if Portfolio.objects.filter(user=user).exists(): portfolio = Portfolio.objects.get(user=user) portfolio.total_value += total_value else: portfolio = Portfolio(user=user, total_value=total_value) portfolio.save() messages.success(request, f\u0026#39;{name} has been added to your portfolio.\u0026#39;) # if all the above steps are successful, redirect the user to the portfolio page return redirect(\u0026#39;portfolio\u0026#39;) The code provided consists of two Django views: search_view and add_to_portfolio_view. Both views require users to be logged in before accessing them, which is enforced by the @login_required decorator.\nThe search_view allows users to search for a cryptocurrency by sending a POST request to the view with a search query. The view then queries the Coingecko API with the search query to retrieve data on the cryptocurrency. If the query returns a result, the view extracts relevant information from the response and renders a template with the retrieved data.\nIf the user has already added the searched cryptocurrency to their portfolio, the view passes that information to the template to inform the user.\nThe add_to_portfolio_view is responsible for adding a cryptocurrency to the user\u0026rsquo;s portfolio. The view expects a POST request with the cryptocurrency ID and quantity. Once received, the view queries the Coingecko API to retrieve data on the cryptocurrency and saves it to the database. If the cryptocurrency already exists in the user\u0026rsquo;s portfolio, the view updates the quantity. The view then calculates the total value of the cryptocurrency based on the current price and quantity and saves it to the user\u0026rsquo;s portfolio. Finally, the view redirects the user to their portfolio page.\nIf the user tries to access the view with a GET request, the view returns an error message.\nBoth views make use of the requests library to query the Coingecko API and the HttpResponse and HttpResponseNotAllowed classes to send HTTP responses to the user. The views also make use of the Django messages framework to send success messages to the user.\nNow, the template for the search page -\u0026gt; search.html:\n{% extends \u0026#39;base.html\u0026#39; %} {% block title %} Search Results {% endblock title %} {% block content %} \u0026lt;div class=\u0026#34;text-white border-0 col-md-8 mx-auto mt-5\u0026#34;\u0026gt; \u0026lt;!-- NOTIFY USER IF THEY HAVE ALREADY ADDED THIS CURRENCY IN THEIR WALLET. ANY NEW ADDITIONS WILL BE INCREMENTED, NOT OVERWRITTEN. --\u0026gt; {% if is_already_in_portfolio %} \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;card-text text-uppercase mb-0\u0026#34;\u0026gt;\u0026lt;small\u0026gt;{{ coin_id }} is already in your portfolio.\u0026lt;/small\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;card-text\u0026#34;\u0026gt;\u0026lt;small\u0026gt;Any changes to the quantity will be reflected in your portfolio. Units will be added to the existing quantity.\u0026lt;/small\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;hr class=\u0026#34;border-white\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; {% endif %} \u0026lt;div class=\u0026#34;card mb-3 text-center border-0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row justify-content-center align-items-center p-5\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ image }}\u0026#34; height=\u0026#34;150\u0026#34; width=\u0026#34;150\u0026#34; class=\u0026#34;img-fluid\u0026#34; alt=\u0026#34;{{ symbol }}\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-body text-dark\u0026#34;\u0026gt; \u0026lt;h5 class=\u0026#34;card-title text-uppercase mb-2\u0026#34;\u0026gt;\u0026lt;b\u0026gt;{{ coin_id }}\u0026lt;/b\u0026gt;\u0026lt;p class=\u0026#34;card-subtitle mb-2 text-muted\u0026#34;\u0026gt;\u0026lt;b\u0026gt;[{{ symbol }}]\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;/h5\u0026gt; \u0026lt;p class=\u0026#34;card-text text-uppercase mb-2\u0026#34;\u0026gt;\u0026lt;small\u0026gt;\u0026lt;b\u0026gt;MARKET CAP:\u0026lt;/b\u0026gt; {{ market_cap }}\u0026lt;/small\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;form action=\u0026#34;{% url \u0026#39;add_to_portfolio\u0026#39; %}\u0026#34; method=\u0026#34;post\u0026#34; class=\u0026#34;d-inline-block\u0026#34;\u0026gt; {% csrf_token %} \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;id\u0026#34; value=\u0026#34;{{ coin_id }}\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;mr-2 font-weight-bold text-uppercase\u0026#34;\u0026gt;Units Owned\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;number\u0026#34; name=\u0026#34;quantity\u0026#34; min=\u0026#34;1\u0026#34; max=\u0026#34;500\u0026#34; value=\u0026#34;1\u0026#34; class=\u0026#34;form-control d-inline-block w-auto mr-2 mb-2\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary text-uppercase\u0026#34;\u0026gt;Add to Portfolio\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock content %} {% block scripts %} {% endblock scripts %} This template is used for displaying search results for a cryptocurrency in a portfolio management application. It allows the user to add the selected cryptocurrency to their portfolio by specifying the quantity owned. If the cryptocurrency is already in the portfolio, the template notifies the user and provides an option to increment the quantity. The template uses Bootstrap classes for styling and Django tags to handle form submissions.\nWallet Page Now, moving on to the final and the most important part of the project, the wallet page. The wallet page is the page where the user can see all the cryptocurrencies they have added to their portfolio. The wallet page also displays the total value of the user\u0026rsquo;s portfolio. The wallet page is the most important page of the application as it is the page where the user can see the total value of their portfolio and the profit/loss they have made on their investments.\nThe view for the wallet page is as follows:\n@login_required(login_url=\u0026#34;login\u0026#34;) def portfolio_view(request): # get the current logged in user current_user = request.user # get the referal code of the current user referral_code = current_user.profile.referral_code # get a list of all users who have the current user as their referrer referrals = Referal.objects.filter(referrer=current_user) # get total bonus earned by the current user total_bonus = current_user.profile.bonus # get the list of cryptocurrencies owned by the current user user_cryptocurrencies = Cryptocurrency.objects.filter(user=current_user) if user_portfolio := Portfolio.objects.filter(user=current_user).first(): portfolio = Portfolio.objects.get(user=current_user) # get all the crypto currencies in the portfolio and recalculate the total value of the portfolio new_portfolio_value = 0 user_cryptocurrencies = Cryptocurrency.objects.filter(user=current_user) for cryptocurrency in user_cryptocurrencies: total_value = cryptocurrency.quantity * cryptocurrency.current_price new_portfolio_value += total_value portfolio.total_value = new_portfolio_value portfolio.save() context = { \u0026#39;current_user\u0026#39;: current_user, \u0026#39;referral_code\u0026#39;: referral_code, \u0026#39;user_cryptocurrencies\u0026#39;: user_cryptocurrencies, \u0026#39;user_portfolio\u0026#39;: user_portfolio, \u0026#39;referrals\u0026#39;: referrals, \u0026#39;total_bonus\u0026#39;: total_bonus, \u0026#39;new_portfolio_value\u0026#39;: new_portfolio_value, } else: context = { \u0026#39;current_user\u0026#39;: current_user, \u0026#39;referral_code\u0026#39;: referral_code, \u0026#39;user_cryptocurrencies\u0026#39;: user_cryptocurrencies, \u0026#39;user_portfolio\u0026#39;: user_portfolio, \u0026#39;referrals\u0026#39;: referrals, \u0026#39;total_bonus\u0026#39;: total_bonus, } return render(request, \u0026#39;portfolio.html\u0026#39;, context) @login_required(login_url=\u0026#34;login\u0026#34;) def delete_from_portfolio_view(request, pk): # get the current logged in user user = request.user # get the crypto currency object from the database crypto_currency = Cryptocurrency.objects.get(pk=pk) # delete the crypto currency from the database crypto_currency.delete() # update the total value of the portfolio portfolio = Portfolio.objects.get(user=user) # get all the crypto currencies in the portfolio and recalculate the total value of the portfolio user_cryptocurrencies = Cryptocurrency.objects.filter(user=user) for cryptocurrency in user_cryptocurrencies: total_value = cryptocurrency.quantity * cryptocurrency.current_price portfolio.total_value += total_value portfolio.save() # send an alert to the user that the crypto currency has been deleted from the portfolio messages.warning(request, f\u0026#39;{crypto_currency.name} has been deleted from your portfolio.\u0026#39;) return redirect(\u0026#39;portfolio\u0026#39;) The first function, portfolio_view, is responsible for rendering the user\u0026rsquo;s portfolio page. It retrieves the current user\u0026rsquo;s information and their cryptocurrency holdings from the database, as well as their referral code, referrals, and total bonus. If the user has a portfolio, the function recalculates its total value based on the current prices of the cryptocurrencies they own, updates the portfolio in the database, and adds the new value to the context. Finally, it renders the portfolio.html template with the retrieved information.\nThe second function, delete_from_portfolio_view, handles deleting a specific cryptocurrency from the user\u0026rsquo;s portfolio. It first retrieves the current user\u0026rsquo;s information and the specific cryptocurrency object from the database based on its primary key. Then, it deletes the cryptocurrency from the database and recalculates the total value of the user\u0026rsquo;s portfolio based on their remaining holdings. Finally, it sends a warning message to the user notifying them that the cryptocurrency has been deleted, and redirects them back to their portfolio page.\nNow, all that remains is to make the HTML template for the portfolio page. The template is as follows:\n{% extends \u0026#39;base.html\u0026#39; %} {% block title %} Wallet {% endblock title %} {% block content %} {% if messages %} {% for message in messages %} \u0026lt;div class=\u0026#34;alert alert-success\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; {{ message }} \u0026lt;/div\u0026gt; {% endfor %} {% endif %} \u0026lt;h1 class=\u0026#34;mb-4 custom-heading\u0026#34;\u0026gt;REFERRALS\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;my-4 py-3 px-4 rounded-lg referral-code\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;d-flex align-items-center justify-content-between\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;mb-0\u0026#34;\u0026gt;Your Referral Code is \u0026lt;strong\u0026gt;http://localhost:8000/signup/{{ referral_code }}\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;button class=\u0026#34;btn btn-dark btn-md copy-btn\u0026#34; onclick=\u0026#34;sendToClipboard()\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fas fa-copy\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;ml-0 mt-3 mb-0\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:8000/signup/{{ referral_code }}\u0026#34;\u0026gt;Share this link with your friends to earn 100 points for each friend who signs up!\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; {% if referrals %} \u0026lt;div class=\u0026#34;mb-5\u0026#34;\u0026gt; \u0026lt;table class=\u0026#34;table table-striped table-hover custom-table mt-5\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;#\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Referral User\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Date Joined\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; {% for referral in referrals %} \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ forloop.counter }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ referral.user }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ referral.user.date_joined }}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {% endfor %} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;div class=\u0026#34;row mt-5\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-6\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;alert alert-success py-3 mb-3\u0026#34;\u0026gt; \u0026lt;h4 class=\u0026#34;mb-0\u0026#34;\u0026gt;Total Referrals\u0026lt;/h4\u0026gt; \u0026lt;p class=\u0026#34;mb-0 display-4\u0026#34;\u0026gt;{{ referrals|length }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-6\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;alert alert-info py-3 mb-3\u0026#34;\u0026gt; \u0026lt;h4 class=\u0026#34;mb-0 text-dark\u0026#34;\u0026gt;Total Points Earned\u0026lt;/h4\u0026gt; \u0026lt;p class=\u0026#34;mb-0 display-4 text-dark\u0026#34;\u0026gt;{{ total_bonus }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% else %} \u0026lt;div class=\u0026#34;alert alert-danger my-4 p-3 rounded text-center text-light\u0026#34;\u0026gt; You have not referred any friends yet. \u0026lt;/div\u0026gt; {% endif %} \u0026lt;h1 class=\u0026#34;mb-4 mt-5 custom-heading\u0026#34;\u0026gt;Wallet for {{ current_user|upper }}\u0026lt;/h1\u0026gt; {% if user_cryptocurrencies %} \u0026lt;div class=\u0026#34;table-responsive\u0026#34;\u0026gt; \u0026lt;table class=\u0026#34;table table-striped mb-4 mt-2 custom-table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Cryptocurrency\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Current Price\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Amount Owned\u0026lt;/th\u0026gt; \u0026lt;th scope=\u0026#34;col\u0026#34;\u0026gt;Action\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; {% for crypto in user_cryptocurrencies %} \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;{{ crypto.name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ crypto.current_price }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ crypto.quantity }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;{% url \u0026#39;delete_from_portfolio\u0026#39; crypto.id %}\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-trash red-arrow\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {% endfor %} \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;alert alert-info py-3 mb-3 fancy-color\u0026#34;\u0026gt; \u0026lt;h4 class=\u0026#34;mb-0 text-light\u0026#34;\u0026gt;Total Portfolio Value\u0026lt;/h4\u0026gt; \u0026lt;p class=\u0026#34;mt-2 display-4 text-light\u0026#34;\u0026gt;${{ new_portfolio_value }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; {% else %} \u0026lt;div class=\u0026#34;alert alert-danger my-3 p-3 rounded text-center text-light\u0026#34;\u0026gt; You have not added any cryptocurrencies to your portfolio yet. \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a class=\u0026#34;btn btn-primary\u0026#34; href=\u0026#34;{% url \u0026#39;home\u0026#39; %}\u0026#34;\u0026gt;Add Cryptocurrencies\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; {% endif %} \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;script\u0026gt; function sendToClipboard() { var copyText = document.querySelector(\u0026#34;.referral-code strong\u0026#34;); copyText.textContent = \u0026#34;http://localhost:8000/signup/\u0026#34; + copyText.textContent; var textArea = document.createElement(\u0026#34;textarea\u0026#34;); textArea.value = copyText.textContent; document.body.appendChild(textArea); textArea.select(); document.execCommand(\u0026#34;Copy\u0026#34;); textArea.remove(); alert(\u0026#34;Copied to clipboard\u0026#34;); } \u0026lt;/script\u0026gt; {% endblock %} This Django template generates a web page that displays two main sections: referrals and cryptocurrency portfolio. The referral section shows the user\u0026rsquo;s referral link and a table of all the referrals made by the user. The user can copy the referral link to share with friends and earn bonus points for each successful referral. The cryptocurrency portfolio section displays a table of all the cryptocurrencies owned by the user along with their current price and quantity. The total portfolio value is also shown. If the user has not added any cryptocurrencies to the portfolio, a message is displayed prompting them to add some. The template also includes a JavaScript function to copy the referral link to the clipboard when the user clicks on the copy button.\nRun the crypto app Now that about wraps up the crypto app. Let\u0026rsquo;s run the app and see how it looks. Run the following command in the terminal:\npython manage.py makemigrations python manage.py migrate python manage.py runserver Now, open the following URL http://localhost:8000/signup in your browser. The app should show you the home page of the application. You can sign up for a new account and then log in to the application. Once you log in, you will be redirected to the home page. You can add cryptocurrencies to your portfolio and then view your portfolio and referrals on the portfolio page. You can also copy your referral link to the clipboard and share it with your friends to earn bonus points.\nConclusion In the second part of this massive tutorial we learned how to build a cryptocurrency portfolio web application using Django.\nIn our Django development journey, we covered the following topics:\nUsing the CoinGecko API to fetch the latest cryptocurrency prices and how to use the Django ORM to store the data in the database. Django\u0026rsquo;s authentication system to create user accounts. Django messages framework to display messages to the user. Django\u0026rsquo;s template system to generate dynamic web pages. Django ORM to query the database and perform various operations such as fetch data, update and delete data from the database, as well as write complex queries. perform aggregate queries and joins on the database using the Django ORM. perform transactions, date and time queries, and queries on specific data types such as JSON, arrays , UUID in the database. Writing highly specifc views, decorators and request methods to handle complex business backend logic such as adding cryptocurrencies to the portfolio, deleting cryptocurrencies from the portfolio, and so on. Overall, we covered various aspects of Django development that will help us build robust and scalable web applications. In the final part of this tutorial, in the next post we will cover testing all endpoints, views and models so definitely do not miss that.\n","permalink":"https://atharvashah.netlify.app/posts/tech/django-crypto-app/part2/","summary":"Introduction Welcome to the second part of the 3-part technical tutorial series, where we\u0026rsquo;ll be building a Django project that enables users to manage their cryptocurrency portfolios. To implement the functionalities and additional features, we\u0026rsquo;ll be utilizing API calls to coingecko or any other cryptocurrency API.\nIn the previous part, we set up the project and created the models. Now, we will continue off from that point and add the templates, views and urls and code up the entire project.","title":"Django Crypto App Part 2"},{"content":"Introduction Welcome to this 3-part technical tutorial series, where we\u0026rsquo;ll be building a Django project that enables users to manage their cryptocurrency portfolios. To implement the functionalities and additional features, we\u0026rsquo;ll be utilizing API calls to coingecko or any other cryptocurrency API.\nIn Part 1, we will be defining the functional requirements and give you the overview of what we are building, the approach, the high-level design and the project setup using Django. We will also configure the settings.py file, create the models and register them in the admin panel.\nIn Part 2, we will add the templates, views and urls and code up the entire project. This will be the most complex and detailed part of this series.\nIn Part 3, we will wrap the series up by discussing testing approach by writing test cases for Models, Views and Templates using Pytest.\nThe code for the entirety of the project can be found here -\u0026gt; Github Repo for Django Crypto App\nDefining Functional Requirements Functional requirements define what a software system or application should do to satisfy the user\u0026rsquo;s needs and business objectives. They describe the functions, features, and capabilities of the system and how it should behave under different circumstances. Let us map out the desired outcome from this project to aid us better in the development process. We will split up the app into several pieces to achieve the overall goal:\nUser Authentication The system should provide a sign-up, log-in, and log-out functionality, including password recovery features. We\u0026rsquo;ll ensure that passwords are securely stored and hashed using Django\u0026rsquo;s built-in authentication system.\nReferral System Users should be able to invite others to join the platform using a referral link. We\u0026rsquo;ll track referral links and give the referrer a bonus when a new user signs up using their link.\nWallet Management Users should be able to add and remove cryptocurrencies to their wallet. For each cryptocurrency, the user can add its name, symbol, current price, and quantity to their portfolio.\nPortfolio View Users should be able to view their portfolio in detail, which shows the value of each cryptocurrency in their wallet and the total value of their portfolio.\nHomepage The homepage should display the 24-hour price and percentage change of the top 10 ranked cryptocurrencies, as well as the 24-hour price and percentage change of the currencies in the user\u0026rsquo;s portfolio. We\u0026rsquo;ll represent the data using a table (the table type is up to you).\nSearch Bar We\u0026rsquo;ll include a search bar that allows users to search for new cryptocurrencies to add to their portfolio.\nTech Stack Language: Python 3.10 Framework: Django 4.0+ Database: SQLite [Default] API USED: CoinGecko - Public Version, No API Key. Rate Limit is 10-25 req/minute Frontend: Bootstrap 5.1.3 Testing: Django Test Framework Test Coverage: 90%+ Development Methodology: TDD (Test Driven Development) Planned Endpoints Since we have the functional requirements planned out, we can now determine the URLs that we will be adding to the project. Most of these URLs will be accompanied with a template as well as a backend view.\nlocalhost:8000/ -\u0026gt; [home view] localhost:8000/login localhost:8000/logout localhost:8000/signup localhost:8000/signup/str:referral_code localhost:8000/portfolio localhost:8000/search localhost:8000/add_to_portfolio localhost:8000/delete_from_portfolio/int:pk localhost:8000/password_reset localhost:8000/password_reset_done localhost:8000/password_reset_confirm/\u0026lt;uidb64\u0026gt;/\u0026lt;token\u0026gt; localhost:8000/password_reset_complete localhost:8000/admin Creating a New Django Project To create a Django project for a cryptocurrency portfolio management system, follow these steps:\nNavigate to the folder where you want to create the project. Use the command cd followed by the directory name to move to that folder. cd django-crypto-app Create a virtual environment for your project. This is optional but recommended, as it helps keep dependencies separate from other projects on your system. Use the command python -m venv followed by the name you want to give to the environment. python -m venv env Activate the virtual environment by running the activation script located in the env/Scripts folder. env\\Scripts\\activate Install the packages you\u0026rsquo;ll need for your project. This includes Django for building the web application, requests for making API calls, and coverage for testing purposes. Use the pip install command followed by the package name. I highly recommend using a requirements.txt file to keep track of your dependencies. Also, go to the Github Repo and check the requirements.txt file for the latest dependencies. The ones listed below are the ones used at the time of writing this article but please check the requirements.txt file for the latest dependencies and install them using the command pip install -r requirements.txt pip install django pip install requests pip install coverage pip install django-crispy-forms pip install crispy-bootstrap5 Use the django-admin command to start a new Django project in the current folder. Add a dot at the end of the command to specify that you want to use the current folder as the project directory. django-admin startproject crypto . Create a Django app named mainapp using the startapp command. python manage.py startapp mainapp Create database tables by running makemigrations followed by migrate. python manage.py makemigrations python manage.py migrate Create a superuser account to access the Django admin panel. You will be prompted to enter a username, email, and password. python manage.py createsuperuser Start the server using the runserver command. python manage.py runserver Open your browser and go to http://localhost:8000/ to see the Django welcome page. To access the admin panel, visit http://localhost:8000/admin and log in using the superuser account you created in step 8. Finally, generate a requirements.txt file that lists all the packages and their versions used in your project. pip freeze \u0026gt; requirements.txt These steps will create a basic Django project that can be used as a starting point for building the cryptocurrency portfolio management system.\nConfiguring settings.py Here is what the project file structure looks like:- crypto - The main project folder. Contains the settings.py file and the urls.py file.\ncrypto\\static - Contains the static files for the project such as css, js, images, etc.\ntemplates - Contains the html templates for the project. I prefer to set up templates in the root folder and configure the TEMPLATES setting in the settings.py file to point to the templates folder.\nmainapp - The main app folder.\nmainapp\\urls.py - Contains the urls for the main app.\nmainapp\\views.py - Contains the views for the main app.\nmainapp\\tests.py - Contains the tests for the main app.\nmainapp\\models.py - Contains the models for the main app such as Crypto and Portfolio.\nmainapp\\forms.py - Contains the forms for the main app such as CustomUserCreationForm\nmainapp\\migrations - Contains the migrations for the main app.\nmainapp\\signals.py - Contains the create_profile signal once a user is created.\nIn this section, we will be making some configurations to our Django project. Here are the steps to follow:\nOpen the settings.py file in the main project directory.\nChange ALLOWED_HOSTS = [\u0026quot;*\u0026quot;] to allow any host to connect to our application.\nAdd our newly created custom app, mainapp, as well as the third-party packages we will be using later on by adding the following lines of code to the INSTALLED_APPS section:\n\u0026#34;mainapp\u0026#34;, \u0026#34;crispy_forms\u0026#34;, \u0026#34;crispy_bootstrap5\u0026#34;, We will be using crispy_forms and crispy_bootstrap5 for styling our forms. Therefore, we need to set the CRISPY_ALLOWED_TEMPLATE_PACKS and CRISPY_TEMPLATE_PACK variables to \u0026ldquo;bootstrap5\u0026rdquo; by adding the following lines of code: CRISPY_ALLOWED_TEMPLATE_PACKS = \u0026#34;bootstrap5\u0026#34; CRISPY_TEMPLATE_PACK = \u0026#34;bootstrap5\u0026#34; Create a new folder called templates in your main project directory to store all your front-end templates.\nAdd the following code to the TEMPLATES section to specify the template directory we created:\n\u0026#34;DIRS\u0026#34;: [\u0026#34;templates\u0026#34;], # change this line! Next, we need to set up our static and media file routes. Add the following lines of code to the settings.py file: STATIC_URL = \u0026#34;/static/\u0026#34; STATIC_ROOT = BASE_DIR / \u0026#34;static\u0026#34; STATICFILES_DIRS = [\u0026#34;crypto/static\u0026#34;] MEDIA_URL = \u0026#34;/media/\u0026#34; MEDIA_ROOT = BASE_DIR / \u0026#34;media\u0026#34; We will also be needing email configuration to send reset password emails to our users. Add the following lines of code to the settings.py file: from decouple import config EMAIL_BACKEND = \u0026#39;django.core.mail.backends.smtp.EmailBackend\u0026#39; EMAIL_HOST = \u0026#39;smtp.gmail.com\u0026#39; EMAIL_PORT = 587 EMAIL_USE_TLS = True EMAIL_HOST_USER = config(\u0026#39;EMAIL_HOST_USER\u0026#39;) # load from .env file EMAIL_HOST_PASSWORD = config(\u0026#39;EMAIL_HOST_PASSWORD\u0026#39;) # load from .env file DEFAULT_FROM_EMAIL = \u0026#34;Crypto App \u0026lt;your-email-here@gmail.com\u0026gt;\u0026#34; # change this to your own email Finally, create a .env file in your main project directory and add the following variables to it: EMAIL_HOST_USER=\u0026lt;your-email-here\u0026gt; EMAIL_HOST_PASSWORD=\u0026lt;your-password-here\u0026gt; Make sure to replace and with your own email and password respectively.\nDon\u0026rsquo;t hesitate to refer to the settings.py file in the Github Repository by clicking the link at the top of this tutorial.\nConfiguring urls.py Since we will be using the mainapp as our main app, we need to configure the urls.py file in the main project directory to point to the mainapp. Go to the core project folder and the urls file -\u0026gt; crypto/urls.py and add the following lines of code:\nfrom django.contrib import admin from django.urls import path, include from django.conf import settings from django.conf.urls.static import static urlpatterns = [ path(\u0026#34;admin/\u0026#34;, admin.site.urls), path(\u0026#34;\u0026#34;, include(\u0026#34;mainapp.urls\u0026#34;)), ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) Create App Models In this code snippet, we are creating four different models for our Django web application. These models are used to define the database structure for our web application. The four models are:\nUser Model: This is the default user model provided by Django\u0026rsquo;s authentication system. We are overriding this model to make the email field unique. Profile Model: This model is used to store additional information about the user. It has a one-to-one relationship with the User model. We are using Django\u0026rsquo;s signals to automatically create a profile for each user. Referral Model: This model is used to track referrals made by users. It has a foreign key relationship with the User model, and another foreign key relationship with the referrer. Cryptocurrency Model: This model is used to store information about cryptocurrencies. It has a foreign key relationship with the User model, allowing us to link cryptocurrencies to specific users. It stores the name, symbol, current price, and quantity of each cryptocurrency. Portfolio Model: This model is used to store information about a user\u0026rsquo;s portfolio. It has a foreign key relationship with the User model, allowing us to link portfolios to specific users. It stores the total value of the portfolio. Each of these models is defined using the models.Model class provided by Django. The fields for each model are defined using various field types, such as CharField and DecimalField. We are also using various model relationships, such as ForeignKey and OneToOneField, to link our models together.\nOverall, these models provide the necessary database structure for our web application, allowing us to store and manipulate data related to users, their profiles, referrals, cryptocurrencies, and portfolios.\nfrom django.contrib.auth.models import User from django.db import models # Override the default User model to make the email unique User._meta.get_field(\u0026#39;email\u0026#39;)._unique = True # Make the profile for a user, automatically created when a user is created using Django signals class Profile(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE) referral_code = models.CharField(max_length=10, unique=True) bonus = models.IntegerField(default=0) def __str__(self): return f\u0026#39;{self.user.username} profile\u0026#39; # Create the referal model class Referal(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) referrer = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\u0026#39;referrals\u0026#39;) def __str__(self): return f\u0026#39;{self.user.username} was referred by {self.referrer.username}\u0026#39; # Create the Cryptocurrency model class Cryptocurrency(models.Model): # here name is also the id of the cryptocurrency, so useful for API calls user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\u0026#39;cryptocurrencies\u0026#39;, null=True) id_from_api = models.CharField(max_length=50) name = models.CharField(max_length=50) symbol = models.CharField(max_length=10) current_price = models.DecimalField(max_digits=10, decimal_places=2) quantity = models.DecimalField(max_digits=10, decimal_places=2, default=1) class Meta: unique_together = (\u0026#39;user\u0026#39;, \u0026#39;name\u0026#39;) def __str__(self): return f\u0026#39;{self.name} ({self.symbol})\u0026#39; # Create the portfolio linked to a user and store the total value of the portfolio class Portfolio(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\u0026#39;portfolios\u0026#39;) total_value = models.DecimalField(max_digits=15, decimal_places=2) def __str__(self): return f\u0026#39;{self.user.username} - Portfolio: {self.total_value}\u0026#39; Registering Models in Admin To make our models accessible from the Django admin panel, we need to register them in the admin.py file. Here\u0026rsquo;s the code that needs to be added:\nfrom django.contrib import admin from .models import Cryptocurrency, Portfolio, Profile, Referal @admin.register(Referal) class ReferalAdmin(admin.ModelAdmin): list_display = (\u0026#39;user\u0026#39;, \u0026#39;referrer\u0026#39;) @admin.register(Profile) class ProfileAdmin(admin.ModelAdmin): list_display = (\u0026#39;user\u0026#39;, \u0026#39;referral_code\u0026#39;, \u0026#39;bonus\u0026#39;) @admin.register(Cryptocurrency) class CryptocurrencyAdmin(admin.ModelAdmin): list_display = (\u0026#39;user\u0026#39;, \u0026#39;name\u0026#39;, \u0026#39;id_from_api\u0026#39;, \u0026#39;symbol\u0026#39;, \u0026#39;current_price\u0026#39;, \u0026#39;quantity\u0026#39;) @admin.register(Portfolio) class PortfolioAdmin(admin.ModelAdmin): list_display = (\u0026#39;user\u0026#39;, \u0026#39;total_value\u0026#39;) In this code, we first import the models that we want to register. Then, for each model, we create a new class that inherits from admin.ModelAdmin, which allows us to customize the way the model is displayed in the admin panel. We set list_display to specify which fields we want to display for each instance of the model.\nAfter adding this code to admin.py, we need to run migrations to update the database schema. To do this, we can run the following commands:\npython manage.py makemigrations python manage.py migrate The first command creates a new migration file based on the changes we made to the models, while the second command applies those changes to the database. After running these commands, the models will be registered in the admin panel and we can interact with them through the dashboard interface.\nConclusion In this technical blog post, we covered the initial steps of building a web application using Django. We started by specifying the requirements of our project and planning the project structure. Then, we determined the URLs and models we needed for our application and configured the settings.py file to ensure that our application worked properly.\nNext, we created our models and defined their relationships to each other, which helped us lay out the database schema. We also registered our models in the Django admin panel, allowing us to interact with them easily via the dashboard interface.\nOverall, we have successfully completed the introductory part of our project. In the next part, we will be working on views, forms, templates, and URLs to build the core functionalities of our application. This will help us to create a dynamic and responsive web application that meets our project requirements. Stay tuned for the next part!\n","permalink":"https://atharvashah.netlify.app/posts/tech/django-crypto-app/part1/","summary":"Introduction Welcome to this 3-part technical tutorial series, where we\u0026rsquo;ll be building a Django project that enables users to manage their cryptocurrency portfolios. To implement the functionalities and additional features, we\u0026rsquo;ll be utilizing API calls to coingecko or any other cryptocurrency API.\nIn Part 1, we will be defining the functional requirements and give you the overview of what we are building, the approach, the high-level design and the project setup using Django.","title":"Django Crypto App Part 1"},{"content":"Rating: 4/5 ⭐\nAfter reading two books in the Malazan Book of the Fallen series, my impression of the writer\u0026rsquo;s work has shifted slightly. While this book, Deadhouse Gates, connected with me on a character-driven level, its bleakness, plethora of new faces, and the desert setting made it slightly more confusing than the previous book, Gardens of the Moon.\nErikson, known for his world-building skills, takes the already extensive cast of characters and places and expands them even further, leaving little respite for readers who struggled to keep up with the first book. However, this book does improve on characterization compared to the previous one.\nOne significant difference from Gardens of the Moon is the portrayal of the Malazan Empire. While in the first book, the empire seemed almost unbeatable, in Deadhouse Gates, the opposite is true. Additionally, this book takes place in an entirely different location, the Seven Cities, and the heart of the empire, leaving behind the big players and settings of book one.\nAt first, leaving behind my favorite characters like Anomander Rake made me uneasy. However, a compelling prologue and meeting exciting new characters soon had me invested in the story. Although I still hope to learn the fate of the characters I grew to like in book one.\nThe story of Deadhouse Gates is framed by four distinct storylines that converge later in the novel.\nTo start off, Felisin Paran, the youngest sister of Ganoes, is in grave danger as a member of a noble house caught up in a carefully orchestrated culling of the Malazan Empire’s Seven Cities nobility. Empress Laseen, still trying to wipe out any of those who were loyal to the previous Emperor Kellanved and his main ally Dancer, is behind the plot, and her new right hand, Adjunct Tavore, is leading the culling of the elite. Tavore is Felisin\u0026rsquo;s sister and has disavowed their family and former noble friends in favour of allegiance to the Empress. Felisin survives violent riots seeking the death of the former ruling class by teaming up with an excommunicated former High Priest of the war deity Fener named Heboric, and a strong-man named Baudin, but she is forced to associate with these two undesirable companions.\nThe novel also introduces Mappo, a huge Trell warrior, and his travelling companion, the mysterious Icarium, who is part Jaghut. These two long-lived beings, with legendary reputations as fighters, have an unbreakable bond, but Mappo is hiding things from his friend, and Icarium is suffering from memory loss. Shapeshifting beings called Soletaken and D’ivers are at war, trying to achieve Ascendency, and Mappo and Icarium find themselves taking refuge with an insane High Priest of Shadow, Iskaral Pust, who has his own plans for the two.\nIn another storyline, Dukier, an Imperial Historian, joins the 7th Malazan Army in the Seven Cities at the wrong time as revolution is imminent. A holy war called “The Whirlwind” has been prophesized to free denizens of the Empire from the tyrannical yoke of Laseen, and Sha’ik, prophetess of that Holy War, has whipped up her followers into a frenzy, convinced that they can overthrow their feudal masters. The seemingly indomitable Empire has never looked so vulnerable. Lassen has cleverly and brutally culled the nobility to placate the revolutionaries, but it’s not enough, and the Empress turns to the barbarian Wickan chieftain Coltaine, known as a redoubtable warlord who led a revolt against Lassen’s predecessor. Coltaine’s marching orders are to safeguard thousands of forlorn Malazan civilians en route to the imperial city of Aren in “The Chain of Dogs,” but there is little hope for such a forced march.\nFinally, we return to four characters familiar to us the most, the gruff sapper Fiddler, the mysterious assassin Kalam, the former thief Crokus, and his lover Apsalar, who was once possessed by the will of a capricious god. Instead of getting Apsalar to her hometown, the diversion to Seven Cities is part of a precarious mission conceived by Kalam and Fiddler to assassinate the Empress. They believe that she is oppressing her citizens and conspired to kill the famous Bridgeburners military unit Kalam and Fiddler are part of.\nThe evolution of characterization in Steven Erikson\u0026rsquo;s \u0026ldquo;Deadhouse Gates\u0026rdquo; is simply remarkable. The pivotal character, Felisin, is damaged and complex, possessing bitterness, self-loathing, and a penchant for cruelty towards those closest to her. Her motivations for revenge and self-preservation are entwined with drug addiction, yet she remains fiercely loyal, brave, determined, and cunning, making her an unforgettable, tragic figure. As readers bear witness to her struggles, they may find themselves both aghast and rooting for her redemption.\nColtaine, another compelling character, rises above societal elitism as a clever and ruthless underdog. In a time of war and turmoil, he saves countless innocent lives while confronting revolt among his own soldiers and an army seeking the annihilation of his people. Mappo and Icarium also captivate with their relationship, reminiscent of Dante and Virgil in \u0026ldquo;Divine Comedy,\u0026rdquo; observing grand events beyond their control while navigating their own involvement in the action.\nThemes in this book are bleak and harrowing, delving into the darkest aspects of humanity. The book tackles topics such as prostitution, attempted sexual assault, genocide, torture, war atrocities, fanaticism, betrayal, murder, madness, revenge, pettiness, emotional trauma, war, and its hefty costs. The brutality of these scenes may give pause to readers, yet they also serve to underscore the fortitude, bravery, and compassion of the characters who ultimately choose to kill only as a last resort to defend themselves and others.\nWhile the world-building can at times be overwhelming, Erikson\u0026rsquo;s prose has grown increasingly complex and contemporary, with beautifully descriptive passages and pronounced ironic and sardonic humor. The meddling gods and their sinister designs on mortals loom large in the book, with their creations and servants shaping the fate of those caught in their web of divine plots and intrigues.\nThe prose has evolved into a contemporary and complex form, featuring lengthy passages without dialogue, which is definitely not my cup of tea, I mean it isn\u0026rsquo;t exactly a page-turner like Agatha Christie novels, is it? The abundance of lore, locations, characters, and world-building elements, while impressive in its complexity, can be overwhelming and mentally taxing. Nonetheless, the author\u0026rsquo;s ironic and sardonic humor is more pronounced than ever, adding to the book\u0026rsquo;s charm and uniqueness.\nThe worldbuilding in this book is exceptional, rivaling the likes of Stephen King, George R.R. Martin, and Joe Abercrombie in its intricacy and depth. It is comprehensive and elaborate to a degree rarely seen, with an array of magic warrens, shapeshifters, gods and demons, as well as numerous races, cultures, histories, traditions, and customs. While it can be daunting to take it all in, it\u0026rsquo;s a true testament to the author\u0026rsquo;s genius. To fully enjoy the book, it\u0026rsquo;s best not to get bogged down in the details, but rather let it enrich the experience.\nThe book features both large-scale battles and smaller conflicts, and the fight scenes are nothing short of magnificent. The author captures the gruesomeness, heartbreak, and glory of a military campaign with incredible detail. With an immense character list and multiple character arcs, the author strives to flesh out most of his characters to the point where they feel optimally realized. His vision for the world is staggering in scope and imagery, while remaining intimate and tangible.\nThe author tackles a complex plot, but manages to keep it enthralling and moving forward cohesively. The impactful prose holds the reader\u0026rsquo;s interest for nearly a thousand pages, which is no small feat. While there may be moments where the author falls short, it\u0026rsquo;s under the weight of the complicated backstory, twisty plot, and vast cast of players. However, the author\u0026rsquo;s uncompromising and meticulous approach to creating something grand and delivering on it to a large extent is nothing short of brilliant.\nThis book is a tome, dense and laborious to read, but worth every page. It\u0026rsquo;s a magnificent novel that demands mental exertion from the reader, but the payoff is immense. Despite the challenges, the reader will be compelled to continue the Malazan series, eager to uncover more of the Imperial developments. With \u0026ldquo;Memories of Ice\u0026rdquo; awaiting, the reader anticipates completing the epic saga before the end of 2023 and looks back on this journey with gratitude for having undertaken it.\n","permalink":"https://atharvashah.netlify.app/posts/personal/malazan/02-dg-review/","summary":"Rating: 4/5 ⭐\nAfter reading two books in the Malazan Book of the Fallen series, my impression of the writer\u0026rsquo;s work has shifted slightly. While this book, Deadhouse Gates, connected with me on a character-driven level, its bleakness, plethora of new faces, and the desert setting made it slightly more confusing than the previous book, Gardens of the Moon.\nErikson, known for his world-building skills, takes the already extensive cast of characters and places and expands them even further, leaving little respite for readers who struggled to keep up with the first book.","title":"Book Review: Deadhouse Gates by Steven Erikson"},{"content":"Rating: 4/5 ⭐\nThe Gardens of the Moon, the first volume of the Malazan Book of the Fallen, is a sprawling epic fantasy of monumental proportions. The vast array of characters is not just diverse, but uniquely and exquisitely crafted, and each of their roles is pivotal to the story\u0026rsquo;s advancement. There are no throwaway scenes or chapters; every dialogue and action ripples and reverberates throughout the intricate narrative, creating a vivid tapestry of political intrigue, mystical manipulation, and fantastical landscapes.\nUpon embarking on the Malazan Book of the Fallen Vol 1 - \u0026ldquo;Gardens of the Moon,\u0026rdquo; I was initially intimidated by its sheer scope, as many fellow online enthusiasts had warned me of its formidable length. Having already delved into the intricate worlds of ASoIaF, WoT, Tchaikovsky\u0026rsquo;s works, Mistborn, and the First Law Trilogy, I felt confident in my fantasy reading prowess. However, my apprehension soon dissipated upon immersing myself into the first few chapters of the novel, and I quickly realized that my fears were unfounded.\nThe book\u0026rsquo;s incredible length may be daunting, but its enthralling tale draws the reader in, and the full-blown battles in are a breathtaking display of military expertise fantasy elements.\nMalazan is a book series that delves deeply into war and conflict. The story is centered around an ambitious empire led by Emperor Kellanved, whose ultimate goal is to dominate the world. The book opens with a siege of Malaz City, one of the key cities in the continent of Genabackis, where we are introduced to several key characters, including Paran, a young nobleman with dreams of becoming a soldier.\nAs the Emperor’s troops sack the city, Paran witnesses the rise of Laseen, the commander of the Emperor’s assassins known as the Claw. Fast forward almost a decade later, and Laseen has taken over as the new Empress, laying siege to Pale, one of the last free cities in Genabakis. Anomander Rake, the powerful and mysterious ruler of the floating fortress Moon’s Spawn, is the only thing keeping the city from falling to the empire.\nParan has finally achieved his dream of becoming a lieutenant in the Emperor’s army but quickly becomes entangled in investigating a strange troop massacre that doesn\u0026rsquo;t appear to have been part of any battle. The new Empress sends her second-in-command, the Adjunct Lorn, to investigate the incident.\nParan ends up working for Lorn and finds himself getting much more than just a promotion. Meanwhile, a young woman named Sorry is taken by powerful forces and becomes an unstoppable killing machine, now part of the Bridgeburners, a troop of elite soldiers in the Emperor’s army.\nWhiskeyjack, a Bridgeburner and now a sergeant, is nominally in command of all the soldiers and participates in the siege of Pale. Despite their best efforts, the empire suffers heavy casualties during the siege, beset by both internal and external enemies.\nThe crazed Mage Hairlock is plotting against the Bridgeburners, Dujek, and Tattersail, and the Empire operatives are playing both sides as they try to accomplish their mission while staying alive and one step ahead of the Empress and her allies. But when the Bridgeburners are assigned to undermine the last free city of Darujhistan, they are drawn into a web of intrigue involving assassins, thieves, double-dealing elites, and other shady figures, all while competing gods and magical beings meddle in their affairs.\nAll of this takes place against the backdrop of an ancient malevolent power that has been awakened and threatens the entire continent.\nThe prose in \u0026ldquo;Gardens of the Moon\u0026rdquo; is truly magnificent, and Erikson\u0026rsquo;s writing captures the epic scale and grandeur of the novel with exceptional flair. His words are elaborate and vivid, conveying a sense of awe-inspiring depth, especially during the backstory and philosophical moments. Conversely, in the heart-pounding action scenes, his writing is spare yet powerful, like a skilled craftsman at work. The seamless blending of these contrasting styles creates an incredible reading experience that left a lasting impression on me.\nWith a sprawling cast of characters, it can be challenging to keep track of everyone. However, I found it helpful to latch onto my favorite characters and their story arcs like liferafts in a sea of players. Throughout the novel, Erikson also weaves in historical figures from previous epochs, adding further depth to the story.\nDespite the sheer number of characters, each one is incredibly well-drawn, with layers of nuance and complexity. My favorites included Paran, Tattersail, Ben, Rallick, Murillio, and Kruppe, each of whom left a lasting impression on me. Even the enigmatic and menacing Rake was captivating in his own right. What struck me most about these characters was their moral ambiguity. Few, if any, were wholly good or bad, with many caught in the grey area in between. Some were simply \u0026ldquo;doing their job,\u0026rdquo; while others were trying to survive. But even those with a strong sense of morality, like Whiskeyjack, were part of an oppressive, expansionist empire, making it difficult to define anyone\u0026rsquo;s actions as wholly good or evil.\nDespite this moral ambiguity, the characters\u0026rsquo; struggles and conflicts brought out their best moments, showcasing their resilience and tenacity. It was fascinating to see how characters like Paran evolved and matured throughout the novel, rising to the occasion when faced with the darkest of situations.\nThe novel\u0026rsquo;s themes of possession, manipulation, rebirth, and death are brilliantly woven into the plot, and the hounds add a fantastic otherworldly element to the tale. The prophecies, poems, and epigraphs preceding each chapter lend an air of heavy foreshadowing that only adds to the anticipation and excitement. The concept of meddling gods is one that always piques my interest, and \u0026ldquo;Gardens of the Moon\u0026rdquo; has plenty of it. The deities and sub-deities in this universe have competing agendas, some for pure amusement and others as puppet-masters manipulating events for their own gain. None of these deities are particularly likable, but the volatile nature of their involvement in the story makes for fascinating developments.\nErikson\u0026rsquo;s book is dark and filled with battlefield gore, violence, torture, trauma, death (though dead is not always final, and it can also mean undead), lost love, and despair. Despite this, there are glimmers of hope throughout, and Erikson implies that despite their many flaws, beings are essentially good.\nThe book\u0026rsquo;s personal courage is a central theme that struck a chord with me. It takes courage not only to stand up for one\u0026rsquo;s ideals, but also to face overwhelming odds with bravery, knowing defeat is inevitable but standing up anyway. Mortals daring to face gods and superior magical forces and, although their success is rare, their tenacity and determination can surprisingly change the course of events.\nHowever, the most significant theme in the book is the value placed on diverse cultures, races, and genders. The Malazan military machine is the most formidable armed force the world has ever seen, thanks to the diversity of its ranks. As they conquer and acquire more humans and non-humans, they seem to be effectively integrated into the military, utilizing all of their talents.\nMoreover, the various races in the armed forces get along seamlessly, and there are no apparent racial or gender impediments to rising in rank. The empire appears to preserve cultural identity instead of wiping it out, not out of altruistic purposes, but rather for pragmatic ones. I will be watching this theme closely as I progress through the series to see if it holds true in future books.\nThe worldbuilding in \u0026ldquo;Gardens of the Moon\u0026rdquo; is stupendous. Erikson has fashioned an enormous and immersive universe, complete with military orders, sociology, anthropology, magic systems, mythology, history, languages, races, and everything else needed to make it seem entirely real. It is an incredible achievement rivalled by few other fantasy books, with hell hounds, demons, giant crows, shapeshifters, floating fortresses, and even dragons!\nAs someone who adores absorbing worldbuilding, I was overwhelmed by it for perhaps the first time while reading a fantasy book. However, I can only blame my own shortcomings rather than Erikson for the fact that I was sometimes deluged by the book\u0026rsquo;s worldbuilding and labyrinthine plot. My advice to those new to Erikson\u0026rsquo;s work is to relax and read without overthinking it. Although I found myself irked at times trying to comprehend everything I was reading, I learned to appreciate the story and writing without feeling the need to understand everything all at once.\nI am captivated and eager to press on, and in a few days\u0026rsquo; time, I will commence my journey with \u0026ldquo;Deadhouse Gates\u0026rdquo;. Expect a review of that book in the coming weeks.\n","permalink":"https://atharvashah.netlify.app/posts/personal/malazan/01-gotm-review/","summary":"Rating: 4/5 ⭐\nThe Gardens of the Moon, the first volume of the Malazan Book of the Fallen, is a sprawling epic fantasy of monumental proportions. The vast array of characters is not just diverse, but uniquely and exquisitely crafted, and each of their roles is pivotal to the story\u0026rsquo;s advancement. There are no throwaway scenes or chapters; every dialogue and action ripples and reverberates throughout the intricate narrative, creating a vivid tapestry of political intrigue, mystical manipulation, and fantastical landscapes.","title":"Book Review: Gardens of the Moon by Steven Erikson"},{"content":"April 2023 was an exciting month for movie enthusiasts, with a variety of genres and eras represented in the films released and viewed. As an avid movie-goer, I had the opportunity to watch a diverse selection of films, ranging from classic dramas to modern blockbusters. In this monthly post, I\u0026rsquo;ll be sharing my thoughts and opinions on the movies I watched during April 2023. From high-octane action flicks to introspective character studies, these films have something for everyone. So, let\u0026rsquo;s dive in and explore the world of cinema together!\nClick the banner below to follow me on Letterboxd and see what I\u0026rsquo;m watching next!\nScream VI, 2023 - ★★★★ Watched on: 26 April 2023\nReview\nWell, well, well, looks like the Scream franchise still has some life left in it! Scream VI is a slasher masterpiece that will have you screaming for more! This movie is the epitome of meta, self-aware and expectation defying, and I must say, it is an absolute thrill ride from start to finish.The SFX and sound were top-notch, and the gore was so unhinged that it had me covering my eyes and gasping in equal measure. The character development was awesome, especially Jenna Ortega\u0026rsquo;s performance, which was simply outstanding. This movie had me on my toes most of the time, and the payoff was well worth the wait.The references, jokes, and editing were all top-notch, and the overall balance of the movie was impressive. However, there were some instances where some characters survived due to plot armor and unlikely events, but that\u0026rsquo;s a minor gripe compared to the sheer entertainment value of this movie.Overall, Scream VI is a must-watch for any slasher fan, and it definitely brings back the energy to the franchise. I\u0026rsquo;m giving this movie an A+ and would highly recommend it to anyone who loves a good scare. So go ahead and scream your lungs out with Scream VI!\nRead on Letterboxd\nFresh, 2022 - ★★★★ Watched on: 21 April 2023\nReview\nHold on to your seats, because Fresh is a movie that will leave you feeling, well, fresh! This movie is not for the faint of heart, but for those who love a good psychological thriller, Fresh is a must-watch.The build-up to the title drop is so important and well-crafted that it sets the tone for the entire movie. Shot in a good spot, with interesting interior design and set pieces, Fresh is a feast for the eyes. However, don\u0026rsquo;t let the beautiful aesthetics fool you, because this movie goes deep into some disturbing themes that might be too much for some viewers.The fight sequences were entertaining, but it was the psychological warfare and the subtle ways that characters treated, behaved, or expressed their feelings non-verbally that really intrigued me. And let\u0026rsquo;s not forget about the gross scenes, because Fresh doubles down on them and delivers some truly memorable shit.In many ways, Fresh is a more cultured version of \u0026ldquo;Raw\u0026rdquo;, with a similar focus on the human psyche and the disturbing things that can happen when it\u0026rsquo;s pushed to its limits. Overall, Fresh is a captivating, intriguing, and thought-provoking movie that will leave you feeling, well, fresh. I\u0026rsquo;m giving this movie a solid 4 out of 5 and highly recommend it to anyone who loves a good psychological thriller.\nRead on Letterboxd\nThe Sixth Sense, 1999 - ★½ Watched on: 20 April 2023\nReview\nBoring ahh movie. Saw the ending plot twist coming miles before it happened. Any movie with a 6 to 13-year-old as a central character is bound to come off more or less as boring to me. Did not enjoy at all.\nRead on Letterboxd\nAnt-Man and the Wasp: Quantumania, 2023 - ★★★ Watched on: 20 April 2023\nReview\nAnt Man and the Wasp: Quantumania - a marvel movie that packs in the puns, action, and family fun, yet leaves a little something to be desired. This movie may not have the same punch as some of Marvel\u0026rsquo;s recent hits, but it still brings a good dose of humor and action that\u0026rsquo;s perfect for a night out with the family. The chemistry between Scott and his daughter is a heartwarming touch, and the scene with the multiverse core doppelgangers is a highlight. But let\u0026rsquo;s be real, Kang steals the show. He\u0026rsquo;s the centerpiece of the movie and is played with delicious villainous glee. It\u0026rsquo;s a shame that the build-up to him was bogged down and sludgy, though.While the VFX is impressive for most scenes, there are moments where it\u0026rsquo;s a bit shoddy, which is a bummer. But the action scenes, music, and jokes make up for it, even if the dialogue can be cheesy at times. Overall, this is a decent Marvel movie, but it feels a bit juvenile and parodic. The characters with outrageous designs and Wasp\u0026rsquo;s Mom are not favorites, but the good ending still leaves a positive impression. This is a movie that you can enjoy with the family, but don\u0026rsquo;t expect it to be the best of the Marvel Universe.\nRead on Letterboxd\nAbout Time, 2013 - ★★★★ Watched on: 17 April 2023\nReview\nAbout Time is a movie that transcends the boundaries of time, and leaves you with a feeling of warmth and contentment. From the beginning, I was struck by the beauty of the landscapes and the costumes. The picturesque backdrop made me feel as though I was right there, alongside the characters.The story follows a young man, Tim, who has the unique ability to time travel. He uses his gift to try and find true love, but along the way, he discovers that the true value of time is spending it with the people you love. The father-son relationship was a standout for me - it was touching, and at times, brought tears to my eyes.Rachel McAdams was a joy to watch, and her chemistry with Tim was electric. The comedy in the movie was genuine and witty, leaving me in stitches. The heartfelt moments were what really touched my soul - they were both heartwarming and heart-wrenching.Overall, About Time is a movie that will stay with you long after the credits roll. It\u0026rsquo;s a timeless classic that focuses on the importance of relationships, family, and people. This movie is sexy, foxy, and genuinely comedic. I highly recommend it! Shoutout to Margot Robbie ;)\nRead on Letterboxd\nShazam! Fury of the Gods, 2023 - ★★½ Watched on: 15 April 2023\nReview\nShazam! Fury of the Gods, more like Shazam! Furries on the loose! This sequel had its moments, but it wasn\u0026rsquo;t quite electric enough to light up the box office. The humor was on point, and some of the acting performances were great, but the VFX was questionable, and the storyline was all over the place.The trio of Atlas\u0026rsquo; daughters made a fierce bunch of villains, but some of their character choices were as confusing as trying to decipher Shazam\u0026rsquo;s powers. The first half was more enjoyable than the second, with a good collection of songs to boot.Despite some of its flaws, this light-hearted movie stood out from other superhero flicks, and the character interactions and set-up were nice. The Wonder Woman cameo genuinely surprised me. Also, two post credit scenes? Wow! Overall, Shazam! Fury of the Gods was entertaining, but it could have been done a whole lot better.\nRead on Letterboxd\nThe Last Kingdom: Seven Kings Must Die, 2023 - ★★★★ Watched on: 15 April 2023\nReview\nHold on to your shields, folks, because The Last Kingdom: Seven Kings Must Die is a blockbuster hit! This movie may have seemed unnecessary after the series finale, but it proved to be a true farewell to all the great characters we\u0026rsquo;ve grown to love.This giant episode packed a punch with a plethora of plot developments that left us at the edge of our seats. Uthred, the charming and honorable warrior, was back in all his glory, along with Finnan and the motley crew we\u0026rsquo;ve grown to adore. The pacing may have been too fast, and the lack of a central female character was noticeable, but that\u0026rsquo;s to be expected with the transition from episodic to feature-length viewing.The action sequences and VFX were nothing short of wonderful, with high stakes and a high payoff, Last Kingdom style. The final scenes were bittersweet, and we savored every moment of it. The Last Kingdom: Seven Kings Must Die is a fitting conclusion to the epic saga. Skål!\nRead on Letterboxd\nRed Rocket, 2021 - ★★★ Watched on: 12 April 2023\nReview\nIt\u0026rsquo;s a rollercoaster of emotions, packed with humor, sexiness, and some scenes that will leave you feeling emotionally drained in a good way. The story revolves around a former p*** star who tries to start over in his hometown in Texas, which takes some unexpected turns.The acting is phenomenal, and the set pieces are visually stunning. While some characters are downright unlikable and some scenes feel overly dramatic, the film\u0026rsquo;s unconventional plot and great dialogue more than make up for it. \u0026ldquo;Red Rocket\u0026rdquo; is a breath of fresh air, with a fearless approach to tackling controversial themes.Overall, this movie is a must-watch for those looking for a thought-provoking, raunchy, and unique cinematic experience. So, buckle up for a wild ride of a film that\u0026rsquo;s part-depressing, part-inspiring, and all-around entertaining. \u0026ldquo;Red Rocket\u0026rdquo; is a rocket worth riding.\nRead on Letterboxd\nInland Empire, 2006 - ★★½ Watched on: 11 April 2023\nReview\nWelcome to the twisted world of David Lynch\u0026rsquo;s \u0026ldquo;Inland Empire\u0026rdquo; (2006). This film takes you on a surreal and hallucination-inducing journey with its dreamy camera work and sinister schemes. The cinematography is mesmerizing, and the set pieces are captivating. Laura Dern\u0026rsquo;s performance is outstanding, bringing life to the eccentric and mysterious characters in this film.The first half of the movie is more enjoyable, with some truly bothering dialogue and scenes that will burn into your brain. The searing dream-sequence like shots are a treat for the eyes, but the lack of a clear plot can be frustrating. However, that is to be expected from Lynch, and it\u0026rsquo;s more of a personal problem.Overall, \u0026ldquo;Inland Empire\u0026rdquo; is not for everyone. It\u0026rsquo;s a challenging and enigmatic film that requires your full attention. It\u0026rsquo;s worth watching for the outstanding visuals and Dern\u0026rsquo;s excellent performance. However, the lack of a coherent plot and the confusing narrative might turn off some viewers. So, if you\u0026rsquo;re in the mood for an abstract and unconventional film, \u0026ldquo;Inland Empire\u0026rdquo; might be worth checking out.\nRead on Letterboxd\nHush, 2016 - ★★★ Watched on: 11 April 2023\nReview\nLadies and gentlemen, silence is golden, but does it make for a good horror movie? Enter \u0026ldquo;Hush\u0026rdquo; (2016), a film that\u0026rsquo;s got some unique qualities but falls short in some aspects. The sounds of the film are commendable, and the beginning is genuinely gripping, but things take a nosedive after the attack. The writing and dialogue lack subtlety and come off as a bit cheesy and on the nose, leaving much to be desired.However, the chase and murder scenes are well executed, and the plot is claustrophobic and inventive. \u0026ldquo;Hush\u0026rdquo; is a survival horror movie that tries to be more than your average run-of-the-mill thriller, and for the most part, it succeeds. It\u0026rsquo;s not horrifying, but it keeps you on edge, and the good attempts at creating a tense atmosphere make up for some of the flaws.Overall, \u0026ldquo;Hush\u0026rdquo; is a decent movie that\u0026rsquo;s worth a watch if you\u0026rsquo;re a fan of the genre. While it\u0026rsquo;s not perfect, the chase scenes and inventive plot make up for some of its shortcomings. So, if you\u0026rsquo;re in the mood for a survival horror movie that\u0026rsquo;s not too scary but still entertaining, \u0026ldquo;Hush\u0026rdquo; might be right up your alley.\nRead on Letterboxd\nCreep, 2014 - ★★★ Watched on: 11 April 2023\nReview\nGrab your popcorn and cozy up for a horror movie that\u0026rsquo;s more well-acted than scary. Although the camera work and dialogues are commendable, the film\u0026rsquo;s up-close and personal shots and PoV approach don\u0026rsquo;t quite deliver the goosebumps you\u0026rsquo;d expect from a horror flick. Instead, the cynical and unhinged behavior of the villain portrayed by Mark Duplass takes center stage, making for a captivating and well-executed performance.The runtime can feel like it\u0026rsquo;s dragging at times, but the brutal and abrupt ending brings it all together nicely. The movie is more about the story and acting than the scares, making it an excellent option for those who aren\u0026rsquo;t fond of horror but enjoy a good character study.Overall, \u0026ldquo;Creep\u0026rdquo; is a solid movie that\u0026rsquo;s well-acted, but not as frightening or disturbing as some may expect. The film\u0026rsquo;s highlights lie in its portrayal of the villain and the camera work, and the runtime and scares fall a bit short. So, if you\u0026rsquo;re in the mood for a well-acted thriller, \u0026ldquo;Creep\u0026rdquo; is definitely worth a watch.\nRead on Letterboxd\nBarry Lyndon, 1975 - ★★★★½ Watched on: 07 April 2023\nReview\nElegant, opulent, and exquisitely crafted, Stanley Kubrick\u0026rsquo;s epic masterpiece, \u0026ldquo;Barry Lyndon,\u0026rdquo; is a visual and storytelling tour-de-force. Set in 18th-century Europe, the film follows the life of an Irish rogue who climbs the social ladder to become a wealthy gentleman but ultimately faces a tragic downfall.From the very first frame to the last, \u0026ldquo;Barry Lyndon\u0026rdquo; is a stunning visual feast that deserves to be seen on the big screen. Kubrick\u0026rsquo;s impeccable attention to detail and the use of natural light give every frame a painterly quality, and the exquisite costumes and production design transport the viewer to another era.The detached narrative style adds to the film\u0026rsquo;s overall elegance and sophistication, and the memorable characters, each with their own distinct quirks and personalities, make the movie feel more alive and engaging.The writing and dialogue are simply outstanding, with every line packing a punch and lingering in the memory long after the film has ended. The plot is complex and layered, with a lot happening in the three-hour runtime, but it never feels slow or tedious.Overall, \u0026ldquo;Barry Lyndon\u0026rdquo; is a vintage and Victorian masterpiece that deserves all the accolades it has received. It\u0026rsquo;s a timeless classic that will continue to captivate and enchant audiences for generations to come. If you\u0026rsquo;re a fan of period dramas, art films, or just great cinema in general, then this is a must-watch movie\nRead on Letterboxd\nCreed III, 2023 - ★★★ Watched on: 01 April 2023\nReview\nCreed III brings back the familiar storylines of the previous installments of the franchise but adds a new twist to keep things interesting. The time jump and business arc offer a fresh perspective, but the film takes a while to find its footing. Only in the last 30 minutes does the movie pick up pace, culminating in some thrilling action sequences that will have you on the edge of your seat.While the movie does offer some excitement, it lacks the charm and complexity of its predecessors. The characters are not as engaging as they could have been, and the story feels somewhat predictable. However, the inclusion of a new antagonist brings some much-needed change to the series.Overall, Creed III is a decent addition to the franchise, especially for die-hard fans. It may not be a knockout hit, but it certainly holds its own in the ring.\nRead on Letterboxd\nAvatar: The Way of Water, 2022 - ★★★★½ Watched on: 02 April 2023\nReview\nAvatar: The Way of the Water is an epic spectacle that immerses you in the stunning beauty of Pandora\u0026rsquo;s underwater world. The visual and sound effects of this movie are an absolute treat to watch. The way it\u0026rsquo;s shot and edited keeps you engaged throughout its 192 minutes runtime. It\u0026rsquo;s a rare example of a long movie that never feels like a drag.The story is a slight improvement over the first movie, with some surprising twists that keep you guessing. It borrows from James Cameron\u0026rsquo;s earlier works but with such skill that it still feels fresh and new. The action scenes are exhilarating, and the underwater sequences are a standout.There are some minor flaws, like some cheesy dialogues and a lack of a proper climax, but they hardly matter when compared to the movie\u0026rsquo;s strengths. It\u0026rsquo;s an achievement in filmmaking that\u0026rsquo;s hard to ignore. If you\u0026rsquo;re a fan of the first movie, this is a must-watch. If not, it\u0026rsquo;s still worth seeing for its sheer cinematic beauty and immersive experience. The new characters in this reign supreme. Some moments are very heart-felt and you can feel the tone change from a solo-adventurer to that of a family rearing broda.Overall, Avatar: The Way of the Water is a worthy sequel that sets the stage for what promises to be an epic series. It\u0026rsquo;s a visual feast that\u0026rsquo;s sure to leave you awestruck. I highly recommend it\nRead on Letterboxd\n","permalink":"https://atharvashah.netlify.app/posts/personal/movie-review/april-2023/","summary":"April 2023 was an exciting month for movie enthusiasts, with a variety of genres and eras represented in the films released and viewed. As an avid movie-goer, I had the opportunity to watch a diverse selection of films, ranging from classic dramas to modern blockbusters. In this monthly post, I\u0026rsquo;ll be sharing my thoughts and opinions on the movies I watched during April 2023. From high-octane action flicks to introspective character studies, these films have something for everyone.","title":"April 2023 Movies: Spring Screenings"},{"content":"A chieftain of the macabre and the weird, H.P. Lovecraft is one of the most influential horror writers of the 20th century. His stories are filled with the supernatural and the occult and his works have inspired many other writers, including Stephen King, Neil Gaiman, and Clive Barker. Here are some of the best quotes from H.P. Lovecraft. My very personal favorites.\nThere are not many persons who know what wonders are opened to them in the stories and visions of their youth; for when as children we learn and dream, we think but half-formed thoughts, and when as men we try to remember, we are dulled and prosaic with the poison of life\nMen of broader intellect know that there is no sharp distinction betwixt the real and the unreal; that all things appear as they do only by virtue of the delicate individual physical and mental media through which we are made conscious of them; but the prosaic materialism of the majority condemns as madness the flashes of super-sight which penetrate the common veil of obvious empiricism.\nBut some of us awake in the night with strange phantasms of enchanted hills and gardens, of fountains that sing in the sun, of golden cliffs overhanging murmuring seas, of plains that stretch down to sleeping cities of bronze and stone, and of shadowy companies of heroes that ride caparisoned white horses along the edges of thick forests; and then we know that we have looked back through the ivory gates into that world of wonder which was ours before we were wise and unhappy\nSometimes I believe that this less material life is our truer life, and that our vain presence on the terraqueous globe is itself the secondary or merely virtual phenomenon\nI have harnessed the shadows that stride from world to world to sow death and madness\u0026hellip;\nOcean is more ancient than the mountains, and freighted with the memories and the dreams of Time\nI recall that the people went about with pale and worried faces, and whispered warnings and prophecies which no one dared consciously repeat or acknowledge to himself that he had heard. A sense of monstrous guilt was upon the land, and out of the abysses between the stars swept chill currents that made men shiver in dark and lonely places.\nAmong the agonies of these after days is that chief of torments \u0026ndash; inarticulateness.\nWherefore do ye toil; is it not that ye may live and be happy? And if ye toil only that ye may toil more, when shall happiness find you? Ye toil to live, but is not life made of beauty and song? \u0026hellip; Toil without song is like a weary journey without an end. Were not death more pleasing?\nUnhappy is he to whom the memories of childhood bring only fear and sadness.\nThere were nauseous musical instruments, stringed, brass, and wood-wind, on which St. John and I sometimes produced dissonances of exquisite morbidity and cacodaemoniacal ghastliness\u0026hellip;\nMemories and possibilities are ever more hideous than realities.\n\u003c!DOCTYPE html\u003e\rEldritch Horrors\rCosmic Nightmares\rOtherwordly Dimension\rFor doubt and secrecy are the lure of lures, and no new horror can be more terrible than the daily torture of the commonplace.\nOut of the unimaginable blackness beyond the gangrenous glare of that cold flame, out of the Tartarean leagues through which that oily river rolled uncanny, unheard, and unsuspected, there flopped rhythmically a horde of tame, trained, hybrid winged things that no sound eye could ever wholly grasp, or sound brain ever wholly remember. They were not altogether crows, nor moles, nor buzzards, nor ants, nor vampire bats, nor decomposed human beings, but something I cannot and must not recall.\nMy coming to New York had been a mistake; for whereas I had looked for poignant wonder and inspiration in the teeming labyrinths of ancient streets that twist endlessly from forgotten courts and squares and waterfronts to courts and squares and waterfronts equally forgotten, and in the Cyclopean modern towers and pinnacles that rise blackly Babylonian under waning moons, I had found instead only a sense of horror and oppression which threatened to master, paralyse, and annihilate me.\nltimate horror often paralyses memory in a merciful way.\nWhat do we know \u0026hellip; of the world and the universe about us? Our means of receiving impressions are absurdly few, and our notions of surrounding objects infinitely narrow. We see things only as we are constructed to see them, and can gain no idea of their absolute nature. With five feeble senses we pretend to comprehend the boundlessly complex cosmos, yet other beings with wider, stronger, or different range of senses might not only see very differently the things we see, but might see and study whole worlds of matter, energy, and life which lie close at hand yet can never be detected with the senses we have.\nI beheld such a sight as I had never beheld before, and which no living person can have seen save in the delirium of fever or the inferno of opium. The building stood on a narrow point of land — or what was now a narrow point of land — fully three hundred feet above what must lately have been a seething vortex of mad waters. On either side of the house there fell a newly washed-out precipice of red earth, whilst ahead of me the hideous waves were still rolling in frightfully, eating away the land with ghastly monotony and deliberation.\nOf the pleasures and pains of opium much has been written. The ecstasies and horrors of De Quincey and the paradis artificiels of Baudelaire are preserved and interpreted with an art which makes them immortal, and the world knows well the beauty, the terror and the mystery of those obscure realms into which the inspired dreamer is transported. But much as has been told, no man has yet dared intimate the nature of the phantasms thus unfolded to the mind, or hint at the direction of the unheard-of roads along whose ornate and exotic course the partaker of the drug is so irresistibly borne.\nThere was a night when winds from unknown spaces whirled us irresistibly into limitless vacum beyond all thought and entity. Perceptions of the most maddeningly untransmissible sort thronged upon us; perceptions of infinity which at the time convulsed us with joy, yet which are now partly lost to my memory and partly incapable of presentation to others.\n\u003c!DOCTYPE html\u003e\rTentacled Abominations\rDesolate Ruins\rAncient Evils\rThe most merciful thing in the world, I think, is the inability of the human mind to correlate all its contents. We live on a placid island of ignorance in the midst of black seas of infinity, and it was not meant that we should voyage far. The sciences, each straining in its own direction, have hitherto harmed us little; but some day the piecing together of dissociated knowledge will open up such terrifying vistas of reality, and of our frightful position therein, that we shall either go mad from the revelation or flee from the deadly light into the peace and safety of a new dark age.\nIt seemed to be a sort of monster, or symbol representing a monster, of a form which only a diseased fancy could conceive. If I say that my somewhat extravagant imagination yielded simultaneous pictures of an octopus, a dragon, and a human caricature, I shall not be unfaithful to the spirit of the thing. A pulpy, tentacled head surmounted a grotesque and scaly body with rudimentary wings; but it was the general outline of the whole which made it most shockingly frightful.\nThey worshipped, so they said, the Great Old Ones who lived ages before there were any men, and who came to the young world out of the sky. Those Old Ones were gone now, inside the earth and under the sea; but their dead bodies had told their secrets in dreams to the first men, who formed a cult which had never died. This was that cult, and the prisoners said it had always existed and always would exist, hidden in distant wastes and dark places all over the world until the time when the great priest Cthulhu, from his dark house in the mighty city of R\u0026rsquo;lyeh under the waters, should rise and bring the earth again beneath his sway. Some day he would call, when the stars were ready, and the secret cult would always be waiting to liberate him.\nTo shake off the maddening and wearying limitations of time and space and natural law—to be linked with the vast outside—to come close to the nighted and abysmal secrets of the infinite and the ultimate—surely such a thing was worth the risk of one\u0026rsquo;s life, soul, and sanity!\nMid-summer \u0026hellip; when the alchemy of Nature transmutes the sylvan landscape to one vivid and almost homogeneous mass of green; when the senses are well-nigh intoxicated with the surging seas of moist verdure and the subtly indefinable odours of the soil and the vegetation. In such surroundings the mind loses its perspective; time and space become trivial and unreal, and echoes of a forgotten prehistoric past beat insistently upon the enthralled consciousness.\nIt is good to be a cynic \u0026ndash; it is better to be a contented cat \u0026ndash; and it is best not to exist at all.\nThe moon is dark, and the gods dance in the night; there is terror in the sky, for upon the moon hath sunk an eclipse foretold in no books of men or of earth\u0026rsquo;s gods.\nI could not write about \u0026ldquo;ordinary people\u0026rdquo; because I am not in the least interested in them.\nOne can\u0026rsquo;t write a weird story of real power without perfect psychological detachment from the human scene, and a magic prism of imagination which suffuses them and style alike with that grotesquerie and disquieting distortion characteristic of morbid vision. Only a cynic can create horror\u0026ndash;for behind every masterpiece of the sort must reside a driving daemonic force that despises the human race and its illusions, and longs to pull them to pieces and mock them.\nMadness rides the star-wind \u0026hellip; claws and teeth sharpened on centuries of corpses \u0026hellip; dripping death astride a bacchanale of bats from nigh-black ruins of buried temples of Belial.\n\u003c!DOCTYPE html\u003e\rSeething Darkness\rCursed Artifacts\rForbidden Knowledge\rI should describe mine own nature as tripartite, my interests consisting of three parallel and dissociated groups\u0026ndash;(a) Love of the strange and fantastic. (b) Love of the abstract truth and of scientific logic. (c) Love of the ancient and the permanent. Sundry combinations of these three strains will probably account for all my odd tastes and eccentricities.\nMy conception of phantasy, as a genuine art-form, is an extension rather than a negation of reality. Ordinary tales about a castle ghost or old-fashioned werewolf are merely so much junk. The true function of phantasy is to give the imagination a ground for limitless expansion, and to satisfy aesthetically the sincere and burning curiosity and sense of awe which a sensitive minority of mankind feel toward the alluring and provocative abysses of unplumbed space and unguessed entity which press in upon the known world from unknown infinities and in unknown relationships of time, space, matter, force, dimensionality, and consciousness. This curiosity and sense of awe, I believe, are quite basic among the sensitive minority in question; and I see no reason to think that they will decline in the future\u0026ndash;for as you point out, the frontier of the unknown can never do more than scratch the surface of eternally unknowable infinity.\nTime, space, and natural law hold for me suggestions of intolerable bondage, and I can form no picture of emotional satisfaction which does not involve their defeat\u0026ndash;especially the defeat of time, so that one may merge oneself with the whole historic stream and be wholly emancipated from the transient and the ephemeral.\nI have never been able to soothe myself with the sugary delusions of religion; for these things stand convicted of the utmost absurdity in light of modern scientific knowledge.\nMay the merciful gods, if indeed there be such, guard those hours when no power of the will, or drug that the cunning of man devises, can keep me from the chasm of sleep. Death is merciful, for there is no return therefrom, but with him who has come back out of the nethermost chambers of night, haggard and knowing, peace rests nevermore.\nChildren will always be afraid of the dark, and men with minds sensitive to hereditary impulse will always tremble at the thought of the hidden and fathomless worlds of strange life which may pulsate in the gulfs beyond the stars, or press hideously upon our own globe in unholy dimensions which only the dead and the moonstruck can glimpse.\nIt is in dreams that I have known the real clutch of stark, hideous, maddening, paralysing fear. My infant nightmares were classics, \u0026amp; in them there is not an abyss of agonising cosmic horror that I have not explored. I don\u0026rsquo;t have such dreams now\u0026ndash;but the memory of them will never leave me. It is undoubtedly from them that the darkest \u0026amp; most gruesome side of my fictional imagination is derived.\n","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-h.p.-lovecraft/","summary":"A chieftain of the macabre and the weird, H.P. Lovecraft is one of the most influential horror writers of the 20th century. His stories are filled with the supernatural and the occult and his works have inspired many other writers, including Stephen King, Neil Gaiman, and Clive Barker. Here are some of the best quotes from H.P. Lovecraft. My very personal favorites.\nThere are not many persons who know what wonders are opened to them in the stories and visions of their youth; for when as children we learn and dream, we think but half-formed thoughts, and when as men we try to remember, we are dulled and prosaic with the poison of life","title":"The Best Quotes from H.P. Lovecraft"},{"content":"Lights, camera, action! March 2023 was a month filled with movie magic, and I had the pleasure of watching some truly amazing films. From thought-provoking dramas to side-splitting comedies, this month had it all. I\u0026rsquo;m excited to share my thoughts on the movies I watched, which include the morally challenging First Reformed, the hilarious Game Night, the emotionally charged Spencer, and the classic Edward Scissorhands. I also delved into some cult classics, such as the offbeat Buffalo \u0026lsquo;66 and the spooky Creepshow. I also managed to watch all the Scream sequels, which were a lot of fun. Ghostface killah baby! Woodsboro gang for life! And let\u0026rsquo;s not forget the amazing live performance by The Weeknd at SoFi Stadium, which left me in awe. So grab some popcorn and join me as I take you through my movie journey of March 2023.\nClick the banner below to follow me on Letterboxd and see what I\u0026rsquo;m watching next!\nScream, 2022 - ★★½ Watched on: 25 March 2023\nReview\n\u0026ldquo;Scream 5\u0026rdquo; - the franchise loses its scream! The fifth installment in the \u0026ldquo;Scream\u0026rdquo; franchise brings back the surviving characters from the previous films once again, this time investigating a new series of murders.While it\u0026rsquo;s nice to see the old characters back in action, their age is starting to show, and the movie struggles to recapture the magic of the original films. The new characters, while entertaining, are not quite as memorable as their predecessors, and the dialogues are often cheesy and self-aware to a fault.The movie also suffers from some editing issues, with certain scenes feeling disjointed and rushed. The pacing is a bit off, and the film never quite manages to build the same level of suspense as the earlier entries in the franchise.That being said, the mystery of the killer\u0026rsquo;s identity is still engaging, and the reveal is satisfying. The movie does a good job of keeping the audience guessing until the very end.Overall, \u0026ldquo;Scream 5\u0026rdquo; is a decent enough horror movie, but it falls short of the high standards set by the earlier films in the franchise. While the mystery is engaging, the characters are showing their age, and the dialogues and editing issues detract from the overall experience. I\u0026rsquo;d give it a 2.5 out of 5 stars, with a recommendation to diehard fans of the franchise who are looking for closure.\nRead on Letterboxd\nScream 4, 2011 - ★★★½ Watched on: 23 March 2023\nReview\nTime for a soft reboot. the series gets a reboot! This fourth installment in the \u0026ldquo;Scream\u0026rdquo; franchise takes place ten years after the events of the previous film and introduces a new generation of characters.The movie attempts to update the franchise for a modern audience, with references to social media and internet culture. While this soft reboot approach can be hit or miss, \u0026ldquo;Scream 4\u0026rdquo; manages to blend the old and the new fairly well. The film is able to capture the essence of the original while still feeling fresh.However, one thing that does detract from the film is the coloring and lighting. The movie\u0026rsquo;s bright and colorful aesthetic doesn\u0026rsquo;t quite match the darker, grittier style of the first three films. While this can be seen as an attempt to modernize the franchise, it does take away from the signature \u0026ldquo;Scream\u0026rdquo; style.As for the characters, the new additions are mostly enjoyable, with a standout performance from Emma Roberts as Jill. The returning characters are also a welcome presence, with their chemistry and banter still as enjoyable as ever.The identity of the killer is once again a mystery, with the movie doing a good job of keeping the audience guessing. The reveal is satisfying, with a few twists and turns that keep things interesting.Overall, \u0026ldquo;Scream 4\u0026rdquo; is a decent addition to the franchise. While the bright and colorful aesthetic may not be for everyone, the movie does a good job of blending the old and the new. Fans of the franchise will enjoy the return of their favorite characters, and the new additions bring their own unique flavor to the mix.\nRead on Letterboxd\nScream 3, 2000 - ★★★ Watched on: 19 March 2023\nReview\nThe third installment in the \u0026ldquo;Scream\u0026rdquo; franchise brings back the surviving characters from the previous films as they are once again targeted by a new killer in a Ghostface mask.While the film does have its share of suspense and scares, it falls short in comparison to its predecessors. The plot is a bit convoluted and doesn\u0026rsquo;t quite pack the same punch as the first two movies. The characters, while still entertaining, don\u0026rsquo;t have the same level of depth as they did in previous films.One thing that does work well in this movie is the exploration of the idea of trilogies, with the characters reflecting on the concept and its impact on the horror genre. However, this theme doesn\u0026rsquo;t quite make up for the film\u0026rsquo;s shortcomings in other areas.As for the identity of the killer, it doesn\u0026rsquo;t quite live up to the mystery and suspense of the first two films. The reveal is a bit underwhelming, and the motivations behind the killings feel a bit contrived. Still, an essential scream movie. Goes without saying.\nRead on Letterboxd\nScream 2, 1997 - ★★★½ Watched on: 18 March 2023\nReview\nOne thing that sets the \u0026ldquo;Scream\u0026rdquo; franchise apart from other horror movies is its self-awareness and willingness to poke fun at horror movie tropes. \u0026ldquo;Scream 2\u0026rdquo; is no exception, with characters often referencing horror movies and their clichés, adding a layer of humor to the film.As for the identity of the Ghostface killer, the movie does a great job of keeping the audience guessing until the end. The revelation is a bit of a shocker, with the killer\u0026rsquo;s motivations being revealed in a dramatic twist. I won\u0026rsquo;t spoil it for those who haven\u0026rsquo;t seen it, but I will say that it\u0026rsquo;s a satisfying conclusion to the film.Overall, \u0026ldquo;Scream 2\u0026rdquo; is a great example of a self-aware horror movie that both scares and entertains. It\u0026rsquo;s a solid sequel that manages to capture the essence of the original while adding its own unique spin. If you\u0026rsquo;re a fan of horror movies or just looking for a good scare, \u0026ldquo;Scream 2\u0026rdquo; is definitely worth checking out.\u0026ldquo;Scream 2\u0026rdquo; - the sequel that slays! This horror flick from the late 90s is a scream-fest that will have you jumping out of your seat. With its fair share of twists and turns, \u0026ldquo;Scream 2\u0026rdquo; manages to keep the audience on the edge of their seats until the very end.The film picks up with Sidney Prescott (Neve Campbell) trying to move on from the horrors of the first film, only to find herself targeted yet again by a new killer in a Ghostface mask. With the help of her friends and a few new characters, Sidney must once again outsmart the killer and survive the night.One thing that stands out in \u0026ldquo;Scream 2\u0026rdquo; is the impressive makeup and special effects, which truly bring the horror to life. The characters are also well-developed, with each one bringing a unique personality to the screen. However, the movie does fall into some clichés that are common in the horror genre, which may disappoint some viewers.Overall, \u0026ldquo;Scream 2\u0026rdquo; is a worthy follow-up to the original film, with plenty of suspense and scares to keep horror fans entertained. While it may not reinvent the wheel, it certainly delivers on the thrills and spills.\nFirst Reformed, 2017 - ★★★ Watched on: 14 March 2023\nReview\nFirst Reformed is a thought-provoking film that challenges the viewer\u0026rsquo;s moral code. Set in a picturesque countryside, the idyllic scenery is juxtaposed with the protagonist\u0026rsquo;s inner turmoil, creating an atmosphere that is both serene and unsettling. Ethan Hawke delivers a meditative and stoic performance that captivates the audience, drawing them into the character\u0026rsquo;s conflicted mind.The cinematography and aspect ratio were on point, and there were some truly memorable shots throughout the film. The use of the aspect ratio to create a sense of claustrophobia and confinement was particularly effective, heightening the tension and drama of the story.However, the final hour of the film felt a bit stretched and lackluster, with some questionable decisions made by the protagonist that left me feeling a bit disappointed. The pacing slowed down, and it didn\u0026rsquo;t quite have the same impact as the earlier parts of the movie.That being said, the screenplay and quotes were strong, and the film does leave a lasting impression. It\u0026rsquo;s a good watch, but not the most memorable one out there.\nRead on Letterboxd\nGame Night, 2018 - ★★★½ Watched on: 12 March 2023\nReview\nGame Night is like the ultimate game night with your coolest friends. And let\u0026rsquo;s be real - Rachel McAdams is like my dream girlfriend after this movie.The quotes are on point, the funniest scenes will have you in stitches, and the puns are just chef\u0026rsquo;s kiss. Plus, there are so many references for moviegoers and cinema enthusiasts that you\u0026rsquo;ll be like, \u0026lsquo;Okay, I see what you did there.\u0026lsquo;And the twists and turns? Don\u0026rsquo;t even get me started. This movie is jam-packed with action, and it\u0026rsquo;s just so much fun to watch.Witty, charming, and sexy - this movie has it all. I seriously have no complaints. Game Night is just an all-around good time, and I highly recommend it to anyone who loves a good laugh.\nRead on Letterboxd\nBuffalo \u0026lsquo;66, 1998 - ★★★★ Watched on: 11 March 2023\nReview\nBuffalo \u0026lsquo;66? More like Buffalo \u0026lsquo;hits ya right in the feels\u0026rsquo;! This flick is the definition of self-aware, with enough meta moments to make your head spin. The acting? Un-freakin\u0026rsquo;-real. And don\u0026rsquo;t even get me started on the meme potential. #Buffalo66Challenge, anyone?But seriously, this movie\u0026rsquo;s got it all - it\u0026rsquo;s culturally relevant, packed with pop culture references, and visually stunning. The photography and camera work will have you saying \u0026lsquo;Wow, this is art, not just a movie!\u0026lsquo;But be warned, it\u0026rsquo;s emotionally charged and raw, so bring some tissues if you\u0026rsquo;re a crier. The wordplay is also on point, with engaging scenes that will hook you in from start to finish.Overall, Buffalo \u0026lsquo;66 may not be perfect, but it\u0026rsquo;s definitely worth a watch. Just make sure you\u0026rsquo;re ready to experience some serious feelings.\nRead on Letterboxd\nSpencer, 2021 - ★★★½ Watched on: 11 March 2023\nReview\nSpencer is like a peek into the life of a royal gone rogue. And let\u0026rsquo;s be real - who doesn\u0026rsquo;t love a good British accent? The mansions and set designs are out of this world, and the costumes are just chef\u0026rsquo;s kiss.The emotional drama is palpable, with plenty of melancholic moments that will leave you with a lingering sense of sadness. But hey, that\u0026rsquo;s what makes it so beautiful, right? And the landmarks and set pieces are shot so freaking well, you\u0026rsquo;ll be like \u0026lsquo;Wow, I need to visit England ASAP.\u0026lsquo;And of course, we can\u0026rsquo;t forget about Kristen Stewart\u0026rsquo;s acting. She does a great job of capturing the essence of a royally depressed person throwing on a good show.Overall, if you\u0026rsquo;re a fan of moody dramas and royals gone rogue, Spencer is definitely worth a watch. Just make sure you have some tissues handy.\nRead on Letterboxd\nEdward Scissorhands, 1990 - ★★★½ Watched on: 10 March 2023\nReview\nEdward Scissorhands is like the Tim Burton movie to end all Tim Burton movies. Johnny Depp and Winona Ryder are iconic in this flick, and the setting and worldbuilding are out of this world. It\u0026rsquo;s like Napoleon Dynamite meets the Stanley Kubrick alternate universe.The set design is on point too - it\u0026rsquo;s like every detail was carefully crafted to make you feel like you\u0026rsquo;re in a totally different world. Plus, there are some seriously heartfelt moments that will hit you right in the feels.But let\u0026rsquo;s be real - this movie is also hella generic in some ways. But the self-awareness and meta commentary elevate it to a whole new level. It\u0026rsquo;s like, yeah, we know this is kinda cheesy, but we\u0026rsquo;re gonna own it anyway.Overall, Edward Scissorhands is a classic for a reason. If you haven\u0026rsquo;t seen it yet, what are you even doing with your life?\nRead on Letterboxd\nPromising Young Woman, 2020 - ★★★★ Watched on: 07 March 2023\nReview\nPromising Young Woman is like the ultimate power play between men and women. The drama is intense, the acting is on point, and the message is clear: don\u0026rsquo;t mess with women, or you\u0026rsquo;ll get what\u0026rsquo;s coming to you.But let\u0026rsquo;s be real - this movie is also a bit too preachy at times. But you know what? It works. It\u0026rsquo;s like, yeah, we\u0026rsquo;re gonna shove this message down your throat, and you\u0026rsquo;re gonna like it.The style is super modern and stylish, which just adds to the overall badassery of the film. And the twisted, funny moments are just so potent. Plus, that ending? Holy sht. You\u0026rsquo;ll never see it coming.Overall, Promising Young Woman is definitely worth a watch. Just be prepared for a rollercoaster of emotions and a powerful message about women and the sht we have to deal with.\nRead on Letterboxd\nSecretary, 2002 - ★★★ Watched on: 07 March 2023\nReview\nSecretary, huh? This movie is definitely not your typical rom-com, that\u0026rsquo;s for sure. It\u0026rsquo;s raw, it\u0026rsquo;s sensual, and it\u0026rsquo;s\u0026hellip;kinda weird, to be honest. But hey, that\u0026rsquo;s what makes it so damn interesting.The alternative vibe is strong with this one, and the buildup will have you on the edge of your seat. Plus, there are some seriously funny moments that are actually supposed to be serious. You\u0026rsquo;ll be like, \u0026lsquo;Wait, am I supposed to laugh or\u0026hellip;?\u0026lsquo;Overall, Secretary is a unique experience that\u0026rsquo;s worth checking out if you\u0026rsquo;re in the mood for something different. Just be prepared for some seriously kinky sh*t. Don\u0026rsquo;t say I didn\u0026rsquo;t warn you.\nRead on Letterboxd\nThe Weeknd: Live at SoFi Stadium, 2023 - ★★★½ Watched on: 05 March 2023\nReview\nThe Weeknd\u0026rsquo;s concert had us feeling like we were part of the XO crew, with some sweet throwbacks and performances that had us grooving in our seats. The set design and visuals were lit AF, making us feel like we were at a party with The Weeknd himself. But let\u0026rsquo;s be real, some of the vocals were a bit off-key, but we\u0026rsquo;ll forgive him since he was singing live. There were tons of great moments that kept us entertained, but it\u0026rsquo;s not a concert that we would consider \u0026ldquo;essential\u0026rdquo; to watch. Overall, if you\u0026rsquo;re an XO fan, it\u0026rsquo;s definitely worth checking out, but if you\u0026rsquo;re not, you might want to skip this one.\nRead on Letterboxd\nPrimer, 2004 - ★★★★ Watched on: 04 March 2023\nReview\nPrimer takes time travel to a whole new level, leaving me in a loop that I can\u0026rsquo;t escape from. The non-traditional plot and low-vibrancy cinematography add to the indie feel of the film, making it stand out from the typical sci-fi blockbuster. The story is deep and intriguing, with layers upon layers that kept me guessing until the end. This is the kind of film that requires some serious brainpower to truly understand, but it\u0026rsquo;s worth the effort. After watching the \u0026ldquo;Ending Explained\u0026rdquo; video on YouTube, I gained a whole new appreciation for the film and its intricate storyline. Primer is a good sci-fi mindfuck that will leave you wanting more. If you\u0026rsquo;re a fan of time travel movies and don\u0026rsquo;t mind a bit of a mental workout, then this is definitely one to add to your watchlist.\nRead on Letterboxd\nCreepshow, 1982 - ★★★½ Watched on: 04 March 2023\nReview\nCreepshow is a horror comedy film that\u0026rsquo;s half serious and half a self-aware joke. The film is inspired by the horror comics of the 1950s, and it has that retro vintage feel to it, making it stand out from the typical horror film. Two of my favorite tales were \u0026ldquo;Something to Tide You Over\u0026rdquo; and \u0026ldquo;The Crate,\u0026rdquo; both of which were haunting, creepy, and very comical and campy at the same time. The film offers a good assortment of tales that offer variety and keep the viewer engaged. The realistic visual effects and good dialogue add to the overall experience, making it feel like you\u0026rsquo;re reading a comic book. While the film may not be for everyone, I would recommend watching it at least once for its unique take on horror and its ability to balance scares and humor. Overall, Creepshow is a decent horror comedy anthology that\u0026rsquo;s worth checking out if you\u0026rsquo;re a fan of the genre.\nRead on Letterboxd\n","permalink":"https://atharvashah.netlify.app/posts/personal/movie-review/march-2023/","summary":"Lights, camera, action! March 2023 was a month filled with movie magic, and I had the pleasure of watching some truly amazing films. From thought-provoking dramas to side-splitting comedies, this month had it all. I\u0026rsquo;m excited to share my thoughts on the movies I watched, which include the morally challenging First Reformed, the hilarious Game Night, the emotionally charged Spencer, and the classic Edward Scissorhands. I also delved into some cult classics, such as the offbeat Buffalo \u0026lsquo;66 and the spooky Creepshow.","title":"March 2023 Movies: Magic and Melodrama"},{"content":"Herein lies a compilation of my most cherished YouTube channels. Having subscribed to most of these for a number of years, I make it a point to regularly tune into their content. These channels are categorized for your ease of reference, and will be continually updated as I stumble upon more gems. I invite you to share your own recommendations in the comments section below, as this list shall remain perpetual. Do note that this is by no means an exhaustive inventory of my subscriptions, but rather a selection of the most exceptional, entertaining, and enlightening channels.\nLAST UPDATED: 22 Mar 2023\nTechnology Andrej Karpathy - A man with an insatiable appetite for Artificial Intelligence, Andrej Karpathy\u0026rsquo;s YouTube channel is a place where you can watch him unravel the mysteries of neural networks and machine learning with incredible depth and insight.\nMKBHD - From the latest smartphones to futuristic tech gadgets, MKBHD\u0026rsquo;s YouTube channel is your one-stop-shop for everything tech-related. He brings a unique and witty perspective to product reviews and tech news that will keep you entertained and informed.\nArjan Codes - Awesome Python tutorials and projects. Arjan\u0026rsquo;s YouTube channel is a great place to learn Python and build cool projects. Specializes in code smells, refactoring, design patterns, and clean code. High quality content.\nNeetCode - Awesome Leetcode solutions implemented in Python. My favorite go-to channel for Leetcode solutions. He has a great way of explaining complex concepts in a simple and easy-to-understand manner. Short, no-nonsense videos.\nFreeCodeCamp - Great tutorials on web development. FreeCodeCamp\u0026rsquo;s YouTube channel is a great place to learn web development. Thousands of hours of free crash courses across a varied range of topics. One of my all time favorite channels and organizations.\nDennis Ivy - Specializes in Django and Python. Dennis Ivy\u0026rsquo;s YouTube channel is a great place to learn Python and Django. Lookout for projects like the Django Ecommerce Project and the Django Blog Project.\nCodevolution - MERN stack tutorials. Codevolution\u0026rsquo;s YouTube channel is a great place to learn the MERN stack. He has a great way of explaining complex concepts in a simple and easy-to-understand manner. Tons of good content.\nPrimeagen - Inspiring and motivating code reviews, inspection of the tech-industry and awesome memeworthy content. Primeagen is know for his hot and solid takes which he backs with his immaculate drip and experience. Godly status.\nThe Prime Time - The Prime Time is a YouTube channel that will make you laugh, cry, and gasp with wonder. From gaming to reaction videos, there\u0026rsquo;s always something new and exciting to watch, so why not spend some prime time with this entertaining channel? Blessing for software engineers just looking to chill on stream. Lovely commentary and banter. Feels like home.\nTraversy Media - Get ready to dive into the world of web development with Traversy Media\u0026rsquo;s YouTube channel. With clear and concise tutorials on everything from HTML and CSS to React and Node.js, he\u0026rsquo;ll have you creating professional-grade websites in no time.\nCorey Schafer -\nIf you\u0026rsquo;re looking for tutorials on Python, Django, and other programming languages, then Corey Schafer\u0026rsquo;s YouTube channel is the perfect place to start. His in-depth tutorials cover everything you need to know, all presented in a clear and engaging manner.\nCoding Entrepreneurs - Perfect resource for Python Devs. Highly professional, well produced, and informative. Coding Entrepreneurs\u0026rsquo; YouTube channel is a great place to learn Python and build cool projects.\nUnbox Therapy - If you\u0026rsquo;re a tech enthusiast, then Unbox Therapy\u0026rsquo;s YouTube channel is a must-watch. With reviews and unboxings of the latest gadgets and tech products, you\u0026rsquo;ll always be up-to-date on the latest trends in technology. Plus, his entertaining and humorous style will keep you engaged from start to finish.\nComedy Skits Amanda McCants - Just go ahead and watch all her content right now. She\u0026rsquo;s the greatest. Self-aware, meta commentary on fashion, gen-z culture, and the internet. She\u0026rsquo;s a genius. Calabasas Mom is a must watch.\nCherdleys - All about comedy. The entire gangs videos feature them playing eccentric and over-the-top characters in various humorous situations. If you\u0026rsquo;re looking for a laugh, Cherdleys is the perfect channel to check out.\nCracker Milk - Focused on entertainment and humor. He posts a variety of videos, including skits, parodies, and challenges, all with a comedic twist that will keep you laughing.\nDesi Banks - A place where you can find hilarious skits, parodies, and stand-up comedy from this talented comedian. With a focus on everyday life situations and relatable humor, Desi Banks will keep you entertained for hours.\nRicky Berwick - This channel is all about making people laugh. With his unique sense of humor and his famous tongue-out expression, Ricky posts videos that range from funny skits to satirical commentaries on pop culture.\nRyan The Leader - Comedy Skits and Parodies. He has a great way of making fun of pop culture and current events in a way that\u0026rsquo;s both entertaining and relatable. Self-aware, meta commentary on social settings, gen-z culture, and the internet. Great acting and writing.\nFrying Pan - Frying Pan\u0026rsquo;s YouTube channel is focused on tech and comedy. His CS interview videos are hilarious and relatable. Everything is over the top and the acting is top notch. A solid collection of videos that will keep you entertained.\nJack The Pool Boy - I love this channel. Jack The Pool Boy\u0026rsquo;s YouTube channel is focused on comedy and satire. He posts videos that cover a variety of topics, mostly day to day life, all with a humorous twist that will keep you laughing. The music choices, his acting and co-actors add a lot to the videos. Jackie boy is a legend.\nMan Carrying Thing - Very short, very on-point and hard hitting comedy. Occasional book reviews. Known for roasting big enterprises and their products. Deeply insightful and hilarious.\nStevie Emerson - One of my all time favorites, I binged all the videos. Ranging from short to medium length comedy sketches that look as if they were a TV show in their own rights. Well-placed comedy men can relate to with a great sense of humor. Hilarious situations, wild writing and unhinged acting. You\u0026rsquo;ll be laughing your ass off.\nLong Beach Griffy - Long Beach Griffy\u0026rsquo;s YouTube channel is focused on comedy and satire. He posts videos that cover a variety of topics, from politics to pop culture, all with a humorous twist that will keep you laughing. Bro loves anime and is invulnerable to criticism. Banger after banger. GOAT.\nInterviews and Banter Chicken Shop Date - Amelia Dimoldenberg\u0026rsquo;s YouTube channel features her interviewing celebrities and public figures while sharing a meal together in a chicken shop. The casual atmosphere and off-the-cuff conversations make for a unique and entertaining viewing experience.\nLex Fridman - Focused on topics related to artificial intelligence, machine learning, and self-driving cars. He interviews experts in the field and provides informative and educational content on the latest developments in technology. Lex is a great interviewer and has a great way of explaining complex concepts in a simple and easy-to-understand manner. Tons of good content.\nSome Ordinary Gamers - All about exploring the depths of the internet and uncovering hidden gems and strange phenomena. With a focus on gaming and technology, this channel provides unique and entertaining content. Great banter, commentary and memes. Great for a laugh and a chill.\nIntrovert Madness - A philosophy channel as well as career-advice or life banter channel. Early vids are very comic and had me on the floor. He\u0026rsquo;s a great interviewer and has a great way of explaining complex concepts in a simple and easy-to-understand manner. Tons of good content. Lots to learn and laugh about. Most of the stuff is about CS and Stanford.\nGaming Gameranx - Gameranx\u0026rsquo;s YouTube channel is dedicated to video game news, reviews, and gameplay. With a focus on providing informative and entertaining content, this channel is a great source of information for gamers of all kinds. Reviews are honest, early and offer a great insight into the game. Has helped me find some great games.\nVaatiVidya - VaatiVidya\u0026rsquo;s YouTube channel is focused on the lore and storytelling in video games. With a passion for deep dives into the narratives of games like Dark Souls and Bloodborne, this channel is a must-watch for any fan of story-driven gaming. Nobody analyses games like Vaati. He\u0026rsquo;s a master of his craft. Lore Daddy.\nGirlfriend Reviews - Fffers a unique perspective on gaming, with reviews and commentary from the perspective of a non-gaming girlfriend watching her boyfriend play. With a lighthearted and humorous approach, this channel offers a fun and refreshing take on the gaming world.\nIndieMaus - All about indie games, with reviews, gameplay, and interviews with developers. With a focus on highlighting the best of the indie gaming scene, this channel is a great resource for discovering new and unique games. Awesome commentary and sense of humor. Great for a laugh.\nCacaphony and Discord - Cacophony and Discord\u0026rsquo;s YouTube channel is dedicated to exploring the darker side of gaming, with content that delves into horror games and creepypastas. With a focus on creating an eerie and unsettling atmosphere, this channel is a great watch for fans of horror and suspense. Cute and adorable!\nMax0r - Max0r\u0026rsquo;s YouTube channel is an absolute marvel of technical editing and breathtaking visual effects. The videos on this channel are a testament to the fact that there are still content creators out there who believe in delivering the highest quality to their audience. Max0r\u0026rsquo;s videos are simply the best, with stunning visuals and sound that will leave you in awe. The attention to detail is unparalleled, and it\u0026rsquo;s clear that no expense is spared in the pursuit of perfection. Max0r\u0026rsquo;s channel is a true masterpiece, and every video is a joy to behold. Sense of humour, well-placed jokes and constant references to pop culture and memes makes it like no other channel on the planet.\nFightin\u0026rsquo; Cowboy - Fightin\u0026rsquo; Cowboy\u0026rsquo;s YouTube channel is focused on walkthroughs and guides for some of the most challenging games out there. With a focus on providing detailed and informative guides, this channel is a great resource for anyone looking to conquer their favorite games.\nMusic Fantano - This is the YouTube channel of Anthony Fantano, a music critic known for his deep knowledge of a wide range of genres and his ability to express his opinions in an entertaining and insightful way. He reviews both popular and underground music, and his videos are well-researched, well-edited, and often humorous. If you\u0026rsquo;re a music fan who likes to keep up with the latest releases and discover new artists, this channel is definitely worth checking out.\nLarissa Liveir - Talented and charismatic singer-songwriter who covers a wide range of genres, from pop to rock to country. Her covers are always well-produced and well-performed, and she often adds her own unique spin to the songs she covers. If you\u0026rsquo;re a fan of pop music or just want to discover some great new artists, this channel is definitely worth checking out. Brings a lot of energy to her videos and is very entertaining to watch. Shreds on the guitar.\nNormal Person Reviews - This is the YouTube channel of a guy who calls himself a \u0026ldquo;normal person\u0026rdquo; and reviews all genres of music and albums in a down-tempo grounded way. His reviews are honest and straightforward, and he often provides helpful insights that you might not find in other reviews. If you\u0026rsquo;re looking for no-nonsense reviews from someone who\u0026rsquo;s just like you, this channel is worth checking out.\nPacifica - This is the YouTube channel of Pacifica, a duo who covers awesome and cool songs with bass, guitar and top tier vocals. Some of their covers are to die for. Cute pair of artists. Check them out if you\u0026rsquo;re a fan of rock music or just want to discover some great new bands, this channel is definitely worth checking out.\nThe Needledrop - This is the YouTube channel of Anthony Fantano\u0026rsquo;s music review website of the same name. On this channel, Fantano posts reviews of both popular and underground music, as well as interviews with musicians and other music-related content. His reviews are well-researched and often controversial, making for interesting discussions in the comments section. If you\u0026rsquo;re a music fan who likes to engage in debates and discussions about the latest releases, this channel is definitely worth subscribing to.\nTurning The Tables - Dad and son react to music. Great channel for a laugh. Very entertaining and funny. Great for a laugh and a chill. The dynamic and the expression of thoughts is honest and genuine. Tons of great albums have been covered so far and I like most of the videos that drop. Dad brings a lot of experience and knowledge to the table and son brings a lot of energy and enthusiasm. Great channel.\nMovies and TV Channel Frederator - This channel is dedicated to animation with videos covering a range of topics such as cartoon history, theories, and reviews of popular animated shows. Users should watch this channel if they are interested in animation and want to learn more about the behind-the-scenes details of their favorite cartoons.\nChris Stuckman - Chris Stuckmann is a film critic and YouTube personality who reviews movies and TV shows in a thoughtful and entertaining way. His reviews cover a range of genres and provide insightful analysis that goes beyond just a simple recommendation. Users should watch this channel if they are looking for well-informed and engaging film and TV reviews.\nCriterion Collection - This channel is dedicated to the Criterion Collection, a company that distributes \u0026ldquo;important classic and contemporary films.\u0026rdquo; Videos on this channel include trailers, interviews, and essays about Criterion films. Users should watch this channel if they are interested in classic and important films, and want to learn more about the history of cinema.\nJeremy Jahns - Chris Stuckmann is a film critic and YouTube personality who reviews movies and TV shows in a thoughtful and entertaining way. His reviews cover a range of genres and provide insightful analysis that goes beyond just a simple recommendation. Users should watch this channel if they are looking for well-informed and engaging film and TV reviews.\nLetterboxd HQ - Letterboxd is a social media platform for film lovers, and their YouTube channel is dedicated to interviews, reviews, and behind-the-scenes content related to film. Users should watch this channel if they are looking for film-related content beyond just reviews, and want to connect with other film lovers on a social media platform.\nMan of Recaps - This channel provides recaps of popular TV shows such as Game of Thrones and The Walking Dead. The recaps are informative and entertaining, making it easy to keep up with complex storylines. Users should watch this channel if they want to stay up-to-date with popular TV shows, but don\u0026rsquo;t have time to watch every episode. I often go back to this channel whenever a new season of an ongoing show is coming out!\nScreen Junkies - Screen Junkies is a channel dedicated to movie and TV show news, reviews, and analysis. They also produce a series called Honest Trailers, where they provide humorous and honest trailers for popular movies. Users should watch this channel if they are looking for a mix of film and TV news, reviews, and entertainment. Honest trailers were the best thing to happen to YouTube. They\u0026rsquo;re hilarious and they\u0026rsquo;re honest. I love the way they make fun of the movies and TV shows that they review. They\u0026rsquo;re also very informative and they\u0026rsquo;re very entertaining. I highly recommend this channel to anyone who loves movies and TV shows.\nThe Beauty Of - A sublime, sweet collection of the greatest shots in film history. The channel is dedicated to the beauty of film, and features videos that showcase the best visual moments in movies. Users should watch this channel if they are looking for a collection of beautiful shots from classic and contemporary films as well as a few insightful essays about the art of cinematography. This channel is a great way to discover new films and learn more about the art of filmmaking.\nWiseCrack - Wisecrack is a YouTube channel dedicated to exploring the philosophy and themes of popular media such as movies, TV shows, and video games. Their videos provide thought-provoking analysis and insights that go beyond just entertainment. Users should watch this channel if they are looking for deeper insights into the media they consume.\nTrash Taste - Trash Taste is a podcast featuring three anime YouTubers who discuss anime, manga, and other related topics. The hosts provide entertaining and informative commentary, and their discussions cover a range of topics within the anime fandom. Users should watch this channel if they are interested in anime and want to hear engaging discussions about the fandom.\nThe Leaderboard - The Leaderboard is a YouTube channel dedicated to exploring the history and culture of video games. Videos cover a range of topics such as game design, the history of video games, and reviews of popular games. Users should watch this channel if they are interested in video games and want to learn more about the history and culture of gaming. Timeline videos are great. They\u0026rsquo;re very informative and they\u0026rsquo;re very entertaining. I love the way they explain the history of video games. I highly recommend this channel to anyone who loves video games and wants to learn more about the lore, characters or plot of their favorite games.\nMisc Mandela Catalogue - A horror, alternative and creepy video collection channel. Well-edited and well-produced videos that scare the shit out of you. Wierd and drony production paired with unsettling atmosphere and cult-like imagery makes this channel a must-watch for horror fans. So far there have been 4 volumes of the Mandela catalogue and it has become an internet phenomenon in its own right.\nAlt Shift X - This is the YouTube channel of a content creator who creates in-depth analysis videos about Game of Thrones, Westworld, and other popular TV shows and movies. His videos are well-researched and often provide interesting insights that you might have missed while watching the shows. If you\u0026rsquo;re a fan of pop culture and love to delve deeper into the worlds of your favorite shows and movies, this channel is definitely worth subscribing to.\nBen Deen - His videos are well-produced and often showcase exotic and interesting foods from around the world. If you\u0026rsquo;re a foodie or just love to travel vicariously through others, this channel is definitely worth checking out. He just sits down, grabs delicious looking takeaway food and reviews it while eating. Awesome commentary and sometimes a bit funny. He\u0026rsquo;s a great guy and I love his videos.\nDaddynegan - AMVs, video edits of anime and video game characters set to music. High production quality that will leave you amazed. Great attention to detail. Love the castlevania videos. Great channel for anime fans.\nData is Beautiful - This is the YouTube channel of Data is Beautiful, a Reddit community that shares and discusses interesting data visualizations. The YouTube channel features compilations of the best data visualizations from the subreddit, as well as some original content. If you\u0026rsquo;re interested in data science or just love to see beautiful and informative visualizations, this channel is a great resource.\nFor the love of comics - This is the YouTube channel of a comic book enthusiast who posts videos about comic book history, culture, and analysis. His videos often feature in-depth discussions of classic and modern comics, as well as interviews with comic book creators. If you\u0026rsquo;re a comic book fan who loves to learn about the medium\u0026rsquo;s rich history and culture, this channel is definitely worth checking out.\nTelepurte - Slick, short animation with a twist and a punchline. Effects and characters in here are memorable. Horny bonk! Bingeworthy content.\n","permalink":"https://atharvashah.netlify.app/posts/personal/lists/list-favorite-youtube-channels/","summary":"Herein lies a compilation of my most cherished YouTube channels. Having subscribed to most of these for a number of years, I make it a point to regularly tune into their content. These channels are categorized for your ease of reference, and will be continually updated as I stumble upon more gems. I invite you to share your own recommendations in the comments section below, as this list shall remain perpetual.","title":"Awesome Youtube Channels I am Subscribed To"},{"content":"Allow me to present a compendium of the podcasts to which I have been attending for some duration. Through my consistent engagement with this medium, I have unearthed a trove of noteworthy podcasts. It is my intention to continue expanding this list as I encounter additional stimulating programs. Please note that this registry is not arranged in any specific sequence, and I must emphasize that it is primarily a personal memorandum rather than an article for public dissemination. May you discover a podcast of interest amongst the contents of this assemblage.\nLAST UPDATED: 22 Mar 2023\nLiterature, Movies and TV Shows Ten Very Big Books - A Malazan Readthrough Podcast\nThe Legendarium\nTrash Taste Podcast\nPop Culture Happy Hour\nInterviews, Discussions and News Lex Fridman Podcast\nImpaulsive with Logan Paul\nFiction, Horror and Creepypasta Chilling Tales for Dark Nights: A Horror Anthology and Scary Stories Series Podcast\nNo Sleep Podcast\nThe Other Stories | Sci-Fi, Horror, Thriller, WTF Stories\nWelcome to Night Vale\n","permalink":"https://atharvashah.netlify.app/posts/personal/lists/list-favorite-podcasts/","summary":"Allow me to present a compendium of the podcasts to which I have been attending for some duration. Through my consistent engagement with this medium, I have unearthed a trove of noteworthy podcasts. It is my intention to continue expanding this list as I encounter additional stimulating programs. Please note that this registry is not arranged in any specific sequence, and I must emphasize that it is primarily a personal memorandum rather than an article for public dissemination.","title":"Awesome Podcasts I am Listening To"},{"content":"Embarking on a massive high fantasy book series is no small feat, especially when you\u0026rsquo;re looking for a breathtaking, complex, and engaging story that spans decades and continents. As an experienced reader of ASoIaF, WoT, Tchaikovsky\u0026rsquo;s works, Mistborn, and the First Law Trilogy, I knew I needed a challenge that would test my mettle.\nEnter the Malazan Book of the Fallen. With rave reviews and a reputation for being one of the most epic fantasy series ever written, it seemed like the perfect choice for me. So, in 2022, I dived headfirst into the first book of the series, Gardens of the Moon. And oh boy, was I blown away by the sheer scale and scope of the book. It was everything I hoped for and more.\nFilled with excitement and high expectations, I immediately picked up Deadhouse Gates after finishing Gardens of the Moon. And the opening chapters did not disappoint. But as fate would have it, life got in the way, and I had to put the book down to deal with the responsibilities of adulthood. I lost my momentum and before I knew it, I had traded in my complex high fantasy reads for lighter, easier options.\nFast forward to 2023, and I\u0026rsquo;ve made the decision to finally finish the series. Armed with a lot of free time and a burning desire to tackle this mammoth of a series, I\u0026rsquo;m halfway through my reread of Gardens of the Moon. This time, however, I\u0026rsquo;m determined to push through and keep up with all the characters, no matter how complex or challenging it gets.\nI know what I\u0026rsquo;m in for this time around, and that gives me tremendous confidence to topple this series once and for all. With the added bonus of it being incredibly well-written, richly worded, and immaculately crafted, it\u0026rsquo;s sure to be a wild ride that I can\u0026rsquo;t wait to experience. Here\u0026rsquo;s to finally conquering the Malazan Book of the Fallen!\nTo see just what I am talking about, here is a comparitive image of the books I intend to read this year: Here is the breakdown of this Herculean task that awaits me:-\n# Title 1st Publication Approximate Word Count Pages (Tor Books Trade Paperback) Pages (Bantam Press Mass Market Paperback) Audio 1 Gardens of the Moon 1 April 1999 209,000 496 768 26h 8m 2 Deadhouse Gates 1 September 2000 272,000 604 960 34h 5m 3 Memories of Ice 6 December 2001 358,000 780 1187 43h 59m 4 House of Chains 2 December 2002 306,000 672 1040 35h 6m 5 Midnight Tides 1 March 2004 270,000 624 960 31h 3m 6 The Bonehunters 1 March 2006 365,000 800 1232 42h 6m 7 Reaper\u0026rsquo;s Gale 7 May 2007 386,000 832 1280 43h 58m 8 Toll the Hounds 30 June 2008 392,000 832 1296 44h 9m 9 Dust of Dreams 18 August 2009 382,000 816 1280 43h 13m 10 The Crippled God 15 February 2011 385,000 928 1200 45h 21m Approximate Total: 3,325,000 7,384 11,216 16d 5h 8m I am embarking on an epic journey to read the Malazan Book of the Fallen series, and I couldn\u0026rsquo;t be more excited! My plan is to read all ten books in the series this year, in the order of publication. While I\u0026rsquo;m not entirely sure I\u0026rsquo;ll be able to complete the task, I\u0026rsquo;m determined to give it my best shot. I do not own paperbacks or hardcovers of the books. I have the ebooks on my kindle and I am reading them there. As I progress through each book, I\u0026rsquo;ll be posting a review within a week of finishing it. And once I\u0026rsquo;ve finished the entire series, I plan to post a comprehensive review of the entire experience.\nTo help keep track of the complex narrative and the vast array of characters, I\u0026rsquo;ve created a custom-made summary compendium. It took a lot of hard work to create, but I believe it will be an invaluable resource throughout my reading journey.\n👉🏻 Malazan Book of the Fallen Compendium\nAnd for the maps, I\u0026rsquo;m using an excellent website that has been recommended to me by many Malazan fans.\n🗺️ Malazan Map\nTo supplement my reading, I\u0026rsquo;ll also be an active member of the Malazan Discord server. It\u0026rsquo;s a great community where I can discuss my thoughts and questions with other fans of the series. And if I need to look up anything non-spoilery, I\u0026rsquo;ll be turning to the Malazan Wiki.\n💬 Malazan Discord Server\n📚 Malazan Wiki\nWhile I\u0026rsquo;m a little late to the party, I\u0026rsquo;m eager to dive into this series and see what all the fuss is about. With the Elder Gods willing and the encouragement from my fellow Malazan fans, I\u0026rsquo;m confident that I can reach my goal. So please, cheer me on down in the comments, and let\u0026rsquo;s get started on this epic adventure together!\n","permalink":"https://atharvashah.netlify.app/posts/personal/malazan/prelude-to-malazan-challenge/","summary":"Embarking on a massive high fantasy book series is no small feat, especially when you\u0026rsquo;re looking for a breathtaking, complex, and engaging story that spans decades and continents. As an experienced reader of ASoIaF, WoT, Tchaikovsky\u0026rsquo;s works, Mistborn, and the First Law Trilogy, I knew I needed a challenge that would test my mettle.\nEnter the Malazan Book of the Fallen. With rave reviews and a reputation for being one of the most epic fantasy series ever written, it seemed like the perfect choice for me.","title":"Prelude to Malazan Book of the Fallen Challenge"},{"content":"February was a month for the ages as I indulged in a smorgasbord of movies. From the laugh-out-loud comedy of \u0026ldquo;Rush Hour\u0026rdquo; to the mind-bending sci-fi of \u0026ldquo;Solaris\u0026rdquo; and everything in between, I\u0026rsquo;ve got a lot to say about the films I watched. There were some classics from the past like \u0026ldquo;Nausicaä of the Valley of the Wind\u0026rdquo; and \u0026ldquo;Porco Rosso,\u0026rdquo; as well as newer releases like \u0026ldquo;Infinity Pool\u0026rdquo; and \u0026ldquo;Babylon.\u0026rdquo; I also braved the horror genre with \u0026ldquo;Gonjiam: Haunted Asylum\u0026rdquo; and \u0026ldquo;Incantation,\u0026rdquo; and explored the dark side of humanity with \u0026ldquo;Only God Forgives\u0026rdquo; and \u0026ldquo;A Cure for Wellness.\u0026rdquo; So buckle up and get ready for my take on these 14 movies, ranging from a half-star dud to a four-and-a-half-star masterpiece. I hope you enjoy reading my reviews as much as I enjoyed watching these films! Let\u0026rsquo;s get started.\nClick the banner below to follow me on Letterboxd and see what I\u0026rsquo;m watching next!\nRush Hour 3, 2007 - ★★★ Watched on: 26 February 2023\nReview\nThe third installment in the classic action-comedy franchise starring Jackie Chan and Chris Tucker. This time around, the duo finds themselves in Paris on the hunt for a dangerous crime syndicate. While the film doesn\u0026rsquo;t quite reach the heights of the first two movies, it still has plenty of entertaining moments to offer.One of the strengths of the film is the chemistry between Chan and Tucker. They have a great dynamic that brings a lot of humor and heart to the movie. Their classic banter and comedic timing are on full display, and they still manage to pull off some impressive action sequences as well.Speaking of action, this one takes us on a wild journey through Paris, featuring some thrilling set pieces and chase scenes. The city provides a beautiful backdrop for the action, and the film makes great use of its locations.However, the plot can be a bit convoluted at times, with too many twists and turns that don\u0026rsquo;t always make sense. The supporting characters aren\u0026rsquo;t particularly memorable either, and the film relies a bit too heavily on tired stereotypes for some of its humor.Although it\u0026rsquo;s my least favorite of the three, it is not a disaster in any way. If you\u0026rsquo;re looking for some laughs and exciting action, it\u0026rsquo;s worth checking out.\nRead on Letterboxd\nRush Hour 2, 2001 - ★★★★ Watched on: 26 February 2023\nReview\nRush Hour 2 is a knockout sequel that packs a comedic punch. Jackie Chan and Chris Tucker are back with their signature banter and over-the-top antics, making for some hilarious moments. The soundtrack is also fire, adding to the fun and energy of the film.The movie doesn\u0026rsquo;t shy away from crude humor and dialogue, which some may find off-putting, but for those who enjoy it, it\u0026rsquo;s a laugh riot. And the female actresses in the film are perfect, adding some much-needed depth and complexity to the story.What really sets this movie apart, though, is the solid ending that ties everything together. Plus, there are tons of references to the first movie that fans will appreciate. Overall, \u0026ldquo;Rush Hour 2\u0026rdquo; is my favorite of the trilogy and definitely worth a watch - just don\u0026rsquo;t rush through it too quickly.\nRead on Letterboxd\nRush Hour, 1998 - ★★★½ Watched on: 25 February 2023\nReview\n\u0026ldquo;Rush Hour\u0026rdquo; is a unique and entertaining buddy cop movie that has stood the test of time. Jackie Chan and Chris Tucker star as a mismatched pair of law enforcement officers who are tasked with finding a kidnapped girl. Along the way, they encounter a slew of dangerous characters and must rely on each other to survive.One of the strengths of the movie is the plot, which keeps the audience engaged and guessing until the very end. The plot twist at the heart of the movie is executed well and adds a layer of depth to the characters and their relationship.Speaking of characters, the acting in \u0026ldquo;Rush Hour\u0026rdquo; is top-notch. Chan and Tucker have great chemistry and their banter is both funny and endearing. They both bring their unique talents to the table - Chan with his impressive martial arts skills and Tucker with his quick wit and humor.The film also features some memorable supporting characters, including the villainous Juntao and the feisty but capable police officer, Sang. They add some variety and depth to the story and keep things interesting.What sets \u0026ldquo;Rush Hour\u0026rdquo; apart from other buddy cop movies is its ability to balance action and humor. The movie is filled with exciting fight scenes and thrilling car chases, but also has plenty of laugh-out-loud moments that make it a fun and enjoyable ride.Overall, \u0026ldquo;Rush Hour\u0026rdquo; is a timeless classic that is definitely worth a rewatch. It may not be perfect, but it\u0026rsquo;s a unique and entertaining film that showcases the talents of its cast and crew. If you\u0026rsquo;re in the mood for some action-packed humor, \u0026ldquo;Rush Hour\u0026rdquo; is a solid choice.\nRead on Letterboxd\nNausicaä of the Valley of the Wind, 1984 - ★★★★ Watched on: 24 February 2023\nReview\nPrepare to be transported to a magical world of stunning animation and a heartfelt story with \u0026ldquo;Nausicaä of the Valley of the Wind.\u0026rdquo; This Ghibli classic is a must-watch for fans of the studio\u0026rsquo;s style.The animation is superb, as expected from Ghibli, with breathtaking scenery and stunning visuals that transport you to a different world. The retro style adds a layer of charm and nostalgia to the film that is hard to resist.The plot is interesting and engaging, with a lot to say about environmental crises that still resonates today. And the character of Nausicaa is a standout, a memorable and sweet protagonist who embodies the film\u0026rsquo;s message of compassion and empathy.Overall, \u0026ldquo;Nausicaä of the Valley of the Wind\u0026rdquo; is a well-planned out film that balances important themes with a comforting and nostalgic style. It\u0026rsquo;s the perfect comfort movie to watch and rewatch, and a must-see for any Ghibli fan.\nRead on Letterboxd\nOnly God Forgives, 2013 - ★★★ Watched on: 19 February 2023\nReview\nGet ready for a neon-soaked, violent ride with \u0026ldquo;Only God Forgives.\u0026rdquo; This Ryan Gosling-starrer is a dark and brooding film that\u0026rsquo;s best watched late at night when the world is quiet.Gosling plays his usual role of a silent, hard man battling against the odds and being pushed to his limits. The movie drips neon everywhere, with a unique visual style that\u0026rsquo;s hard to ignore.The plot is interesting but feels short-lived and generic, with only a few moments that truly hit hard. However, those scenes are visually stunning and depict violence in a way that\u0026rsquo;s both shocking and mesmerizing.Overall, this movie is a mixed bag. It has moments of greatness, but they\u0026rsquo;re few and far between. If you\u0026rsquo;re a fan of Gosling or violent, neon-soaked films, give it a watch. But don\u0026rsquo;t expect to be blown away.\nRead on Letterboxd\nPorco Rosso, 1992 - ★★★ Watched on: 18 February 2023\nReview\nSettle in for a visually stunning journey through the skies with \u0026ldquo;Porco Rosso.\u0026rdquo; While it may not be my favorite Ghibli movie, it still boasts the studio\u0026rsquo;s trademark animation style that\u0026rsquo;s hard to beat.The story is a bit more political and non-traditional than other Ghibli movies, which might not be everyone\u0026rsquo;s cup of tea. But if you\u0026rsquo;re looking for something different and thought-provoking, this movie might just be for you.The character of Porco Rosso is also a standout, a charming and complex protagonist who\u0026rsquo;s hard not to root for. And of course, the visuals are breathtaking, with stunning depictions of flight and aerial combat.Overall, \u0026ldquo;Porco Rosso\u0026rdquo; might not be the most traditional Ghibli movie, but it still has a lot to offer for those looking for a visually stunning and thought-provoking experience.\nRead on Letterboxd\nInfinity Pool, 2023 - ★★★★½ Watched on: 14 February 2023\nReview\nPrepare yourself for a dark, psychedelic thrill ride with \u0026ldquo;Infinity Pool,\u0026rdquo; the freshest and most demonic sci-fi adventure in a long time.Mia Goth absolutely slays it with her acting, delivering memorable dialogue and scenes that will stay with you long after the credits roll. And Alexander Skarsgard? He\u0026rsquo;s as cool and sharp as ever.The movie is bursting with gore and sexual energy, with dark and creepy scenes that will make you feel like you\u0026rsquo;re watching an A24 production. It\u0026rsquo;s a rollercoaster of a movie, with twists and turns that will keep you guessing until the very end.If you\u0026rsquo;re a fan of thrillers, sci-fi, and anything with a touch of the demonic, then \u0026ldquo;Infinity Pool\u0026rdquo; is a must-watch. It\u0026rsquo;s my favorite movie of the month and I would highly recommend it to anyone looking for a dark and unforgettable adventure.\nRead on Letterboxd\nGonjiam: Haunted Asylum, 2018 - ★★★ Watched on: 12 February 2023\nReview\nGonjiam: Haunted Asylum is like a scary live-stream that goes viral, but with more ghosts and fewer influencers. The first half sets up the spooky story and the characters, but it moves slower than a snail on a treadmill. The second half delivers the thrills and chills, leaving your brain scrambled like an egg on a hot skillet. And those last 10 minutes? Legendary. But let\u0026rsquo;s be real, you\u0026rsquo;ll need to watch it late at night, by yourself, and with the lights off to fully appreciate the creep factor. Overall, it\u0026rsquo;s worth the watch if you\u0026rsquo;re in the mood for a haunted house tale, just don\u0026rsquo;t expect it to be a scream fest.\nRead on Letterboxd\nIncantation, 2022 - ★★★ Watched on: 12 February 2023\nReview\nIncantation is a creepy and culty movie that\u0026rsquo;s not for the faint of heart. While it may not scare everyone, it certainly delivers on the visuals and the alternative vibes. The movie draws from a dark place that can be difficult to relate to, but it\u0026rsquo;s still intriguing to watch. The imagery can be downright terrifying, especially if you\u0026rsquo;re invested in the lore. The PoV scenes are done well and add a nice touch to the film. However, the ending is predictable and overacted, which can detract from the overall experience.If you\u0026rsquo;re into horror movies that involve cults and incantations, this might be up your alley. The movie feels like a cross between The Blair Witch Project and Paranormal Activity, with a ton of lore surrounding the incantation itself. The source material is unique, and the visuals make it worth the watch. But if you\u0026rsquo;re looking for a scream-fest, this might not be the movie for you. Overall, Incantation is worth checking out if you\u0026rsquo;re into the genre, just don\u0026rsquo;t expect it to blow your mind.\nRead on Letterboxd\nA Cure for Wellness, 2016 - ★★★★ Watched on: 10 February 2023\nReview\nA Cure for Wellness is a phantasmagorical tale that will take you on a journey through the depths of the human psyche. Mia Goth once again delivers a great performance, and the movie is filled with creepy experiments in basements, shady castles, and Victorian locations that will leave you on edge. I enjoyed the acting, drama, and intimate scenes, but what really stands out is the lore surrounding the central location of the plot. It\u0026rsquo;s all tied together seamlessly, and the ending may be a bit overblown but it\u0026rsquo;s still a satisfying conclusion.Overall, this movie is a must-watch for anyone who loves dark and vividly charming tales. It\u0026rsquo;s a perfect blend of horror and mystery, with a fantastic cast and captivating storyline. The Victorian locations and eerie atmosphere create an immersive experience that\u0026rsquo;s hard to forget. If you\u0026rsquo;re a fan of movies like Crimson Peak, you\u0026rsquo;ll definitely appreciate A Cure for Wellness. So, don\u0026rsquo;t miss out on this gem of a movie!\nRead on Letterboxd\nT2 Trainspotting, 2017 - ★★★½ Watched on: 07 February 2023\nReview\nT2 Trainspotting is the long-awaited sequel to the cult classic movie, and it definitely delivers. The jokes are still relevant and updated for the modern age, and the throwbacks and references to the events of the first film are awesome. The same old characters are back, and their charming British rows are a joy to watch.Dialogue and drama are the centerpiece of this movie, with bar fights, epic monologues, and disastrous yet comedic situations that will keep you entertained from start to finish. While the ending may be a bit of a letdown, it\u0026rsquo;s still a self-contained narrative that stands on its own.Overall, T2 Trainspotting is a great movie that will leave you feeling nostalgic and satisfied. It\u0026rsquo;s a must-watch for fans of the original film, and even those who haven\u0026rsquo;t seen it will appreciate the witty dialogue and engaging storyline. So, grab some popcorn and settle in for a wild ride with the gang from Trainspotting!\nRead on Letterboxd\nSolaris, 1972 - ★★★ Watched on: 07 February 2023\nReview\n\u0026ldquo;Space, the final frontier,\u0026rdquo; or so it goes in \u0026ldquo;Solaris,\u0026rdquo; a sci-fi movie that\u0026rsquo;s about as poetic as it is long-winded. Clocking in at three hours, it\u0026rsquo;s definitely not for the faint of heart, but if you\u0026rsquo;re up for some slow-burn, existential dread, then this might be your cup of tea. The movie\u0026rsquo;s iconic stares and old-school visual effects give it a certain charm, but there\u0026rsquo;s no denying that it\u0026rsquo;s a product of its time. The plot centers around a sentient water body on an alien planet that manipulates the psyche of the people that come into contact with it, exploring the ethics and morality of what it means to be a being. While the narrative does fit well with the book, the movie could have definitely been trimmed down. All in all, \u0026ldquo;Solaris\u0026rdquo; is a tale that\u0026rsquo;s worth checking out if you\u0026rsquo;re in the mood for something slow and thought-provoking.\nRead on Letterboxd\nSpring Breakers, 2012 - ★½ Watched on: 05 February 2023\nReview\n\u0026ldquo;Spring Breakers\u0026rdquo; is a movie that\u0026rsquo;s all style and no substance. With gratuitous skin shots and an ostentatious display of wealth, it\u0026rsquo;s hard to find any real depth in this flick. The plot is highly unrealistic, following a group of girls who fall for a mob boss and get caught up in a world of gunshots and reckless behavior. While the mob boss does drop a few memorable lines, it\u0026rsquo;s not enough to make up for the lack of substance in the rest of the film. The only redeeming qualities are the good music, some smart jokes and banter, and decent cinematography. Overall, \u0026ldquo;Spring Breakers\u0026rdquo; is a bad dream of a movie that\u0026rsquo;s not worth your time if you\u0026rsquo;re looking for any sort of thrill or excitement. Save your money and watch something else.\nRead on Letterboxd\nBabylon, 2022 - ★★★½ Watched on: 01 February 2023\nReview\nLights, camera, action! \u0026ldquo;Babylon\u0026rdquo; takes us back to the golden age of Hollywood with all the extravagance and drama we\u0026rsquo;ve come to expect. Margot Robbie delivers a standout performance, stealing every scene she\u0026rsquo;s in. The costume and set design are equally over the top, transporting us back to the era in all its glory. What really sets this movie apart is its portrayal of the art and mastery of theatre. The acting is top-notch, and the behind-the-scenes scenes are both intriguing and entertaining. The music choices are also spot on, adding to the overall vibe of the film. \u0026ldquo;Babylon\u0026rdquo; is definitely an over-the-top movie, with a surreal and grounding philosophical touch that feels like it was directed by Tarantino himself. It\u0026rsquo;s a banger of a movie, and a huge artistic milestone. Overall, \u0026ldquo;Babylon\u0026rdquo; is a must-see for anyone who loves the glitz and glamour of old Hollywood.\nRead on Letterboxd\n","permalink":"https://atharvashah.netlify.app/posts/personal/movie-review/february-2023/","summary":"February was a month for the ages as I indulged in a smorgasbord of movies. From the laugh-out-loud comedy of \u0026ldquo;Rush Hour\u0026rdquo; to the mind-bending sci-fi of \u0026ldquo;Solaris\u0026rdquo; and everything in between, I\u0026rsquo;ve got a lot to say about the films I watched. There were some classics from the past like \u0026ldquo;Nausicaä of the Valley of the Wind\u0026rdquo; and \u0026ldquo;Porco Rosso,\u0026rdquo; as well as newer releases like \u0026ldquo;Infinity Pool\u0026rdquo; and \u0026ldquo;Babylon.","title":"February 2023 Movies: Love and the Big Screen"},{"content":" Querying Django Models with Examples Terminology Models Used in the Examples QuerySet API Exercises Query 1: Fetching all books from the database Query 2: Fetching selected columns from the Books table Query 3: Filtering records based on a condition Query 4: Filtering records based on multiple conditions Query 5: Searching records based on a substring Query 6: Retrieve authors with specific primary keys Query 7: Retrieve authors who joined after a specific date Query 8: Retrieve distinct publisher last name Query 9: Retrieve the latest joined author and the earliest joined publisher Query 10: Retrieve the first name, last name, and join date of the most recently joined author Query 11: Retrieve Authors Joined After 2013 Query 12: Calculate Total Price of Books Written by Popular Authors Query 13: Retrieve Titles of Books Written by Authors with \u0026lsquo;a\u0026rsquo; in their Firstname Query 14: Calculate Average Book Price of Selected Authors Query 15: Retrieve first name of authors and their recommended author\u0026rsquo;s first name Query 16: Retrieve authors whose books are published by a specific publisher Query 17: Add followers to an author Query 18: Set followers for an author Query 19: Add a follower to an author Query 20: Remove a follower from an author Query 21: Retrieve the first names of all authors followed by the user with primary key (pk) equal to 1 Query 22: Retrieve all authors who have books with titles containing the string \u0026ldquo;tle\u0026rdquo; Query 23: Retrieve all authors whose first name starts with the letter \u0026ldquo;a\u0026rdquo; and either have a popularity score greater than 5 or joined the platform after the year 2014 Query 24: Retrieve the author with primary key (pk) equal to 1 Query 25: Retrieve the first 10 authors in the database Query 26: Retrieve the first and last author in the database with a popularity score of 7 Query 27: Retrieve all authors whose joindate year is greater than or equal to 2012, popularity_score is greater than or equal to 4, joindate day is greater than or equal to 12, and firstname starts with \u0026lsquo;a\u0026rsquo; Query 28: Retrieve all authors whose joindate year is not equal to 2012 Query 29: Retrieve the oldest joindate among all authors, the newest joindate among all authors, the average popularity_score of all authors, and the sum of price of all books Query 30: Retrieve all authors who have not been recommended by anyone Query 31: Retrieve all books that have an author, and all books that have an author who has not been recommended by anyone Query 32: Calculate the sum of the price of all books authored by the author with primary key (pk) equal to 1 Query 33: Retrieve the title of the most recently published book Query 34: Calculate the average price of all books Query 35: Calculate the maximum popularity score of all the publishers that have published a book written by the author with primary key 1 Query 36: Count Authors with Books containing \u0026lsquo;ab\u0026rsquo; in the title Query 37: Filter Authors by Number of Followers Query 38: Average Popularity Score of Authors who joined after 20th Sep 2014 Query 39: Filter Books by Authors who have written more than 10 Books Query 40: Filter Books by Title Count Conclusion Querying Django Models with Examples In Django, querying the database is an essential task when working with models. Django\u0026rsquo;s QuerySet API provides an extensive range of methods to query the database efficiently.\nIn this article, we\u0026rsquo;ll go over several examples of how to query Django models using the QuerySet API, along with code snippets that demonstrate the functionality of each method.\nTerminology Let us first go over some of the terminology that is used in conjunction with the QuerySet API. The following terms are used in the examples below:\nModels: Django models are Python classes that define the structure and behavior of database tables. They encapsulate fields and relationships and provide methods to interact with the data. QuerySets: QuerySets are objects that allow you to retrieve, filter, and manipulate data from the database. They are lazy, meaning that they only fetch data when needed, and can be chained together to form complex queries. Managers: Managers provide methods for working with QuerySets. They allow you to create reusable queries and define custom methods to retrieve data from the database. Fields: Fields define the type of data that can be stored in a model\u0026rsquo;s attribute or database column. They provide validation and conversion of input data and map to the appropriate SQL type. Migrations: Migrations allow you to modify the database schema and keep track of changes to models over time. They provide a convenient way to manage changes to the database schema and apply them to the database. Database routers: Database routers allow you to specify which database to use for different models or queries. They allow you to distribute data across multiple databases or use different databases for read and write operations. Aggregation: Aggregation provides methods for performing calculations on QuerySets, such as Sum, Count, Avg, and Max. They are used to retrieve statistics or summary information about the data in the database. Annotations: Annotations allow you to add calculated fields to QuerySets based on database functions or other fields. They are used to add computed or aggregated data to QuerySets. Meta options: Meta options provide additional settings for models, such as ordering, database table names, and unique constraints. They allow you to customize the behavior of models at the class level. Models Used in the Examples The following models are used in the examples below. Take a look at the code to get a better understanding of the relationships between the models.\nfrom django.db import models class Author(models.Model): firstname = models.CharField(max_length=100) lastname = models.CharField(max_length=100) address = models.CharField(max_length=200, null=True) zipcode = models.IntegerField(null=True) telephone = models.CharField(max_length=100, null=True) recommendedby = models.ForeignKey(\u0026#39;Author\u0026#39;, on_delete=models.CASCADE, related_name=\u0026#39;recommended_authors\u0026#39;, related_query_name=\u0026#39;recommended_authors\u0026#39;, null=True) joindate = models.DateField() popularity_score = models.IntegerField() followers = models.ManyToManyField(\u0026#39;User\u0026#39;, related_name=\u0026#39;followed_authors\u0026#39;, related_query_name=\u0026#39;followed_authors\u0026#39;) def __str__(self): return self.firstname + \u0026#39; \u0026#39; + self.lastname class Books(models.Model): title = models.CharField(max_length=100) genre = models.CharField(max_length=200) price = models.IntegerField(null=True) published_date = models.DateField() author = models.ForeignKey(\u0026#39;Author\u0026#39;, on_delete=models.CASCADE, related_name=\u0026#39;books\u0026#39;, related_query_name=\u0026#39;books\u0026#39;) publisher = models.ForeignKey(\u0026#39;Publisher\u0026#39;, on_delete=models.CASCADE, related_name=\u0026#39;books\u0026#39;, related_query_name=\u0026#39;books\u0026#39;) def __str__(self): return self.title class Publisher(models.Model): firstname = models.CharField(max_length=100) lastname = models.CharField(max_length=100) recommendedby = models.ForeignKey(\u0026#39;Publisher\u0026#39;, on_delete=models.CASCADE, null=True) joindate = models.DateField() popularity_score = models.IntegerField() def __str__(self): return self.firstname + \u0026#39; \u0026#39; + self.lastname class User(models.Model): username = models.CharField(max_length=100) email = models.CharField(max_length=100) def __str__(self): return self.username QuerySet API Exercises Query 1: Fetching all books from the database Explanation: The all() method returns all the records from the model it is called on. In this case, it will fetch all the records from the Books model. The Books model is assumed to be defined in the main app.\nresult1 = Books.objects.all() Query 2: Fetching selected columns from the Books table result2 = Books.objects.all().values_list(\u0026#39;title\u0026#39;, \u0026#39;published_date\u0026#39;) Explanation: The values_list() method is used to retrieve specific columns from the model. In this case, only the title and published_date columns are selected.\nQuery 3: Filtering records based on a condition result3 = Authors.objects.all().filter(popularity_score=0).values_list(\u0026#39;firstname\u0026#39;, \u0026#39;lastname\u0026#39;) Explanation: The filter() method is used to retrieve records that match a specific condition. In this case, the condition is that popularity_score should be equal to 0. The values_list() method is used to retrieve only the firstname and lastname fields from the retrieved records.\nQuery 4: Filtering records based on multiple conditions result4 = Authors.objects.all().filter(firstname__startswith=\u0026#39;a\u0026#39;, popularity_score__gte=8).values_list(\u0026#39;firstname\u0026#39;, \u0026#39;popularity_score\u0026#39;) Explanation: The filter() method is used to retrieve records that match multiple conditions. In this case, the conditions are that firstname should start with \u0026lsquo;a\u0026rsquo; and popularity_score should be greater than or equal to 8. The values_list() method is used to retrieve only the firstname and popularity_score fields from the retrieved records.\nQuery 5: Searching records based on a substring result5 = Authors.objects.all().filter(firstname__icontains=\u0026#39;aa\u0026#39;).values_list(\u0026#39;firstname\u0026#39;) Explanation: The filter() method is used to retrieve records that contain a specific substring. In this case, the substring is \u0026lsquo;aa\u0026rsquo;. The values_list() method is used to retrieve only the firstname field from the retrieved records. The icontains lookup is used to perform a case-insensitive search for the specified substring.\nQuery 6: Retrieve authors with specific primary keys result6 = Authors.objects.all().filter(pk__in=[1, 3, 23, 43, 134, 25]) Explanation: The filter() method is used to retrieve authors with primary keys specified in the pk__in argument. The pk in pk__in stands for primary key. In this case, the primary keys are [1, 3, 23, 43, 134, 25].\nQuery 7: Retrieve authors who joined after a specific date result7 = Authors.objects.all().filter(joindate__gte=datetime.date(year=2012, month=9, day=1)).order_by(\u0026#39;joindate\u0026#39;).values_list(\u0026#39;firstname\u0026#39;, \u0026#39;joindate\u0026#39;) Explanation: The filter() method is used to retrieve authors who joined after September 1, 2012, using the joindate__gte lookup. The gte in joindate__gte stands for greater than or equal to. The results are ordered by joindate in ascending order using the order_by() method. Only the firstname and joindate fields are selected using the values_list() method.\nQuery 8: Retrieve distinct publisher last name result8 = Publishers.objects.all().order_by(\u0026#39;lastname\u0026#39;).values_list(\u0026#39;lastname\u0026#39;).distinct()[:10] Explanation: The distinct() method is used to retrieve distinct last names of all publishers in ascending order using the order_by() method. Only the lastname field is selected using the values_list() method. The first 10 results are selected using slicing [:10].\nQuery 9: Retrieve the latest joined author and the earliest joined publisher result9 = [Authors.objects.all().order_by(\u0026#39;joindate\u0026#39;).last(), Publishers.objects.all().order_by(\u0026#39;-joindate\u0026#39;).first()] Explanation: Two queries are executed here, one to retrieve the latest joined author and one to retrieve the earliest joined publisher. In the first query, the last() method is used to retrieve the latest joined author. In the second query, the order_by('-joindate') method is used to order the publishers by joindate in descending order, and the first() method is used to retrieve the earliest joined publisher.\nQuery 10: Retrieve the first name, last name, and join date of the most recently joined author result10 = Authors.objects.all().order_by(\u0026#39;-joindate\u0026#39;).values_list(\u0026#39;firstname\u0026#39;, \u0026#39;lastname\u0026#39;, \u0026#39;joindate\u0026#39;).first() Explanation: The order_by('-joindate') method is used to order the authors by joindate in descending order. Only the firstname, lastname, and joindate fields are selected using the values_list() method. The first() method is used to retrieve the first row of the resulting queryset, which contains the most recent joined author in the database.\nQuery 11: Retrieve Authors Joined After 2013 result11 = Authors.objects.all().filter(joindate__year__gte=2013) Explanation: This query retrieves all authors who joined after 2013. The filter() method is used to specify the condition. Here, the joindate field is filtered by its year attribute to retrieve all authors who joined after 2013.\nresult11 = Authors.objects.all().filter(joindate__year__gte=2013) Query 12: Calculate Total Price of Books Written by Popular Authors result12 = Books.objects.all().filter(author__popularity_score__gte=7).aggregate(total_book_price=Sum(\u0026#39;price\u0026#39;)) Explanation: This query calculates the total price of all books written by authors with a popularity score of 7 or greater. The filter() method is used to filter the books based on the popularity_score of their respective authors. The aggregate() method is used to calculate the total price of all books using the Sum() function.\nresult12 = Books.objects.all().filter(author__popularity_score__gte=7).aggregate(total_book_price=Sum(\u0026#39;price\u0026#39;)) Query 13: Retrieve Titles of Books Written by Authors with \u0026lsquo;a\u0026rsquo; in their Firstname result13 = Books.objects.all().filter(author__firstname__icontains=\u0026#39;a\u0026#39;).values_list(\u0026#39;title\u0026#39;, flat=True) Explanation: This query retrieves the titles of all books written by authors whose firstname contains the lowercase letter \u0026lsquo;a\u0026rsquo;. The filter() method is used to filter the books based on the firstname of their respective authors. The values_list() method is used to retrieve only the title field of the resulting queryset. The flat=True parameter is used to return the resulting queryset as a flat list.\nresult13 = Books.objects.all().filter(author__firstname__contains=\u0026#39;a\u0026#39;).values_list(\u0026#39;title\u0026#39;, flat=True) Query 14: Calculate Average Book Price of Selected Authors result14 = Books.objects.all().filter(author__pk__in=[1, 3, 4]).aggregate(\u0026#39;price\u0026#39;) Explanation: This query calculates the average price of all books written by a selected group of authors. The filter() method is used to select the authors based on their primary key values. The aggregate() method is used to calculate the average price of all books using the Avg() function.\nQuery 15: Retrieve first name of authors and their recommended author\u0026rsquo;s first name result15 = Authors.objects.all().values_list(\u0026#39;firstname\u0026#39;, \u0026#39;recommendedby__firstname\u0026#39;) Explanation: This query uses the values_list() method to retrieve the first name of authors and their recommended author\u0026rsquo;s first name. The recommendedby__firstname attribute is used to access the first name of the recommended author.\nQuery 16: Retrieve authors whose books are published by a specific publisher result16 = Authors.objects.all().filter(books__publisher__pk=1) Explanation: This query uses the filter() method to retrieve all authors whose books are published by a specific publisher. The books__publisher__pk attribute is used to access the publisher\u0026rsquo;s primary key.\nQuery 17: Add followers to an author user1 = Users.objects.create(username=\u0026#39;user1\u0026#39;, email=\u0026#39;user1@test.com\u0026#39;) user2 = Users.objects.create(username=\u0026#39;user2\u0026#39;, email=\u0026#39;user2@test.com\u0026#39;) user3 = Users.objects.create(username=\u0026#39;user3\u0026#39;, email=\u0026#39;user3@test.com\u0026#39;) result17 = Authors.objects.get(pk=1).followers.add(user1, user2, user3) Explanation: This query uses the add() method to add multiple followers to an author. The get() method is used to retrieve the author with the specified primary key.\nQuery 18: Set followers for an author user1 = Users.objects.create(username=\u0026#39;user1\u0026#39;, email=\u0026#39;user1@test.com\u0026#39;) result18 = Authors.objects.get(pk=2).followers.set(user1) Explanation: This query uses the set() method to set the followers for an author. The get() method is used to retrieve the author with the specified primary key.\nQuery 19: Add a follower to an author user1 = Users.objects.create(username=\u0026#39;user1\u0026#39;, email=\u0026#39;user1@test.com\u0026#39;) result19 = Authors.objects.get(pk=1).followers.add(user1) Explanation: This query uses the add() method to add a follower to an author. The get() method is used to retrieve the author with the specified primary key.\nQuery 20: Remove a follower from an author user1 = Users.objects.create(username=\u0026#39;user1\u0026#39;, email=\u0026#39;user1@test.com\u0026#39;) result20 = Authors.objects.get(pk=1).followers.remove(user1) Explanation: This query uses the remove() method to remove a follower from an author. The get() method is used to retrieve the author with the specified primary key.\nQuery 21: Retrieve the first names of all authors followed by the user with primary key (pk) equal to 1 result21 = Users.objects.get(pk=1).followed_authors.all().values_list(\u0026#39;firstname\u0026#39;, flat=True) Explanation: This code uses a foreign key relationship between the Users and Authors models to retrieve all authors followed by a specific user with a primary key of 1. The values_list method with flat=True is used to return a flat list of only the first names of the authors.\nQuery 22: Retrieve all authors who have books with titles containing the string \u0026ldquo;tle\u0026rdquo; result22 = Authors.objects.all().filter(books__title__icontains=\u0026#39;tle\u0026#39;) Explanation: This code uses a reverse foreign key relationship between the Authors and Books models to retrieve all authors who have books with titles containing the string \u0026ldquo;tle\u0026rdquo;. The filter method is used to apply the filter condition. The __icontains lookup is used to perform a case-insensitive match on the book title.\nQuery 23: Retrieve all authors whose first name starts with the letter \u0026ldquo;a\u0026rdquo; and either have a popularity score greater than 5 or joined the platform after the year 2014 result23 = Authors.objects.filter(Q(firstname__istartswith=\u0026#39;a\u0026#39;) \u0026amp; (Q(popularity_score__gt=5) | Q(joindate__year__gt=2014))) Explanation: This code retrieves all authors whose first name starts with the letter \u0026ldquo;a\u0026rdquo; and satisfies at least one of the two conditions:\npopularity score greater than 5 joined the platform after the year 2014. It uses the filter method with a combination of Q objects to create a complex query with multiple conditions. The __istartswith lookup is used to perform a case-insensitive match on the author\u0026rsquo;s first name, and the __gt lookup is used to retrieve records with a value greater than the specified number or date. Query 24: Retrieve the author with primary key (pk) equal to 1 result24 = Authors.objects.all().get(pk=1) Explanation: This code retrieves the author record with a primary key (pk) equal to 1 using the get method. It assumes that the Authors model has a primary key field named pk.\nQuery 25: Retrieve the first 10 authors in the database result25 = Authors.objects.all().order_by(\u0026#39;joindate\u0026#39;)[:10] Explanation: This code retrieves the first 10 authors in the database using the slice notation [:10]. It returns a queryset containing the first 10 records from the Authors model in the order they were created.\nQuery 26: Retrieve the first and last author in the database with a popularity score of 7 qs = Authors.objects.all().filter(popularity_scre=7) author1 = qs.first() author2 = qs.last() result26 = [author1, author2] Explanation: This query retrieves all the authors with a popularity_score of 7, then gets the first and last author in that queryset, and stores them in a list.\nQuery 27: Retrieve all authors whose joindate year is greater than or equal to 2012, popularity_score is greater than or equal to 4, joindate day is greater than or equal to 12, and firstname starts with \u0026lsquo;a\u0026rsquo; result27 = Authors.objects.all().filter(joindate__year__gte=2012, popularity_score__gte=4, joindate__day__gte=12, firstame__istartswith=\u0026#39;a\u0026#39;) Explanation: This query retrieves all the authors whose joindate year is greater than or equal to 2012, popularity_score is greater than or equal to 4, joindate day is greater than or equal to 12, and firstname starts with \u0026lsquo;a\u0026rsquo;.\nQuery 28: Retrieve all authors whose joindate year is not equal to 2012 result28 = Authors.objects.all().exclude(joindate__year=2012) Explanation: This query retrieves all the authors whose joindate year is not equal to 2012.\nQuery 29: Retrieve the oldest joindate among all authors, the newest joindate among all authors, the average popularity_score of all authors, and the sum of price of all books oldest_author = Authors.objects.all().aggregate(Min(\u0026#39;joindate\u0026#39;)) newest_author = Authors.objects.all().aggregate(Max(\u0026#39;joindate\u0026#39;)) avg_pop_score = Authors.objects.all().aggregate(Avg(\u0026#39;popularity_score\u0026#39;)) sum_price = Books.objects.all().aggregate(Sum(\u0026#39;price\u0026#39;)) result29 = [oldest_author, newest_author, avg_pop_score, sum_price] Explanation: This query retrieves the oldest joindate among all authors, the newest joindate among all authors, the average popularity_score of all authors, and the sum of price of all books, and stores them in a list.\nQuery 30: Retrieve all authors who have not been recommended by anyone result30 = Authors.objects.all().filter(recommendedby__isnull=True) Explanation: This query selects all authors who have not been recommended by anyone (i.e., they don\u0026rsquo;t have a recommendedby field value).\nQuery 31: Retrieve all books that have an author, and all books that have an author who has not been recommended by anyone one = Books.objects.all().filter(author__isnull=False) two = Books.objects.all().filter(author__isnull=False, author__recommender__isnull=True) result31 = [one, two] Explanation: This query retrieves all books that have an author (i.e., author__isnull=False). The first query in the list (one) retrieves all books with an author, while the second query (two) filters the first query to only include books where the author has not been recommended by anyone (i.e., author__recommender__isnull=True).\nQuery 32: Calculate the sum of the price of all books authored by the author with primary key (pk) equal to 1 result32 = Books.objects.all().filter(author__pk=1).aggregate(Sum(\u0026#39;price\u0026#39;)) Explanation: This query calculates the sum of the price of all books authored by the author with primary key (PK) equal to 1. It uses the aggregate() method to compute the sum, and the Sum() function to specify the aggregation operation.\nQuery 33: Retrieve the title of the most recently published book result33 = Books.objects.all().order_by(\u0026#39;published_date\u0026#39;).last().title Explanation: This query retrieves the title of the most recently published book. It does so by first ordering all the books by their published date in ascending order, and then selecting the last book from this list.\nQuery 34: Calculate the average price of all books result34 = Books.objects.all().aggregate(Avg(\u0026#39;price\u0026#39;)) Explanation: This query computes the average price of all the books in the database. It does so by using the aggregate() method on the queryset, with the Avg() function as the argument. The Avg() function is a database function that computes the average of a given column.\nQuery 35: Calculate the maximum popularity score of all the publishers that have published a book written by the author with primary key 1 result35 = Publishers.objects.filter(books__author__pk=1).aggregate(Max(\u0026#39;popularity_score\u0026#39;)) Explanation: This query computes the maximum popularity score of all the publishers that have published a book written by the author with primary key 1. It does so by first filtering the Publishers queryset by the books that have been authored by the author with primary key 1. Then, it uses the aggregate() method with the Max() function to compute the maximum popularity score of these publishers.\nQuery 36: Count Authors with Books containing \u0026lsquo;ab\u0026rsquo; in the title result36 = Authors.objects.filter(books__title__icontains=\u0026#39;ab\u0026#39;).count() Explanation: This query counts the number of authors who have written at least one book that contains \u0026lsquo;ab\u0026rsquo; (case-insensitive) in the title.\nQuery 37: Filter Authors by Number of Followers result37 = Authors.objects.annotate(f_count=Count(\u0026#39;followers\u0026#39;)).filter(f_count__gt=216) Explanation: This query annotates each author with the number of followers they have and then filters the authors to only include those with more than 216 followers.\nQuery 38: Average Popularity Score of Authors who joined after 20th Sep 2014 result38 = Authors.objects.filter(joindate__gt=datetime.date(year=2014, month=9, day=20)).aggregate(Avg(\u0026#39;popularity_score\u0026#39;)) Explanation: This query filters authors who joined after 20th Sep 2014 and then calculates the average popularity score of those authors.\nQuery 39: Filter Books by Authors who have written more than 10 Books result39 = Books.objects.all().annotate(bk_count=Count(\u0026#39;author__books\u0026#39;)).filter(bk_count__gt=10).distinct() Explanation: This query annotates each book with the number of authors who have written the book, then filters the books to only include those written by authors who have written more than 10 books. The distinct() method is called to eliminate duplicate books that have multiple authors.\nQuery 40: Filter Books by Title Count result40 = Books.objects.all().annotate(count_title=Count(\u0026#39;title\u0026#39;)).filter(count_title__gt=1) Explanation: This query annotates each book with the count of books that share the same title, then filters the books to only include those with a title count greater than 1. This could be useful, for example, to find books that have been republished under different titles.\nConclusion In conclusion, this Django ORM cheatsheet and exercises blog post provided an overview of the essential elements of Django\u0026rsquo;s ORM. We covered models, querysets, managers, fields, migrations, database routers, aggregation, annotations, and meta options. Each of these elements plays a crucial role in developing robust and scalable applications with Django.\nBy working through the exercises, we learned how to use these elements to query and manipulate data from the database. These exercises provided practical examples of how to use Django\u0026rsquo;s ORM to solve real-world problems.\nDjango\u0026rsquo;s ORM is a powerful tool that provides a high-level, intuitive interface for interacting with databases. It enables developers to write concise and readable code while also handling complex queries and transactions. By mastering Django\u0026rsquo;s ORM, developers can build robust, scalable, and maintainable applications with ease.\n","permalink":"https://atharvashah.netlify.app/posts/tech/django-orm-exercises/","summary":"Querying Django Models with Examples Terminology Models Used in the Examples QuerySet API Exercises Query 1: Fetching all books from the database Query 2: Fetching selected columns from the Books table Query 3: Filtering records based on a condition Query 4: Filtering records based on multiple conditions Query 5: Searching records based on a substring Query 6: Retrieve authors with specific primary keys Query 7: Retrieve authors who joined after a specific date Query 8: Retrieve distinct publisher last name Query 9: Retrieve the latest joined author and the earliest joined publisher Query 10: Retrieve the first name, last name, and join date of the most recently joined author Query 11: Retrieve Authors Joined After 2013 Query 12: Calculate Total Price of Books Written by Popular Authors Query 13: Retrieve Titles of Books Written by Authors with \u0026lsquo;a\u0026rsquo; in their Firstname Query 14: Calculate Average Book Price of Selected Authors Query 15: Retrieve first name of authors and their recommended author\u0026rsquo;s first name Query 16: Retrieve authors whose books are published by a specific publisher Query 17: Add followers to an author Query 18: Set followers for an author Query 19: Add a follower to an author Query 20: Remove a follower from an author Query 21: Retrieve the first names of all authors followed by the user with primary key (pk) equal to 1 Query 22: Retrieve all authors who have books with titles containing the string \u0026ldquo;tle\u0026rdquo; Query 23: Retrieve all authors whose first name starts with the letter \u0026ldquo;a\u0026rdquo; and either have a popularity score greater than 5 or joined the platform after the year 2014 Query 24: Retrieve the author with primary key (pk) equal to 1 Query 25: Retrieve the first 10 authors in the database Query 26: Retrieve the first and last author in the database with a popularity score of 7 Query 27: Retrieve all authors whose joindate year is greater than or equal to 2012, popularity_score is greater than or equal to 4, joindate day is greater than or equal to 12, and firstname starts with \u0026lsquo;a\u0026rsquo; Query 28: Retrieve all authors whose joindate year is not equal to 2012 Query 29: Retrieve the oldest joindate among all authors, the newest joindate among all authors, the average popularity_score of all authors, and the sum of price of all books Query 30: Retrieve all authors who have not been recommended by anyone Query 31: Retrieve all books that have an author, and all books that have an author who has not been recommended by anyone Query 32: Calculate the sum of the price of all books authored by the author with primary key (pk) equal to 1 Query 33: Retrieve the title of the most recently published book Query 34: Calculate the average price of all books Query 35: Calculate the maximum popularity score of all the publishers that have published a book written by the author with primary key 1 Query 36: Count Authors with Books containing \u0026lsquo;ab\u0026rsquo; in the title Query 37: Filter Authors by Number of Followers Query 38: Average Popularity Score of Authors who joined after 20th Sep 2014 Query 39: Filter Books by Authors who have written more than 10 Books Query 40: Filter Books by Title Count Conclusion Querying Django Models with Examples In Django, querying the database is an essential task when working with models.","title":"Ultimate Django ORM Cheatsheet + Exercises"},{"content":"Introduction Are you tired of spending hours designing UML diagrams for your projects? Look no further than ChatGPT, a powerful language model that can generate PlantUML code based on your project description. In this tutorial, we will guide you through the steps to use ChatGPT to generate UML diagrams for your projects in just a few clicks.\nStep 1: Write Your Project Description The first step is to write your project description or title. ChatGPT can generate UML diagrams for a wide range of projects, from software systems to business processes. Write a concise and clear description of your project, and if you need help, you can ask ChatGPT to generate it for you.\n📃 Get the prompt here\nI want to generate several UML diagrams for my project based on the details below. Provide the PlantUML code for the same. Make it detailed and expansive and feel free to add your own ideas to it as well. Topic- [ENTER YOUR TOPIC HERE] Description - [ENTER DETAILED DESCRIPTION HERE] Give me the Use Case Diagram PlantUML code for the same. Step 2: Ask ChatGPT to Generate PlantUML Code Once you have your project description, you can ask ChatGPT to generate PlantUML code based on it. Be specific about the name of the diagrams you need and any other specifics that you require. ChatGPT can generate a wide range of diagrams, including use case diagrams, class diagrams, sequence diagrams, and more.\nStep 3: Copy and Paste the Generated Code to PlantText After ChatGPT generates the PlantUML code, copy and paste it into a PlantUML editor such as PlantText (https://www.planttext.com). The editor will render the image on the right side of the screen. You can modify the code to suit your needs or ask ChatGPT to regenerate the code based on your feedback.\nStep 4: Verify the Diagram and Make Tweaks if Necessary Verify if the diagram meets your expectations. If not, you can ask ChatGPT to make tweaks based on your feedback. Mention any actors, events, or features that were missing or incorrect and paste the regenerated code back into the editor. Once the diagram looks good, you can save it and use it in your project.\nStep 5: Rinse \u0026amp; Repeat for Other Diagrams ChatGPT\u0026rsquo;s UML diagram generation isn\u0026rsquo;t limited to just use case and sequence diagrams. You can also generate class diagrams, activity diagrams, and more by simply changing the name of the diagram in your prompt.\nFor example, if you want to generate a class diagram for your project, you can simply modify your prompt to include the words \u0026ldquo;class diagram\u0026rdquo; and provide any additional details required for your specific use case.\nOnce you have your modified prompt, follow the same process as before: ask ChatGPT to generate the PlantUML code, copy and paste it into PlantText, and verify that the diagram is as per your expectations.\nThis way, you can use ChatGPT to generate a variety of diagrams for your project quickly and easily, without having to spend hours manually creating them. With the time you save, you can focus on other aspects of your project and make it even more successful.\nConclusion Using ChatGPT to generate UML diagrams is a quick and easy way to speed up your design process. With its ability to generate PlantUML code based on your project description, you can save hours of work and focus on other aspects of your project. Give it a try and see how it can benefit you in your next project.\n","permalink":"https://atharvashah.netlify.app/posts/tech/uml-diagrams-with-chatgpt/","summary":"Introduction Are you tired of spending hours designing UML diagrams for your projects? Look no further than ChatGPT, a powerful language model that can generate PlantUML code based on your project description. In this tutorial, we will guide you through the steps to use ChatGPT to generate UML diagrams for your projects in just a few clicks.\nStep 1: Write Your Project Description The first step is to write your project description or title.","title":"UML Diagrams with ChatGPT: Step-by-Step Tutorial"},{"content":"January 2023 brought a plethora of cinematic experiences my way, and I\u0026rsquo;m eager to share my take on them. From classic films to new releases, my viewing journey was diverse and exciting. This month I tackled a few movies that have been on my watchlist for a while, and I\u0026rsquo;m glad I finally got around to watching them. I enjoyed \u0026ldquo;The Menu\u0026rdquo; and \u0026ldquo;Moonrise Kingdom,\u0026rdquo; but I was disappointed by \u0026ldquo;To Die For.\u0026rdquo; I also watched a comedy special, and I was blown away by \u0026ldquo;Andrew Schulz: Infamous.\u0026rdquo; It\u0026rsquo;s one of the best comedy specials I\u0026rsquo;ve seen in a long time. Get your popcorn ready, because it\u0026rsquo;s time to dive into my January 2023 movie reviews!\nClick the banner below to follow me on Letterboxd and see what I\u0026rsquo;m watching next!\nTo Die For, 1995 - ★★½ Watched on: 31 January 2023\nReview\n\u0026ldquo;To Die For\u0026rdquo; starring Nicole Kidman is a movie that\u0026rsquo;s almost as convoluted as its title. Kidman\u0026rsquo;s portrayal of the narcissistic Suzanne Stone is the only thing that saves this film from total disaster. Her charm and magnetic personality are so enthralling that you almost forget that the plot makes little to no sense.The movie follows the life of a newlywed bride who befriends three teens and convinces them to murder her husband so she can gain media attention and hopefully land a big network deal. It\u0026rsquo;s like a twisted version of \u0026ldquo;Mean Girls,\u0026rdquo; but with more murder and less pink.While the movie tries to be a dark comedy, it falls short on both counts. The humor is forced, and the drama is too over-the-top to be taken seriously. The only thing that really works in \u0026ldquo;To Die For\u0026rdquo; is Kidman\u0026rsquo;s performance.Overall, \u0026ldquo;To Die For\u0026rdquo; is a forgettable film that tries too hard to be edgy and ends up feeling like a bad soap opera. If you\u0026rsquo;re a fan of crime comedies, you might get some enjoyment out of it, but don\u0026rsquo;t expect anything groundbreaking. It\u0026rsquo;s like \u0026ldquo;Gone Girl,\u0026rdquo; but without the suspense or the thrill.\nRead on Letterboxd\nAndrew Schulz: Infamous, 2022 - ★★★★ Watched on: 18 January 2023\nReview\n\u0026ldquo;Andrew Schulz: Infamous\u0026rdquo; is one of the best standup comedy specials in the modern era. Schulz\u0026rsquo;s unapologetic and unhinged style reminds me of Daniel Sloss, but with even more edge and attitude. He\u0026rsquo;s like a bulldozer, mowing down any sensitive snowflakes that dare to get in his way.Schulz\u0026rsquo;s stage presence and delivery are top-notch, and he doesn\u0026rsquo;t hold back when it comes to his material. From start to finish, there\u0026rsquo;s a nonstop barrage of jokes that feel improvised and natural, as if he\u0026rsquo;s just riffing off the top of his head.One of the best things about \u0026ldquo;Infamous\u0026rdquo; is how accurately Schulz portrays the current state of our society. He slays woke people right in their faces and makes them look stupid, which is both hilarious and refreshing. It\u0026rsquo;s a reminder that sometimes you need to take a step back and laugh at how ridiculous things have become.Overall, \u0026ldquo;Andrew Schulz: Infamous\u0026rdquo; is a must-watch for anyone who loves standup comedy. It\u0026rsquo;s edgy, unapologetic, and incredibly accurate. Schulz is a true master of his craft, and this special is a testament to his skills. Don\u0026rsquo;t miss out on this one!\nRead on Letterboxd\nBio Hunter, 1995 - ★★★ Watched on: 15 January 2023\nReview\n\u0026ldquo;Bio Hunter\u0026rdquo; is a strange and twisted movie that blends neo-noir crime, political thriller, and body horror into a bizarre but somehow enjoyable mix. I don\u0026rsquo;t remember much about the movie, but that\u0026rsquo;s probably because I watched it way past midnight and might have hallucinated some of the more gruesome scenes.The movie is definitely not for the faint of heart, as there\u0026rsquo;s a lot of blood and guts on display. But if you\u0026rsquo;re a fan of body horror, then you\u0026rsquo;ll probably enjoy the twisted visuals and grotesque special effects.Despite the strange mix of genres, \u0026ldquo;Bio Hunter\u0026rdquo; somehow manages to work, and it kept me engaged throughout. The political thriller elements added some depth to the story, while the neo-noir crime aspects gave it a gritty, noirish feel.Overall, \u0026ldquo;Bio Hunter\u0026rdquo; is a weird and wild ride that\u0026rsquo;s worth checking out if you\u0026rsquo;re a fan of horror movies. Just be prepared for a lot of blood and guts, and maybe don\u0026rsquo;t watch it too late at night if you\u0026rsquo;re prone to hallucinations.\nRead on Letterboxd\nWicked City, 1987 - ★★★½ Watched on: 15 January 2023\nReview\n\u0026ldquo;Wicked City\u0026rdquo; is a cool, neo-noir anime movie that\u0026rsquo;s a great addition to any collection. The movie nails the vibe and atmosphere of the old retro anime movies, with its dark color palette and dreamy, futuristic cityscape.The characters are memorable and well-designed, and the creature design is raw and rough, adding to the movie\u0026rsquo;s gritty and gory feel. Some scenes are downright vile, but that just adds to the movie\u0026rsquo;s overall appeal.Despite the dark and gritty tone, \u0026ldquo;Wicked City\u0026rdquo; has a dash of romance and action that keeps things interesting. And if you\u0026rsquo;re a fan of dubbed anime, you\u0026rsquo;ll be happy to know that the dialogues and audio are top-notch.One of my favorite things about \u0026ldquo;Wicked City\u0026rdquo; is the ending credit song, which is catchy and memorable. It\u0026rsquo;s a great way to cap off an enjoyable movie.Overall, \u0026ldquo;Wicked City\u0026rdquo; is a must-watch for any anime fan, especially those who love neo-noir and dark, gritty stories. It\u0026rsquo;s a great example of how anime can be both beautiful and gruesome at the same time.\nRead on Letterboxd\nBullet Train, 2022 - ★★★½ Watched on: 09 January 2023\nReview\n\u0026ldquo;Bullet Train\u0026rdquo; is like a crazy mix of Snatch, Kill Bill, John Wick, and Murder on the Orient Express, all rolled into one highly entertaining action-comedy! It\u0026rsquo;s a bit outrageous and not meant to be taken too seriously, but that\u0026rsquo;s part of what makes it so much fun.The movie is filled with plenty of funny and memorable characters and moments, and the visuals and cinematography are soaked in a beautiful neon glow that really adds to the movie\u0026rsquo;s overall style. The action is awesome, well-shot, and brutal, which is no surprise coming from the guy who helped create John Wick and directed Atomic Blonde, Deadpool 2, and Hobbs and Shaw!One unique thing about \u0026ldquo;Bullet Train\u0026rdquo; is that every character gets a few minutes of introduction, which breaks the flow of the story a bit, but it\u0026rsquo;s also quite funny. By the end of the movie, even a water bottle gets a title sequence and backstory!While \u0026ldquo;Bullet Train\u0026rdquo; isn\u0026rsquo;t a constant stream of one-liners, the situational and compositional comedy really works, and it won\u0026rsquo;t age out of its comedy in the same way that movies with pop culture references may.Overall, if you\u0026rsquo;re looking for an action-packed, visually stunning, and highly entertaining movie, then \u0026ldquo;Bullet Train\u0026rdquo; is definitely worth a watch. It\u0026rsquo;s a wild ride that\u0026rsquo;s sure to keep you on the edge of your seat!\nRead on Letterboxd\nMy Year of Dicks, 2022 - ★★★★ Watched on: 07 January 2023\nReview\nIt\u0026rsquo;s the story of a girl trying to get rid of her bothersome virginity, and the annoying assortment of boys who help and hinder her in her quest\u0026hellip;. plus a long and disgusting lecture from her father after she dares to ask her mother about the subject. This is worth an award, even if it came with a parental warning for anyone who didn\u0026rsquo;t see the title. A seductive and more adult themed short than most the ones nominated! Incredible colors, engaging, youthful, and well made! This short is focused on wanting to lose her virginity which is interesting and provocative. Seems like a weird one to be award worthy yet awesome and respectable how the main woman realizes to reject the necessary jerks.Plenty of cool moments, cute, charming, and romantic; well deserving of praise this is wonderful adult themed short.\nRead on Letterboxd\nThe Menu, 2022 - ★★★★½ Watched on: 03 January 2023\nReview\nThis movie is a feast for the eyes and the mind! With Anya Taylor-Joy\u0026rsquo;s impeccable acting, the attention to detail, and the exquisite camera work, The Menu is a masterpiece that deserves to be savored.The movie is set in a restaurant that caters to the richest and the most eccentric people, and it is an absolute thrill to watch the characters interact and the plot twists unfold. The film\u0026rsquo;s fine craftsmanship is evident in the microscopic details and the twists and turns that happen so often, you won\u0026rsquo;t even have time to finish your popcorn!The dialogue is cleverly written, and the characters are well fleshed out, making you care about their fates as much as the chef\u0026rsquo;s meticulously prepared courses. You\u0026rsquo;ll find yourself transported to the restaurant, feeling as if you are part of the party of messed-up rich people.All in all, The Menu is a must-see movie that is sure to leave you exhilarated, with the \u0026ldquo;burger\u0026rdquo; scene being one of the highlights. So put on your fancy pants and get ready to indulge in this delightful culinary experience!\nRead on Letterboxd\nMoonrise Kingdom, 2012 - ★★★★ Watched on: 01 January 2023\nReview\nMoonrise Kingdom, a sweet and touching film by Wes Anderson, will transport you back to the summer of 1965, where love and adventure are just a bike ride away. This quirky love story of two 12-year-olds, Sam and Suzy, is beautifully crafted and executed with Anderson\u0026rsquo;s signature style of meticulous set design and bright primary colors. The film is a celebration of youthful imagination and the innocence of young love, reminding us of a time when the world was full of possibilities and magic was just around the corner.Anderson\u0026rsquo;s inspiration from Rohal Dahl\u0026rsquo;s style is evident, as the film\u0026rsquo;s hyper-real world is not quite fantasy but filled with small bizarre details. The characters are all quirky, yet lovable, and their oddities add to the charm of the story. The film is well-acted, and the chemistry between the two young leads is palpable, making it easy to root for their star-crossed romance.Overall, Moonrise Kingdom is a must-watch for anyone who has experienced the pangs of young love or misses the boundless imagination of childhood. A touching and funny film that will leave you feeling warm and fuzzy inside.\nRead on Letterboxd\n","permalink":"https://atharvashah.netlify.app/posts/personal/movie-review/january-2023/","summary":"January 2023 brought a plethora of cinematic experiences my way, and I\u0026rsquo;m eager to share my take on them. From classic films to new releases, my viewing journey was diverse and exciting. This month I tackled a few movies that have been on my watchlist for a while, and I\u0026rsquo;m glad I finally got around to watching them. I enjoyed \u0026ldquo;The Menu\u0026rdquo; and \u0026ldquo;Moonrise Kingdom,\u0026rdquo; but I was disappointed by \u0026ldquo;To Die For.","title":"January 2023 Movies: Toppling My Winter Watchlist"},{"content":"Django 🚀2023 is here, and I\u0026rsquo;m ready to blast off into the world of new tech! First up on my list is the one and only Django 🤘. This bad boy is known for its ease of use and flexibility, plus it\u0026rsquo;s got a huge community of cool kids using it. I can\u0026rsquo;t wait to dive deeper and discover all its hidden gems like the ORM, admin interface, and built-in security features.\nMy Checklist\nCaching Testing Performance optimization Middleware Signals Internationalization and localization Custom template tags and filters Custom management commands Working with third-party packages and libraries Debugging and error handling Security best practices Advanced database management and optimization Asynchronous programming with Django Using Django with other technologies (e.g. React, Angular, Vue.js) Automated deployment and continuous integration Scalability and high availability Customizing the admin interface Creating reusable apps and packages Advanced form handling and validation Working with file and image uploads Creating RESTful APIs with Django REST framework Using Django in a microservices architecture Automated testing and test-driven development Advanced security features Design patterns and best practices for building scalable and maintainable Django applications. Completion Goals\nMake 3 capstone projects documenting the process, testing, and deployment Learn advanced django development with migrations, OAuth, Forms, and more Learn how to use Django with Docker and AWS Master Django Rest Framework and build a RESTful API, monetize it, and deploy it FastAPI Next, I\u0026rsquo;m gonna take FastAPI for a spin 🏎. This new web framework is all the rage these days and I wanna see what all the hype is about. Plus, it\u0026rsquo;s built on top of Starlette and Pydantic, and promises to be easy, fast and efficient. I\u0026rsquo;m ready to put it to the test and compare it to other popular options like Flask and Django.\nMy Checklist\nInstallation and setup Basic routing and endpoint creation Handling request data and parameters Creating and using models Advanced routing and endpoint creation Query string and path parameters Request and response validation Handling exceptions and errors Using dependency injection Creating and using middleware User authentication and authorization Using WebSockets Creating and using custom decorators, exception handlers, middleware, authentication, directive, exception, security, filter and event Using OpenAPI and Swagger Deployment and scaling Using FastAPI with databases Testing and debugging Integrating with other libraries and frameworks Best practices and design patterns for building web applications with FastAPI. Completion Goals\nMake 2 FastAPI Projects and deploy them with monetization React.js ReactJS is another technology that\u0026rsquo;s caught my eye 🧐. This JavaScript library is a game-changer when it comes to building user interfaces, and I wanna learn all its tricks and tips. I\u0026rsquo;m particularly excited to see how it handles large amounts of data and creates reusable components.\nMy Checklist\nReact basics Components and Props State and Lifecycle Handling Events Conditional Rendering Lists and Keys Forms Controlled and Uncontrolled Components Lifting State Up Routing Higher-Order Components Context API Hooks Server-side Rendering Optimizing Performance Testing Debugging Deployment and Hosting Working with Third-party Libraries Best Practices and Code Organization. Completion Goals\nMake 5 Capstone Projects Learn React development with TypeScript Learn React development with Next.js PostgreSQL PostgreSQL is next on my list, and I\u0026rsquo;m ready to get my hands dirty 🎆 with this powerful open-source relational database management system. It\u0026rsquo;s known for its reliability, performance and support for advanced features like full-text search and spatial data.\nMy Checklist\nPostgres installation and setup SQL basics and data types Creating and managing tables Querying data Modifying data Indexing and performance optimization Data validation and constraints Importing and exporting data Backup and recovery Security and access control Stored procedures and functions Triggers and events Postgres extensions Monitoring and troubleshooting Replication and high availability Scaling and partitioning Working with JSON and other data formats Integrating with other technologies Best practices and code organization Advanced topics such as window functions and CTEs. Completion Goals\nImprove Data Modeling Skills Learn how to use PostgreSQL with Django and FastAPI Learn how to deploy PostgreSQL on AWS using RDS AWS and Docker AWS and Docker are the cherry on top 🍒. AWS is a cloud computing platform that offers a wide range of services to build, deploy and manage applications. I\u0026rsquo;m looking forward to exploring the platform and learning how to use its various services to improve the scalability and reliability of my applications. Docker, on the other hand, is a platform for building, shipping, and running distributed applications. It allows for easy deployment and management of applications, and is a great tool for creating a consistent development environment across different machines.\nMy Checklist\nAWS basics and services Setting up and managing EC2 instances Working with AWS Elastic Container Service (ECS) and Elastic Kubernetes Service (EKS) Containerizing applications with Docker Managing and deploying containers on AWS Configuring and using Load Balancers and Auto Scaling Setting up and using RDS and DynamoDB Managing network and security using VPC, security groups and IAM Managing and monitoring using CloudWatch and CloudTrail Best practices and automation using AWS CLI and CloudFormation. Completion Goals\nGet AWS Solutions Architect Associate Certification Dockerize my Django and FastAPI applications Deploy my applications on AWS using ECS and EKS Kafka, Redis, RabbitMQ, Celery, Elasticsearch, GraphQL, RedShift, AppSmith Get a general overview of each of these technologies Get a 5 hour course on each of these technologies Read up interesting articles on each of these technologies Review interview questions on each of these technologies Overall, I\u0026rsquo;m ready to dive into these technologies and see how they can help me build better and more efficient applications. I believe that learning these technologies will not only help me as a developer but will also help me to create better solutions for my clients and users. 📺\n","permalink":"https://atharvashah.netlify.app/posts/tech/what-i-am-learning-2023/","summary":"Django 🚀2023 is here, and I\u0026rsquo;m ready to blast off into the world of new tech! First up on my list is the one and only Django 🤘. This bad boy is known for its ease of use and flexibility, plus it\u0026rsquo;s got a huge community of cool kids using it. I can\u0026rsquo;t wait to dive deeper and discover all its hidden gems like the ORM, admin interface, and built-in security features.","title":"What I am Learning in 2023"},{"content":" Introduction Brief overview of accelerationism The advent of AI and its impact on society Theories of Accelerationism Historical context of accelerationism Left and right-wing accelerationism Critiques of accelerationism AI and the Future of Society Advancements in AI technology Potential consequences of widespread AI integration Ethical considerations of AI development Accelerationism and Transhumanism: A Complex Intersection The intersection of accelerationism and transhumanism Potential benefits and drawbacks of merging technology with humanity Final thoughts on the Post-AI Society Introduction Yo, what\u0026rsquo;s good, internet? Welcome to my blog post about the wild, wild world of accelerationism. Now, I know some of you might be thinking, \u0026ldquo;Ugh, another boring article about some fancy words I don\u0026rsquo;t understand?\u0026rdquo; But hear me out, fam. This stuff is actually pretty cool, I promise.\nBrief overview of accelerationism Now, I know some of you might be thinking, \u0026ldquo;But wait, I thought accelerationism was just a fancy way of saying \u0026rsquo;let\u0026rsquo;s go faster\u0026rsquo;?\u0026rdquo; And you\u0026rsquo;d be right, my dear Watson. But it\u0026rsquo;s so much more than that. It\u0026rsquo;s about taking things to the next level, pushing boundaries, and making things happen faster than ever before. It\u0026rsquo;s like that meme where the guy is running down the street with his arms out and the caption says, \u0026ldquo;I\u0026rsquo;m living my best life.\u0026rdquo; That\u0026rsquo;s what accelerationism is all about.\nBut enough about the boring stuff, let\u0026rsquo;s talk about the good stuff. Imagine being able to download all the books in the world into your brain, or having a robotic arm that can lift a car. It\u0026rsquo;s like having your own personal Ironman suit, except without the annoying AI assistant. Or, if you\u0026rsquo;re more of a \u0026ldquo;Ghost in the Shell\u0026rdquo; type, you could have a robotic body that can run faster than Usain Bolt. The possibilities are endless, my friends.\nThe advent of AI and its impact on society Accelerationism, the belief that society should actively accelerate the pace of technological progress in order to bring about a desired outcome, has gained increasing attention in recent years. With the advent of AI and its potential to drastically alter the course of human civilization, the concept of accelerationism has become increasingly relevant. Whether we should actively push for the development of AI and other technologies, and the implications of such actions, is one that demands attention.\nSo, without further ado, let\u0026rsquo;s dive in and talk about the future of human society with the advent of AI. Just remember, as always, to keep an open mind and be ready for the unexpected. We\u0026rsquo;ll be gazing into the abyss and examining theories of accelerationism, the current state and future possibilities of AI, and the intersection of accelerationism and transhumanism. We will examine the potential consequences of widespread AI integration and discuss the ethical considerations of AI development. Our goal is to provide a comprehensive understanding of the complex and nuanced topic of accelerationism and its relationship to the future of human society. We will explore the potential benefits and drawbacks of accelerating technological progress and the impact it could have on humanity\u0026rsquo;s future.\nTL;DR: Introduction to accelerationism, where we\u0026rsquo;re going faster and stronger with AI technology and the future of human society\nTheories of Accelerationism Historical context of accelerationism The idea of accelerationism can be traced back to the 19th century, with thinkers such as Friedrich Nietzsche and Henri de Saint-Simon proposing the acceleration of technological progress as a means to bring about societal change. However, it wasn\u0026rsquo;t until the 1960s and 1970s that the term \u0026ldquo;accelerationism\u0026rdquo; was first coined, with the publication of books like \u0026ldquo;The Acceleration of History\u0026rdquo; by John Zerzan and \u0026ldquo;The Acceleration of Change\u0026rdquo; by Brian Pearce.\nLeft and right-wing accelerationism Accelerationism can be broken down into two main branches: left-wing and right-wing. Left-wing accelerationism, also known as \u0026ldquo;progressive accelerationism,\u0026rdquo; argues that accelerating technological progress will ultimately lead to a more equitable and just society. This branch of accelerationism is often associated with Marxist and socialist ideologies. On the other hand, right-wing accelerationism, also known as \u0026ldquo;neoliberal accelerationism,\u0026rdquo; argues that accelerating technological progress will lead to a more efficient and capitalist society. This branch of accelerationism is often associated with libertarian and capitalist ideologies.\nCritiques of accelerationism Accelerationism has not been without its critics. Some argue that accelerationism ignores the potential negative consequences of rapidly advancing technology, such as increased inequality and loss of privacy. Others argue that accelerationism is too optimistic about the ability of technology to solve societal problems and that it ignores the need for structural changes in society. Additionally, some argue that accelerationism is a form of technofascism, in which technology is used as a means of control and oppression. It\u0026rsquo;s important to note that critiques of accelerationism come from both the left and right wings, and the topic is complex and requires deeper understanding.\nAI and the Future of Society Advancements in AI technology The field of artificial intelligence has seen incredible advancements in recent years, and the potential of AI to revolutionize various industries and improve our daily lives is astounding. From self-driving cars to intelligent virtual assistants, AI technology is already being integrated into many aspects of our lives. Advancements in machine learning and deep learning have also led to the creation of AI systems that can perform tasks that were previously thought to be the exclusive domain of humans, such as image and speech recognition. With these advancements, the capabilities of AI are only set to increase in the future, and the possibilities for what AI can achieve are endless.\nPotential consequences of widespread AI integration As we continue to push the boundaries of what is possible with AI, it is important to consider the potential consequences of widespread AI integration. One of the most commonly discussed potential consequences is the potential loss of jobs, as many tasks that are currently performed by humans may be automated in the future. However, it\u0026rsquo;s also possible that the integration of AI technology could lead to the creation of new jobs, as well as increased efficiency and productivity across various industries. Additionally, AI can also help to address some of the world\u0026rsquo;s most pressing issues, such as climate change and healthcare.\nEthical considerations of AI development As we continue to develop AI technology, it is crucial that we consider the ethical implications of its integration into society. One of the most pressing ethical considerations is the issue of bias in AI, as AI systems can inadvertently perpetuate societal biases and discrimination. It\u0026rsquo;s also important to consider the issue of transparency, as the inner workings of many AI systems are complex and difficult to understand. Additionally, we must consider the issue of accountability, as AI systems can make decisions that have significant impacts on individuals and society as a whole.\nIn conclusion, while there are certainly challenges to be faced in the integration of AI into society, the potential benefits are immense. With careful consideration of the ethical implications of AI development, we can work towards a future in which AI technology is used to improve the lives of all individuals and to address some of the world\u0026rsquo;s most pressing issues. And as we progress, we can have a positive, hopeful, and inspiring future for the human society.\nAccelerationism and Transhumanism: A Complex Intersection The intersection of accelerationism and transhumanism Accelerationism and transhumanism are both ideologies that seek to push the boundaries of what is possible with technology, but they differ in their ultimate goals. Accelerationism is primarily focused on using technology to accelerate societal change, while transhumanism is focused on using technology to enhance and transcend human capabilities. However, the two ideologies intersect in their shared belief that technology can be used to improve the human condition.\nWhen examining the intersection of accelerationism and transhumanism, it\u0026rsquo;s important to consider the potential benefits and drawbacks of merging technology with humanity. The merging of technology and humanity has the potential to bring about numerous benefits, such as an increased lifespan, enhanced physical and cognitive capabilities, and an improved overall quality of life. However, there are also potential drawbacks. One of the most significant concerns is the potential for inequality, as access to these technologies may not be evenly distributed among the population. Additionally, there are also concerns about the potential for unintended consequences, as the merging of technology and humanity could lead to unforeseen ethical dilemmas. Furthermore, the idea of merging technology with humanity raises the question of what it means to be human and what the implications are for human identity and agency.\nPotential benefits and drawbacks of merging technology with humanity It\u0026rsquo;s crucial to engage in a critical and nuanced examination of the intersection of accelerationism and transhumanism. This includes considering the ethical and societal implications of these technologies and ensuring that they are developed and used responsibly. It\u0026rsquo;s also important to consider the long-term impact of these technologies on human society and humanity as a whole. As such, it\u0026rsquo;s important to approach the intersection of accelerationism and transhumanism with a balanced perspective, considering both the potential benefits and drawbacks, and taking a proactive stance to minimize any negative impacts.\nIn conclusion, the intersection of accelerationism and transhumanism is a complex topic that requires a multidisciplinary approach. This includes considering the potential benefits and drawbacks, and taking a proactive stance to minimize any negative impacts. It\u0026rsquo;s important to approach this intersection with a balanced perspective and a deep understanding of the implications for the future of humanity.\nFinal thoughts on the Post-AI Society Alright folks, it\u0026rsquo;s time to end this rant. I know, I know, it all sounds like a bunch of fancy words that you\u0026rsquo;d only hear in a sci-fi movie. But hear me out, because this stuff is actually pretty important.\nFirst off, let\u0026rsquo;s break it down. Accelerationism is all about making things happen faster, and transhumanism is all about merging technology with humans. Put those two together, and you get a bunch of people talking about how we should all be cyborgs by now.\nNow, I know some of you are thinking, \u0026ldquo;Oh great, just what we need—more robots taking our jobs,\u0026rdquo; but hear me out. There are definitely some benefits to all this techy stuff. Imagine being able to download all the books in the world into your brain, or having a robotic arm that can lift a car. It\u0026rsquo;s like having your own personal Ironman suit, except without the annoying AI assistant.\nBut with all the benefits come some potential drawbacks. We\u0026rsquo;ve all seen the movies like \u0026ldquo;Blade Runner\u0026rdquo; or \u0026ldquo;Ex Machina\u0026rdquo; and we know how things can turn out if we\u0026rsquo;re not careful. It\u0026rsquo;s important that we consider the ethical implications of all this tech before we go full steam ahead.\nSo in conclusion, let\u0026rsquo;s not get too caught up in the hype. Sure, having a robotic arm would be pretty cool, but let\u0026rsquo;s make sure we\u0026rsquo;re doing it for the right reasons. And if you do end up with a robotic arm, please, for the love of god, don\u0026rsquo;t use it to hack the Pentagon.\nTL;DR: accelerationism and transhumanism are important topics to consider, but let\u0026rsquo;s be careful with how we implement it and not get too caught up in the hype.\n","permalink":"https://atharvashah.netlify.app/posts/tech/effective-accelerationism/","summary":"Introduction Brief overview of accelerationism The advent of AI and its impact on society Theories of Accelerationism Historical context of accelerationism Left and right-wing accelerationism Critiques of accelerationism AI and the Future of Society Advancements in AI technology Potential consequences of widespread AI integration Ethical considerations of AI development Accelerationism and Transhumanism: A Complex Intersection The intersection of accelerationism and transhumanism Potential benefits and drawbacks of merging technology with humanity Final thoughts on the Post-AI Society Introduction Yo, what\u0026rsquo;s good, internet?","title":"Accelerating into the Future: e/acc Ruminations"},{"content":"Winning a hackathon is an incredible feeling, and it\u0026rsquo;s even more special when it\u0026rsquo;s your very first one. The adrenaline rush of competing against some of the brightest minds in the industry, the satisfaction of solving complex problems, and the thrill of being recognized for your hard work are all emotions that are hard to put into words. In this article, I\u0026rsquo;ll walk you through the journey of our team who recently won their first ever hackathon, the CRIF Hackathon 2023. From the initial idea to the final presentation, we\u0026rsquo;ll explore the ups and downs of the experience, and the valuable lessons that were learned along the way. So join us as we relive the excitement of a hackathon victory, and learn what it takes to come out on top.\nWant to jump right into the code? Check out the GitHub repo.\nProblem Statement We were give five problem statements to choose from. The first one was to build a framework/utility that takes a company name as an input. The utility should search all the media articles about the input company and present any reputational threatening data on a concise dashboard. With the help of NLP, we were able to build a framework that could scrape news articles from search engines like Google, Yahoo, Duckduckgo and present any reputational threatening data on a concise dashboard.\nYou can read more about other problem statements here.\nMedia Analytics Build a framework/utility that takes a company name as an input. The utility should search all the media articles about the input company and present any reputational threatening data on a concise dashboard.\nFollowing are the functionalities that need to be achieved in order to build a complete solution -\nDownloader - Download news articles using company name from search engines (Google, Yahoo, Duckduckgo) - Selenium, News API\nNER module - Named Entity Recognition (Organization + Risk Entity) - Out of the box Spacy NLP models / Taxonomy searches\nRelationship module - Analyze the articles and carve out sentences(context) where reputation risk elements and company names are present. Can use dependency parsing or predicate classifiers to establish relationships between risk elements and company names\nDashboard - Display these relationships in an appropriate Dashboard ⇒ PowerBI / Tableau\nTeam Atharva Shah (Yours Truly) - Implementation of the first three modules leveraging NLP, Text Processing, Web Scraping and Debugging. In-charge of leading the team and making the presentation in the final round\nGurjas Gandhi - Administration, Management, Insightful Feedback\nAli Asger Saifee - Problem-Solving, Curating Word Lists and Generating Tableau Dashboards\nAditya Patil - Documentation, Testing and Generating Tableau Dashboards\nThe Team (Code Giants) L to R: Gurjas, Aditya, Ali and Atharva 24-Hour Code Sprint Since the project heavily relies on Web Scraping, Text Processing, NLP and Data Analysis using Python was an obvious choice for it.\nHaving prior experience with BeautifulSoup, APIs and Spacy for NLP I immediately got to work and got the first two modules up and running within the first few hours of the hackathon.\nNewsAPI - Scraping the latest and relevant news about an organization based on the input query\nRegex, BeautifulSoup, Trifulatura - To parse the main content from the webpages and discard irrelevant data. Cleaning up news articles.\nTensorflow - Sentiment Analysis (returning a logit score between 1 to 5)\nSpacy - pre-trained roBERta model for improving sentiment analysis and tagging of Named Entity Relationships\nCustom Word Stores - to employ a \u0026ldquo;weighted list\u0026rdquo; score system based on the word count of negative and offensive words. Three other lists (harassment.txt, countries.txt, lawsuits.txt) were used to tag the articles if repeated words related to it were detected.\nProcessing CSVs - A lot of file handling was performed. The pipeline consisted of 3 CSVs.\nCommon.csv that simply stores the scraped articles Common-processed.csv that performs sentiment analysis on headline and stores the tags, offensive/negative words with the score based on the SpaCy NER module Common-Analysis.csv that used pandas to join all the fields together and prepare a final CSV for automating the Tableau dashboard. Spent the most time with this. Most CSVs that made the final\nCustom CLI Tool to Scrape Relevant News Articles based on user input Sanitization, cleanup and pre-processing with Sentiment Analysis being written to CSV files Named Entity Relationship Mapping with DisplaCy Tableau - Taking input of the COMMON-ANALYSIS.csv file, we designed 8 dashboards to present or narrate a story with all our data. Since we had plenty of fields like Article Count, Title,Description, Content (which holds the entire article text), URL, Publisher, Published Date, Headline, Headline Sentiment, Offensive Rating, Negative Words, Offensive Words and Tags it was not much of a hassle. We made good use of several plotting and graphing methods and presented a diverse yet insightful story. Each Tableau report updates after looking up a new organization.\nTableau Dashboard #1 Tableau Dashboard #2 Tableau Dashboard #3 Tableau Dashboard #4 Tableau Dashboard #5 Tableau Dashboard #6 Tableau Dashboard #7 Tableau Dashboard #8 Obstacles, Setbacks and Challenges faced Cleaning up the article body and parsing proper text.\nExtrapolating the context to base the negative score on.\nOptimizing NLP processing and reducing the scraping time.\nTableau was a completely new tool for us, nonetheless we took a 2-hour crash course and got our hands dirty thanks to which we could quickly get ahead of the game and visualize our gathered data seamlessly.\nHandling exceptions, 403, 404, Date Parsing, Tagging and taking care of API throttling.\nModule 3 felt to be the most challenging since we had to add our own \u0026ldquo;risk-entity\u0026rdquo; NER support to the SpaCy \u0026ldquo;roBERTa\u0026rdquo; model while also not losing application efficiency.\nRewards We worked around the clock in an organized manner and secured the first rank competing against 36 other teams (nearly 140+ participants). All the effort paid off at the end as we secured the first position after an exhaustive and interview-based project presentation with the panel of judges.\nWith the prestige and recognition we also received:-\n50K Cash Prize Goodies for each team member Victory Certificate for each team member A \u0026ldquo;winner takes it all\u0026rdquo; trophy The taste of victory ","permalink":"https://atharvashah.netlify.app/posts/tech/crif-hackathon-2023/","summary":"Winning a hackathon is an incredible feeling, and it\u0026rsquo;s even more special when it\u0026rsquo;s your very first one. The adrenaline rush of competing against some of the brightest minds in the industry, the satisfaction of solving complex problems, and the thrill of being recognized for your hard work are all emotions that are hard to put into words. In this article, I\u0026rsquo;ll walk you through the journey of our team who recently won their first ever hackathon, the CRIF Hackathon 2023.","title":"Celebrating victory at CRIF Hackathon 2023"},{"content":"The Blade Itself Once you\u0026rsquo;ve got a task to do, it\u0026rsquo;s better to do it than live with the fear of it. The more you learn, the more you realize how little you know. Still, the struggle itself is worthwhile. Knowledge is the root of power, after all. You have to learn to love the small things in life, like a hot bath. You have to love the small things, when you have nothing else. There are few men with more blood on their hands than me. None, that I know of. The Bloody-Nine they call me, my enemies, and there’s a lot of ’em. Always more enemies, and fewer friends. Blood gets you nothing but more blood. I’m trying to put things in the best light, but a turd’s a turd, whatever light it’s in! The seeds of the past bear fruit in the present. Broken hearts heal with time, but broken teeth never do. Life – the way it really is – is a battle not between good and bad, but between bad and worse. Treat a man like a dog and sooner or later he’ll bite you, The tongueless torturer and the flower of chivalry. An unlikely alliance. The blade itself incites to deeds of violence. If a man seeks to change the world, he should first understand it.’ The apprentice trotted the words out as if by rote, evidently relieved to be asked a question he knew the answer to. ‘The smith must learn the ways of metals, the carpenter the ways o. As far as I’m concerned you can fuck whomever you please, though my general observation has been that, as far as the reputations of young women are concerned, the less fucking the better. The reverse is true for young men of course. Hardly fair, but that\u0026rsquo;s life. Walk in God’s footsteps, Ferro Maljinn. “Huh. They have no God here. “Say rather that they have many. “Many? “Had you not noticed? Here, each man worships himself. The difference between misery and happiness was the right word from her. Either you are a part of my future, or a relic of the past Before They Are Hanged The mistakes of old, intoned Bayaz with the highest pomposity, “should be made only once. Any worthwhile education, therefore, must be founded on a sound understanding of history Self-pity was for children and half-wits. Few indeed are those who get a choice. We do as we are told. We stand or fall beside those who were born near to us, who look as we do, who speak the same words, and all the while we know as little of the reasons why as does the dust we return to. Rules are for children. This is war, and in war the only crime is to lose. Travel brings wisdom only to the wise. It renders the ignorant more ignorant than ever Proof is boring. Proof is tiresome. Proof is an irrelevance. People would far rather be handed an easy lie than search for a difficult truth, especially if it suits their own purposes. Sometimes it doesn\u0026rsquo;t matter too much what choice you make, as long as you make it quick and stick to it. The only difference between war and murder is the number of dead. Round and round in circles we go, clutching at successes we never grasp, endlessly tripping over the same old failures. Truly, life is the misery we endure between disappointments. Fear has made them sloppy. The world teeters at a precipe. All scared to take a step in case they put a foot into empty air. The instinct of self-preservation. It can destroy a man\u0026rsquo;s efficiency The lowly have small ambitions, and are satisfied with small indulgences. They need not get fair treatment. They need only think that they do. Because the vast majority of men would far rather be told what to do than make their own choices. Obedience is easy. Cleverness is no guarantee of sensible behavior Rising early. Of course. The second greatest virtue. It comes just behind ruthlessness. In my experience, a friend is merely an acquaintance who has yet to betray you. The Last Argument of The Kings The Great Leveller,\u0026rsquo; Dogman whispered to himself, since he was in a thoughtful frame of mind. That\u0026rsquo;s what the hillmen call him. Death, that is. He levels all differences. Named Men and nobodies, south or north. He catches everyone in the end. You get what you give, in the long run, and manners cost nothing Expect nothing and you won\u0026rsquo;t be disappointed. Expect nothing and you\u0026rsquo;ll get nothing. An excessive and a brutal act, but better to act with too much force than too little. Better to be held in fear, than in contempt. There is no place for sentiment in politics. Men must sometimes do what they do not like if they are to be remembered We should forgive our enemies, but not before they are hanged. Honour, eh? What the hell is that anyway? Every man thinks it\u0026rsquo;s something different. You can\u0026rsquo;t drink it. You can\u0026rsquo;t fuck it. The more of it you have the less good it does you, and if you\u0026rsquo;ve got none at all you don\u0026rsquo;t miss it. People love to see death. It reminds them that however mean, however low, however horrible their lives become… at least they have one. Fearlessness is a fool\u0026rsquo;s boast, to my mind. The only men with no fear in them are dead, or the soon to be dead, maybe. Fear teaches you caution, and respect for your enemy, and to avoid sharp edges used in anger. All good things in their place, believ. An open mind is like to an open wound,\u0026rsquo; growled Glokta. \u0026lsquo;Vulnerable to poison.\u0026rsquo; Strange, isn\u0026rsquo;t it,\u0026rsquo; mused Glokta as he watched him struggle for air. \u0026lsquo;Big men, small men, thin men, fat men, clever men, stupid men, they all respond the same to a fist in the guts. One minute you think you\u0026rsquo;re the most powerful man in the world. A man lost in the desert must take such water as he is offered, no matter who it comes from. One should learn the lessons of history. The mistakes of the past need only be made once. Unless there are no other choices There was no such thing as luck. Luck was a word idiots used to explain the consequences of their own rashness, and selfishness, and stupidity. More often than not bad luck meant bad plans Don’t deceive yourself. Everyone is guilty of something, and even the innocent can be a threat. Perhaps it takes small crimes to prevent bigger ones, Colonel West, but it’s up to bigger men than us to decide. We are leaders. War is what happens when we fail. Or are pushed into failure by the rash and the foolish. Victory is better than defeat, but not by much. Men must sometimes do what they do not like if they are to be remembered. It is through struggle, not ease, that fame and honor are won. It is through conflict, not peace, that wealth and power are gained. The seeds of the past bear fruit in the present This was a place of learning, and wonder, and great beauty.\u0026rsquo; Time has not been kind to the place. Time is never kind. ","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-first-law-trilogy-by-joe-abercrombie/","summary":"The Blade Itself Once you\u0026rsquo;ve got a task to do, it\u0026rsquo;s better to do it than live with the fear of it. The more you learn, the more you realize how little you know. Still, the struggle itself is worthwhile. Knowledge is the root of power, after all. You have to learn to love the small things in life, like a hot bath. You have to love the small things, when you have nothing else.","title":"Best Quotes from First Law Trilogy"},{"content":" Let\u0026rsquo;s not mess around here. This series has just more than quotes to offer so I have included rich descriptive texts that boil the blood and wake something deep inside. Here\u0026rsquo;s to the good times fellas. Read on for some savage blood-curdling brutalism.\nThe deed is done. The war is won. And at the last, gentlefriend, her song is sung. I suppose you can say you know her now, at least as well as I did. The ugly parts and the selfish parts and the everything in between. A girl some called Pale Daughter. Or Kingmaker. A Queen of Scoundrels. A Lady of Blades. I like little Crow best of all. A girl who never knelt, who never broke, who never, ever allowed fear to be her fate. A girl I loved as much as you did. Look now upon the ruins in her wake. As pale light glitters on the waters that drank a city of bridges and bones, and a Republic’s ashes dance in the dark above your head. Stare mute at the broken sky and taste the iron on your tongue and listen as lonely winds whisper her name as if they knew her, too. I gave you all I promised, gentlefriend. I gave it to you in spades. And if her death didn’t unfold in the way you dreaded, I hope you’ll not name me liar for it. She did die, just as I said she would. But even the Moon loved our girl too much to let her die for long. The ink is drying upon the page. The tale is ending before your eyes. And if you feel some sorrow at this, our last farewell, know your narrator feels it, too. We are not made more by the stories we read, but by the stories we share. And in this, in her, I think we’ve shared more than most. I shall miss it when it’s gone. But to live in the hearts of those we leave behind is to never die. And to burn in the memories of our friends is to never say goodbye. So let me say this instead. Goodnight, gentlefriend. Goodnight. Never flinch. Never fear. And never, ever forget. “It’s finished,” she sighed. And she was gone. His father was on his knees, bleeding from the places his eyes should have been. His sisters knelt before him, their heads bowed low. His mother spread her gowns across the heavens, the bonds of her prison forever broken. And Anais ascended his throne. One sun. One night. One moon. Balance. “All is as it should be,” the Night declared. “The scales weigh even at last.” The prince of dawn and dusk looked to the infinity above them. He shook his head. “One tithe remains,” he said. And with black and burning hands, he reached for a piece of forever. She was dressed all in black: a corset and long skirts flowing like a river about her feet. A gravebone longblade waited in her hands. A golden mask covered her face, black paint on her lips, parting now as she spoke with a voice that shook the world. She could understand that—the impulse to tread closer to the cliff to peer over the edge. The need to skip ahead a few chapters and learn how the story ends. But Spiderkiller herself had no desire to know how the tale of Itreya’s first imperator finished. Only that she be alive to read about it afterward. The shadows lifted a fallen mask, leafed in gold, placing it over her eyes. It was shaped like a crescent. Like a moon not yet full. The dark was alive about her. Inside her. Pale and beautiful, she walked on. She wore the night, gentlefriends. And all the night came with her. The city about her trembling, this tomb of a fallen divinity too long profaned by the tread of mortal feet. The grave of a fallen god, set now to become the grave of an empire. She wore the night. Her gown was silken black. The jewels at her throat, darkling stars. Long skirts billowed out from her waist, flowed down to her bare feet, a corset of midnight cinched tight across ghost-pale skin. White powder on her cheeks. Black paint on her lips. Legions in her eyes. “Still your rage, Adonai,” Scaeva said. “This was but a well-earned reminder to your sister of her place in my order. You and Marielle served me well for many years, and I am not a man who squanders gifts such as yours. There is a place for you at my side. So take your knee. Swear your allegiance. Beg my forgiveness.” The shadows at Scaeva’s feet rippled. “And I will grant it.” Adonai’s eyes flashed, the blood storm about him swirling, seething. “Speak ye of gifts?” he spat. “As if I found them in a pretty box on Great Tithe?” Adonai shook his head, long pale hair come loose from its ties and draped about crimson eyes. “Paid for my power be, bastard. With blood and agony. But thou art thief of a power unearned.” He narrowed his eyes, pointing at Scaeva. “Usurper, I name thee. Wretch and villain. Already I see how thy theft takes its tithe upon thee. But I have not the patience nor desire to await the descent of fate’s cold hand. I promised thee suffering, Julius.” “There’s a tithe to be paid for power,” Mercurio said. “Sometimes it’s measured in conscience or coin. Sometimes we pay with pieces of our own souls. But whatever we owe, this much is true—sooner or later, the debt always comes due.” “We’re not leaving without the weaver,” Mercurio said. “You have my word. But there’s one captain in this company, Adonai. And I’m giving the orders aboard this ship.” “Boat,” Bladesinger murmured from the gondola’s bow. Mercurio sighed, tired in his bones. “Everyone’s a critic.” The faintest blood-red of Saan’s fallen glow, like blush on a courtesan’s cheek. Saai’s pale blue, like the eye of a newborn babe, falling into sleep. A magnificent watercolor portrait, glittering on the ocean’s face and reaching up into the gables of heaven. Dark stains leaking across the edges of the canvas. It takes three turns for the light to fully die. All the Republic is washed in the stink of blood as Aa’s ministers sacrifice animals by the hundreds, the thousands, beseeching their Everseeing to return quick as he may. Long shadows fall across the streets of Godsgrave like funeral shrouds. As the Night creeps closer on pale, bare feet, the citizenry is gripped with a kind of hysteria. Purchasing their pretty dominos and fearsome voltos and smiling punchinellos from the mask makers. Fetching their finest coats and gowns from tailors and seamstresses. Hands shaking all the while. The pious flee to the cathedrals in droves to pray the long night away. The rest seek solace in the company of friends or the arms of strangers or the bottom of bottles. An endless run of soirees and salons pepper the calendar in the turns prior, as the light slowly perishes, as the citizens fight or fawn or fuck their fears away. Then truedark falls. And Carnivalé begins. Moonlight. In the distance, she could hear faint footsteps. The pulse of fearful hearts in heaving chests. The ring of steel, and prayers to the Everseeing. Men, she realized. The soldiers of the Seventeenth who’d pursued her into the labyrinth. Five thousand of them. But the power of a god now flowed in her veins. A dark and fathomless strength no child of woman born could hope to match. Even without the legion of passengers now in her shadow, she feared no mortal man. She’d deal with them, each in kind, like moths to black flame. Then Godsgrave. And then … Their voices rang through that broken skull, that hollowed crown. Many and one. “Father.” The shadows placed her bloody sword in her hand. “We come for you.” The boy beside her. The boy inside her. Anais. “The many were one,” he whispered. The many fragments of his soul. “And will be again.” United in me. “One beneath the three.” One moon beneath three suns. “To raise the four.” The Four Daughters. “Free the first.” Niah, the first divinity. “Blind the second and the third.” Extinguish the second and third suns. And what then would remain? One sun. One moon. One night. Balance. As it was, and should, and will be. “Fear was never my fate,” Mia hissed. Fear was Can’t. Fear was Won’t. But fear wasn’t ever a choice. To never fear was to never hope. Never love. Never live. To never fear the dark was to never smile as the dawn kissed your face. To never fear solitude was to never know the joy of a beauty in your arms. Part of having is the fear of losing. Part of creating is the fear of it breaking. Part of beginning is the fear of your ending. Fear is never a choice. Never a choice. But letting it rule you is. “Never flinch,” her mother had told her. “Never fear.” But there, alone in Cleo’s dark, Mia finally realized the impossibility of those words. Facing her fear for the first time in as long as she could remember, Mia finally saw it for what it was. Fear was a poison. Fear was a prison. Fear was the bridesmaid of regret, the butcher of ambition, the bleak forever between forward and backward. Niah’s first chosen. What was Mia beside her? You are nothing, the woman told her. “I am Mia Corvere,” she hissed. “Champion of the Venatus Magni. Queen of Scoundrels and Lady of Blades.” You are no one. “I am a daughter of the dark between the stars. I am the thought that wakes the bastards of this world sweating in the nevernight. I am the war you—” No, dearheart, sweetheart, blackheart. Cleo smiled, one slender hand outstretched as if to bestow a gift. You are afraid. It took Mia a moment to feel the weight of it. To recognize the shape of it. Mister Kindly had walked in her shadow since she was ten years old, tearing her fears to ribbons. With Eclipse and him both inside her, she’d been indomitable. Fear had been a blurred memory, a forgotten taste, something that only happened to others. But after all those years, at Cleo’s smiling behest, it had finally, truly found her. Rising on an ice-cold tide in her belly and setting her legs to buckling. You never know what can break you until you’re falling apart. You never miss your shadow until you’re lost in the dark. Mia’s sword fell from nerveless fingers. She stumbled to her knees. She’d been alone before, but never like this. It was as if all her life, she’d been unfinished, and she’d never realized until this moment. All the fragments of her brief existence seemed insignificant—Jonnen, Tric, Mercurio, Scaeva, even Ashlinn—they were only phantoms somewhere in the dark within. Because through all the years and all the blood, at last, at last, she was home. No. Mia gritted her teeth, balled her hands to fists. This is not my home. She was here for a reason. Not to sleep, but to awake. Not to be claimed, but to claim. The power of a fallen god. The legacy of a shattered line. The power of the light in the night. To tear it, beating and bleeding, from a shattered chest and wrest back her brother from the bastard who’d claimed him. To fight and die for the only thing that gave her life meaning anymore. The only thing she had left. When all is blood, blood is all. “You’re not my daughter.” “You’re just her shadow.” “The last thing you will ever be in this world, girl, is someone’s hero.” “A girl with a story to tell.” “All I hear, Kingmaker, are lies from the mouth of a murderer.” “I want you gone, do you hear me?” “I’d have killed the sky for you…” “Jonnen,” she breathed. Mia had no idea how Scaeva had sent word to the Ashkahi Legion about where she was headed. But he’d taken the godsblood. The might of a fallen divinity sang in his veins. Who knows what gifts he had at his disposal now? And in the end, she supposed it didn’t really matter how. He’d obviously done it, and she obviously had five thousand fully armed and armored cocks set to fuck her none too sweetly. “Only a wanker reads her own biography, Sid. Especially if it’s got footnotes.” “… Yours for the taking, Julius…” “It is dangerous, Father,” Jonnen warned. “And what have I told you, my son?” the imperator asked. “About claiming true power? Does a man need senators? Or soldiers? Or servants of the holy?” “No,” Jonnen whispered. “What then, does a man need?” “Will,” the boy heard himself say. “The will to do what others will not.” “O, Lucius,” she’d sobbed. “My darling Lucius.” And though he’d not spoken, the boy still heard the words ringing in his head. My name is Jonnen. They’d eaten a surreal sort of dinner together. Just the three of them, like he couldn’t remember them doing for an age. The table was laden with the finest fare the boy had tasted in months. No slop stews or cold porridge or dried beef. No eating in some miserable hutch or lonely ruin. No bawdy tales or cigarillo smoke. Instead, they had mouthwatering finger foods and sizzling roasts cooked to perfection and honeyed sweets that melted in his mouth. Flawless porcelain plates and silver cutlery and singing Dweymeri crystal glasses. Mother even let him have a little wine. And all Jonnen could taste was the blood. Poor Butcher. Poor Eclipse. Jonnen could still taste the blood. It had been a full turn since they’d emerged from the pool in the Red Church chapel beneath Godsgrave’s necropolis, dripping in scarlet. Fifty of the Luminatii awaiting them had given him, his father, the woman called Spiderkiller, and the sorcerii called Marielle a hasty escort through the bustling streets. The other half century had remained behind to ensure none of Mia’s comrades gave pursuit. Jonnen had wondered whether it would’ve been a good or bad thing. But none of them came after him at all. Once back in their apartments in the first Rib, the Spiderkiller had taken the sorcerii away, only Aa knew where. His father had gone to bathe. Jonnen had been surrounded by slaves, thoroughly scrubbed, trimmed, and dressed in a white toga hemmed in purple. And finally, with rather more flair than he thought their ignoble retreat from the Mountain had warranted, his father had presented him to his mother. Or at least, the woman who called herself his mother. Liviana Scaeva had wept to see him, sweeping him up in an embrace so fierce the boy thought his ribs might have cracked. She’d praised the Everseeing, blessed his father’s name, dragging him close with one hand while the other still gripped her son. “O, Lucius,” she’d sobbed. “My darling Lucius.” And though he’d not spoken, the boy still heard the words ringing in his head. My name is Jonnen. They’d eaten a surreal sort of dinner together. Just the three of them, like he couldn’t remember them doing for an age. The table was laden with the finest fare the boy had tasted in months. No slop stews or cold porridge or dried beef. No eating in some miserable hutch or lonely ruin. No bawdy tales or cigarillo smoke. Instead, they had mouthwatering finger foods and sizzling roasts cooked to perfection and honeyed sweets that melted in his mouth. Flawless porcelain plates and silver cutlery and singing Dweymeri crystal glasses. Mother even let him have a little wine. And all Jonnen could taste was the blood. Poor Butcher. Poor Eclipse. “You know, I don’t remember them ever teaching classes in it here, but you’ve a wonderful knack for killing the mood.”- “It’s all lies,” she whispered. “The murders. The offerings. Hear me, Mother. Hear me now. All that bollocks. This place wasn’t a church, Solis. It was a brothel. You were never a holy Blade in service to the Mother of Night. You were a whore.” “I’m not some hero in a storybook. I’m not someone you should aspire to be. I’m a ruthless cunt, Jonnen. I’m a selfish bitch. You hurt me, I’ll hurt you back. You hurt the ones I love, I’ll kill you instead. That’s just the way I am. Julius Scaeva killed our mother. The man I called Father. And I don’t care what they did to deserve it. I don’t care that they weren’t perfect. I don’t even care that they were probably just as bad as him. Because truth told, perhaps I’m worse than all of them. So fuck what’s right. And fuck redemption. Because Julius Scaeva still deserves to die.” Lightning flashed, tearing the skies in fury. The waves crashed and rolled. The Ladies of Storms and Oceans, the terrible twins, reaching out toward her with all their hatred. Mia hauled herself to her feet, Eclipse beside her, the shadows swaying like serpents. She dragged her sodden tricorn off, clawed her hair from her face, and she laughed. Her eyes alight. Her heart warmed by dark flame, burning in her chest. All they had, they’d thrown. All their hate, they’d given. All their fury, spent. Mia raised the knuckles to the sky. “Still standing, bitches.” “Help me, then!” “ALWAYS!” Side by side. Back to back. The pair fought together, like in younger turns when they trained in the Hall of Songs. They were older now, harder, sadder, years and miles and the very walls of life and death between them. “THE ONLY WEAPON IN THIS WAR IS FAITH.” She’d set aside her faith years ago. Stopped praying to Aa the turn she realized that all the devotion in the world wouldn’t bring her familia back. Even in service of the Dark Mother, even in the belly of the Quiet Mountain, she’d not truly held any belief for the divinities—not for divinities who might actually care, at least. Who knew who she was, who thought she mattered, who were more than empty words and hollow names. And now? Moons and crowns and mothers and fathers and all of it? Do I truly believe? “I am a daughter of the dark between the stars,” she replied. “I am the thought that wakes the bastards of this world sweating in the nevernight. I am the vengeance of every orphaned daughter, every murdered mother, every bastard son.” Mia leaned forward and looked the man in the eye. “I am the war you cannot win.” “My name is Mia Corvere,” she said, still unblinking. “Blade of the Red Church. Champion of the Venatus Magni. Chosen of the Dark Mother and Queen of Scoundrels. Never call me girl again.” Blood was a speaker’s only sustenance, but it was also an emetic. To drink too much was to know awful sickness. To drink too little was to know awful hunger. A constant, flawless sanguine torture. Blood was a speaker’s only sustenance, but it was also an emetic. Her vow. Father When the last sun falls When daylight dies So do you. “Pretty warriors can’t fight for shit. You can’t know how sweet it is to breathe ’til you’ve had your ribs broken. You can’t appreciate being happy ’til someone has made you cry. And there’s no point blaming yourself for the kickings life gives you. Just think about how much it hurt, and how much you don’t want to feel that way again. And that’ll help you do what you need to do the next time to win.” “Blaming yourself for another’s work is like blaming yourself for the weather,” he said, looking at Wavewaker’s and Bryn’s bodies. “And I’ll mourn them as a brother and sister lost, aye. But taking a beating is part of being alive. And let me tell you something, Mia—the best brawlers I ever met were the ugliest, too. Broken noses and missing teeth and cauliflower ears. Because the best way to learn to win is by losing.” “The man I’ve been trying to kill for the past eight years turns out to be the man who gave me life. And if that isn’t enough of a fuck-you from the divinities, I’ve apparently got a fragment of a dead god inside me that I inherited from him, too! O, and incidentally, the last boy I fucked got murdered by the last girl I fucked, then resurrected by the Mother of Night to help me with the aforementioned god problem, and the prick who just cut Bryn and ’Waker’s throat used to be a personal friend of mine! I am fucking poison, do you see that? I am cancer! Whatever comes near me ends up dead. So get the fuck away from me before you get killed, too.”- I realize ‘deserve’ has nothing to do with this life. Blessings and curses fall on the wicked and the just alike. Fair is a fairy tale. Nothing’s claimed by those who don’t want it, and nothing’s kept by those who won’t fight for it. So let’s fight. Fuck the gods. Fuck it all. Let’s take the world by the throat and make it give us what we want.” Whatever you did, you did it because it needed to be done. Remorse is for the weak, Mia. And regret is for cowards. Whatever you did then meant you can be here in my arms now. That makes it right. And I’m not about to let some bollocks about moons and suns take that away from us.” “You do whatever you need to do. Moons, Mothers, I don’t give a toss. But if I get a whiff of some other endgame, I get a hint this Anais nonsense is putting her at risk, we’ll find out sure and true if deadboys can die again.” She took a step back, eyes never leaving his. “I will rip all three suns out of heaven to keep her safe, you hear me?” Ashlinn vowed. “I will kill the fucking sky.” She blew him a kiss. Then she turned and stalked away. “’Byss and blood, how did you find us?”’Singer asked. “Poked my nose into the first whorehouse I saw,” Mia shrugged. “After that, I just followed the trail of vomit.” “Known many high-priced courtesans, have you?” Aelius asked. Mercurio shrugged. “In my youth.” “Got any good stories? It’s been a while for me…” “If it’s cheap smut you’re after,” Mercurio sighed, tapping the first of “THE BOOKS,” “the tawdriness starts in volume one, page two hundred and forty-nine.” “O, I know,” the chronicler chuckled. “Chapter twenty-two.” Mercurio turned his deepening scowl on Aelius. “You read those pages?” “Didn’t you?” “Maw’s fucking teeth, no!” Mercurio almost choked on his smoke, utterly horrified. “She’s like my … I don’t want to think of her getting up to … that.” “Well, let’s see,” Mia sighed, counting on her fingers. “I’ve brought two daemons and a deadboy aboard your ship. My brother and I are both darkin, and he’s also the abducted son of the imperator with what’s likely the whole Itreyan Legion chasing his arse. I implicated you and your crew in the murder of a handful of Luminatii, their crew, and the destruction of their ship.” She tipped her head back, guzzled the last of the bottle, and dropped it on the deck. “And I’ve drunk all your fucking wine.” “A HINT OF REGRET? SOME SHRED OF REMORSE? FOR YOU TO UNDERSTAND SOME SMALL PART OF WHAT YOU TOOK FROM ME?” “Remorse is for the weak, Tricky,” Ash said. “And regret is for cowards.” “Well,” Corleone said, taking another stab. “How do you all know each other?” Silence. Long as years. “We studied together,” Mia finally replied. “O, aye?” Corleone smiled, intrigued. “Public institution, or Iron Collegium, or…” “… it was a school for fledgling assassins run by a murder cult…” “Ah.” The captain glanced at the shadowcat and nodded. “Private tutors, then.” “SOME OF US BECAME MASTERS OF IT,” Tric said, staring at Ash. “MURDER, THAT IS.” “That shouldn’t surprise,” she replied. “Given what we trained for.” “A KNIFE IN THE HAND OF A FRIEND IS OFTEN A SURPRISE.” “It shouldn’t be, if that friend thinks to come before familia.” “Erm…,” Corleone stammered. Mia drained her glass. “Pass the wine, please?” Corleone complied as the galley boy brought in the main and started serving. It was fine fare considering they were aboard a ship—sizzling lamb and almost-fresh greens and rosemary jus that made Mia’s mouth water despite the tension in the air. As Corleone began carving, the meat almost fell off the bone. “I saw you best that silkling at the Whitekeep games,” BigJon said to her around his mouthful. “Won a strumpet’s cuntful of coin on you, too. Bloody magnificent, lass.” “Four Daughters, BigJon,” Cloud scowled. “Mind your cursing at table, neh?” “Fuck,” he said, biting his lip. “Apologies.” “Again?” “Fuck. Sorry. Shit … FUCK…” “No, it’s all right,” Mia said, leaning back in her chair and enjoying the feel of her head spinning. “I was bloody magnificent. I trust you spent your cuntful on something fucking marvelous.” The littleman grinned with silver teeth, raising his glass. “O, I like you.” Mia raised her glass in return, downed it in a gulp. “What about you, young don?” Cloud said, turning to Jonnen for a change of subject. “Do you like ships, perchance?” “Do not speak to me, cretin,” the boy replied, toying with his food. “Jonnen,” Mia warned. “Don’t be rude.” “I will not entertain inane chatter with this lawless brigand, Kingmaker,” the boy snapped. “Further, when I am returned to my father, I will see him hanged a villain.” “Well…” Corleone’s lips flapped a little. “I…” “Don’t mind him,” Mia said. “He’s a spoiled little shit.” “I am the son of an imperator!” the boy cried shrilly. “But you’re not above a spanking! So mind your fucking manners!” Mia glowered at the boy, engaged in a silent battle of wills. “Ah…,” BigJon tried. “More wine?” “O, yes, please,” Mia said, holding out her glass. A more comfortable silence settled over the table as Mia got her refill and folk got down to eating. Mia had spent the last eight months dining on the various questionable broths and swills cooked up in the Remus Collegium—this was the first decent feed she’d had in as long as she could remember. She started stuffing her face, using more wine to wash her ambitious mouthfuls down. The lamb was delicious, hot, perfectly seasoned, the greens crunchy and tart. Even Jonnen seemed to be enjoying himself. “Are you not eating, Don Tric?” Corleone asked. “I can have the galley fix something else if this displeases.” “THE DEAD HAVE NO NEED OF FOOD, CAPTAIN.” “And yet they insist on coming to the dinner table, regardless,” Ashlinn muttered around a mouthful. “… EXCUSE ME?” “Pass the salt, dwarf,” Jonnen demanded. “Oi!” Mia thumped the table. “He’s not a dwarf, he’s a littleman!” “No, I am a little man,” the boy said with a smug smile, pointing to BigJon with his fork. “He is a dwarf. And I will be taller tomorrow.” “That’s fucking it,” Mia said, rising to her feet. “Go to your room!” “I beg your pardon?” he asked. “I am the son of—” “I give no fucks for whose son you are. You’re a guest at this table and you don’t talk to people that way. You want to be treated with respect, little brother? Start by treating others to it. Because it’s earned, not fucking owed.” Mia leaned forward and glowered. “Now go. To. Your. Room!” “More wine, anyone?” “No,” Ashlinn said, watching Tric. “NO,” Tric said, glaring at Ashlinn. “Fuck yes,” Mia said, waving her glass. For his part Falco was ready for the blow at least, drawing the sunsteel blade at his belt and speaking a prayer to Aa. The sword ignited with a shear of bright flame and he met the girl’s strike, his sunsteel scoring her blade. The lass yelled “MIA!” again, the three remaining marines cried out and drew their shortblades, Cloud spat a black curse, and before he knew it, the cabin was in chaos. Gravebone swords. And lastly, and probably strangest of all, as the girl aimed a scything blow at Centurion Ovidius Varinius Falco, second century, third cohort’s cocky neck, a shadow shaped like a cat lunged out from beneath her voluminous robes with an unearthly yowl, followed by a rather alarmed nine-year-old boy, gagged and bound at his wrists. Several things happened in quick succession here, each slightly more surprising than the last. First, the lass shouted “MIA!” at the top of her lungs toward the open porthole. Which, all things considered, Cloud thought rather odd. Second, she moved, flinging a knife from inside her sleeve and drawing a shortsword she’d hidden fuck-knows-where. The knife sailed into the throat of the closest marine, and as the man fell back in a spray of red, the lass lashed out at the centurion with her blade, face twisted in a snarl. Third, the big fellow in the corner threw back his hood, revealing a corpse-pale face, eyes like a daemon and saltlocks like … well, Cloud had no fucking idea, but they were moving by themselves. The fellow drew out his two suspiciously sword-shaped lumps from beneath his robe, which indeed turned out to be swords. “Fear has its uses,” he replied. “Fear is what keeps the dark from devouring you. Fear is what stops you joining a game you cannot hope to win.” “I have never lied to you, daughter,” he said. “Not once, throughout it all. When I ordered you drowned, you were worthless to me. Jonnen was young enough to claim as my own. You were too old. But now you’ve proved yourself my daughter true. Possessed of the same will as I: not only to survive, but to prosper. To carve your name with bloody fingernails into this earth. Darius sought to become a kingmaker? You can truly be one. The blade in my right hand. Whatever you desire will be yours. Wealth. Power. Pleasure. I can do away with those gold-grubbing whores in the Red Church and have you at my side instead. My daughter. My blood. As dark and beautiful and deadly as the night. And together, we can sculpt a dynasty that will live for a thousand years.” “Mia, if Darius Corvere’s rebellion had triumphed, his beloved General Antonius would now be king of Itreya. The Senate House would be a ruin and the constitution in ashes. And I don’t blame the man for trying. Darius gave his best. The only difference between he and I is that his best wasn’t good enough to win the game.” “The same way I just laid c-claim to a throne.” Scaeva twisted the Trinity this way and that, veins standing taut in his neck, hissing through gritted teeth. “A matter of will, daughter m-mine. To claim true power, you need not soldiers … n-nor senators, nor servants of the holy. All you need is the will to do what others will n-not.” “YOU MUST MAKE WHOLE WHAT WAS BROKEN, MIA. YOU MUST RETURN MAGIK TO THE WORLD. RESTORE THE BALANCE BETWEEN NIGHT AND DAY, LIKE IT WAS IN THE BEGINNING. LIKE IT WAS ALWAYS MEANT TO BE. ONE SUN. ONE NIGHT. ONE MOON.” “IN THE EMPIRE OF OLD ASHKAH, THEY KNEW ANAIS BY ANOTHER NAME.” Mia looked at the glowing orb—the same she’d seen in the moment she slew Furian in Godsgrave Arena—and felt her shadow grow darker still. “The Moon,” she realized. Tric nodded. “HE WAS THE EATER OF FEAR. THE DAY IN THE DARKNESS. HE REFLECTED HIS FATHER’S LIGHT AND BRIGHTENED HIS MOTHER’S NIGHT. IN THE EMPIRE OF OLD ASHKAH, HE TAUGHT THE FIRST SORCERII THE ARTS ARCANE. A GOD OF MAGIK AND WISDOM AND HARMONY, WORSHIPPED ABOVE ALL OTHERS. NO SHADOW WITHOUT LIGHT, EVER DAY FOLLOWS NIGHT, BETWEEN BLACK AND WHITE…” “There is gray…,” Mia murmured. “HE WAS THE BALANCE BETWEEN NIGHT AND DAY. THE PRINCE OF DAWN AND DUSK. AND FEARING HIS GROWING POWER, THE EVERSEEING RESOLVED TO SLAY HIS ONLY SON.” The stone reliefs began moving again as Tric spoke. Graven hands shifting to cover sightless eyes. Mouths widening in horror. The orb in the pool shifted, became a sharp, crescent shape, dripping blood. In the back of her mind, Mia swore she could hear other voices. Thousands of them, just beyond the edge of hearing. And they were screaming. “AA STRUCK WHILE ANAIS SLEPT,” Tric continued. “HE CUT OFF HIS SON’S HEAD AND HURLED HIS BODY FROM THE HEAVENS. ANAIS’S CORPSE PLUMMETED TO THE EARTH, TEARING THE LAND ASUNDER AND THROWING ALL THE WORLD INTO CHAOS. THE ASHKAHI EMPIRE IN THE EAST WAS COMPLETELY DESTROYED. AND WHERE HIS SON’S BODY LAY IN THE WEST, AA COMMANDED HIS FAITHFUL TO BUILD A TEMPLE TO HIS GLORY. THAT TEMPLE BECAME A CITY, AND THAT CITY BECAME THE NEW HEART OF HIS FAITH.” “The Ribs.” Ash glanced at the gravebone blade at her waist. “The Spine.” “This whole place…,” Mia realized, looking around them. Tric nodded. “A GOD’S GRAVE.” Heart hammering, mouth dry, Mia pictured the illustration she’d found at the end of Cleo’s journal—a map of Itreya before the rise of the Republic. The bay of Godsgrave had been missing entirely, a peninsula filling the Sea of Silence where the Itreyan capital now stood. And in that spot, three words had been scribed in blood-red ink. “Here he fell…,” she whispered. “HERE HE FELL,” Tric nodded. “BUT GODS DON’T DIE SO EASILY. AND THE MOTHER KEEPS ONLY WHAT SHE NEEDS. ANAIS’S SOUL WASN’T EXTINGUISHED.” ANAIS’S CORPSE PLUMMETED TO THE EARTH, TEARING THE LAND ASUNDER YOUR VENGEANCE IS AS THE SUNS, MIA. IT SERVES ONLY TO BLIND YOU. Mercurio raised an eyebrow, cigarillo still smoldering at his lips as he examined the tome. It was bound in leather, black as a truedark sky. The edges of the pages were stained blood-red, and a crow in flight was embossed in glossy black on the cover. He opened the book, looked down to the first page. “Nevernight,” he muttered. “Stupid name for a book.” “Makes for interesting reading,” Aelius said. Mercurio opened the book to the prologue, rheumy eyes scanning the text. CAVEAT EMPTOR People often shit themselves when they die. Their muscles slack and their souls flutter free and everything else just … slips out. For all their audience’s love of death, the playwrights seldom— Mercurio flipped through a few more pages, softly scoffing. “It has footnotes? What kind of wanker writes a novel with footnotes?” “It’s not a novel,” Aelius replied, sounding wounded. “It’s a biography.” “About who?” The chronicler simply nodded back to the book. Mercurio flicked through a few pages more, scanning the beginning of chapter three. … dropped him into the path of an oncoming maidservant, who fell with a shriek. Dona Corvere turned on her daughter, regal and furious. “Mia Corvere, keep that wretched animal out from underfoot or we’ll leave it behind!” And as simple as that, we have her name. Mia. Mercurio faltered. Cigarillo hanging from suddenly bone-dry lips. His blood ran cold as he finally understood what he held in his hands. Glancing up at the shelves around him. The dead books and lost books and books that never were—some burned on the pyres of the faithful, some swallowed by time, and others … Simply too dangerous to write at all. Aelius had wandered off down the twisted row, hands in his pockets and muttering to himself, a trail of thin gray smoke left behind him. But Mercurio was rooted to the spot. Utterly mesmerized. He began flipping faster through the pages, eyes scanning the flowing script, snatching only fragments in his haste. “The books we love, they love us back.” “I will give your brother your regards.” “Who or what is the Moon?” she asked. Mercurio reached the end, turning the book over and over in his hands. Wondering why there were no more pages and looking around the library of the dead in mute wonder and fear. “I found another one, too,” Aelius said, returning from farther down the row. “About three months back. Wasn’t there one turn, next turn, there it was.” The chronicler handed Mercurio another heavy tome. It was similar to the one he already held, but the pages were edged in sky blue rather than blood-red. A wolf was embossed on the black cover instead of a crow. Juggling the first book into the crook of his elbow, he opened the second’s cover and peered at the title. “Godsgrave,” he muttered. “Follows on from the first,” Aelius nodded. “I think I liked this one better, actually. Less fucking about at the start.” The choir sang in the ghostly dark around them, echoing through the great Athenaeum. Mercurio’s hands were shaking, cigarillo falling from his mouth as he fumbled with the first tome, opening it finally to the title page. And there it was. NEVERNIGHT BOOK - OF THE NEVERNIGHT CHRONICLE by Mercurio of Liis The old man closed the book, looked at Niah’s chronicler with wondering eyes. “Holy shit,” he breathed. An endless heaven for any reader, and a living hell for any librarian. And now, here he was. A worm on Drusilla’s hook. For all his bluff, he knew the Lady of Blades spoke truth—Mia loved him like blood. She’d never let him die in here, not if she thought she had a chance to save him. And with those wretched daemons riding her shadow and eating her fear, in Mia’s head there was always a chance. “The bishop of Godsgrave is already back at the Quiet Mountain,” Solis said. “He put up some resistance,” Mouser said. “We had to hurt him, I’m afraid.” Spiderkiller looked at Ashlinn with black, glittering eyes. “There are some among us who are dearly hoping the same can be said of you, child.” “Please,” Drusilla waved to the chair in front of her. “Sit.” “Or what?” Ashlinn said, her anger rising. “You can’t kill me like you killed my da, you old bitch. The map’s branded on my skin. If I die, it’s lost forever.” “Please sit, Dona Järnheim,” said a voice. A man stepped out from Mercurio’s bedchamber, and Ashlinn’s belly filled with cold ice. He was tall, painfully handsome, dark hair shot through with the faintest streaks of gray. He wore a long toga of rich purple, a golden laurel at his brow. “No . . . ,” Ashlinn breathed. “If we wanted you dead, you’d have been so long ago,” Consul Scaeva said. “So, please, sit before we are forced to resort to . . . unpleasantness.” “You’re dead,” Ashlinn whispered. “I saw you die . . .” “No,” Scaeva said. “Although I admit the likeness was uncanny.” Ashlinn’s eyes grew wide as realization sank home . . . “The Weaver,” Ash whispered. “Marielle. She gave someone else your face . . .” “You always were a clever one, Ashlinn,” Aalea smiled. “You’ll forgive the appertaining drama, I hope,” Consul Scaeva said. “But such subterfuge is necessary for a man with as many enemies as I.” Ashlinn searched their faces, mind awhirl. They’d known. They’d known this whole fucking time . . . But why would they let us . . . . . . Unless they wanted us . . . Like a puzzlebox with no more missing pieces. All of them falling into place. “You wanted Cardinal Duomo dead,” she whispered. “But you couldn’t just have the Church kill him. He was protected by the Red Promise. Only a Blade would be good enough to end him . . . but it had to be a Blade willing to betray the Ministry. That way, the Church’s reputation stays intact, and you still see your enemy dead.” “And once I reveal myself miraculously alive to Godsgrave’s adoring citizens . . .” “ . . . They’ll adore you all the more.” “And be left with no doubt of the continuing danger our Republic faces.” “Buying you a fourth term as consul . . .” “O, no,” Scaeva said, smiling wide. “That laurel is already bought. But the brutal assassination of a grand cardinal in front of the entire capital on Aa’s most holy feast? Say it with me, young Dona Järnheim. Perpetual. Emergency. Powers.” Ashlinn’s lips curled in derision. The ego on this tosser . . . The girl tossed her pack away with an almost casual contempt, plopped herself into the offered chair, and put her feet on Mercurio’s desk, right in Drusilla’s face. The old woman glowered, but Mia’s gravebone blade was still in Ash’s hand, her fingers drumming on the hilt. “Foresaw everything, neh?” she asked the consul. “I foresaw enough.” “Except the part where Mia stole your son?” Duomo stopped before her, looked down with a gentle smile. It had been years since he’d seen her last. She had a new face and new scars to show for her time. But looking up into his eyes, she searched for recognition. Some sliver of understanding about who it was kneeling before him. Some acknowledgment of all he’d done. Nothing. He doesn’t even know me. More Luminatii, Scaeva marching behind, taking his time. Waving with his son to the crowd. And as he and his retinue drew nearer, closer, above the stubborn butterflies flitting about her belly, Mia felt it. A now familiar sensation. Hunger. Want. The longing of a puzzle, searching for a piece of itself. Maw’s teeth . . . Her eyes widened. Mouth dry as ashes. Someone here is darkin . . . She searched among the soldiers, felt no hint of hunger. Heart hammering, she looked to Duomo, but no . . . that would be impossible. She’d seen him wielding a blessed trinity in his hand—if he were darkin, sanctified sigils of Aa would repel him, just as she . . . O, Black Mother . . . . . . Scaeva? Her stomach sank. Eyes wide. But again, she’d seen him the truedark she attacked the Basilica Grande. There among the pews in Aa’s holy house, no ill effects among the Light Father’s faithful or his blessed symbols. But . . . O, Black Mother . . . The boy . . . Scaeva’s son. She looked at him, found him looking back, brow creased in puzzlement. He was dark of hair, dark of eye, just like her. And as her stomach sank toward her toes, in his face, the line of his cheeks, or perhaps the shape of his lips, she saw . . . “Luminus Invicta, heretic,” Remus said, raising the blade above her head. “I will give your brother your regards.” . . . she saw. “You have what is yours,” Alinne said. “Your hollow victory. Your precious Republic. I trust it keeps you warm in the nevernight.” Consul Julius looked down at Mia, his smile dark as bruises. “Would you like to know what keeps me warm in the nevernight, little one?” No . . . Mia blinked in the gloom. Eyes searching the cell beyond. “Mother, where’s Jonnen?” The Dona Corvere mouthed shapeless words. She clawed her skin, dug her hands into her matted hair. Gritting her teeth and closing her eyes as tears spilled down her cheeks. “Gone,” she breathed. “With his father. Gone.” Not “dead.” Only “gone.” With his . . . . . . no. O, mother, please no . . . “Father,” the boy on Scaeva’s shoulder’s asked. “Yes, my son?” the consul replied. The child narrowed his ink-black eyes. Looking right at Mia. “I’m hungry . . .” Mia turned her eyes to the stone. Her heart was thundering now, despite all Mister Kindly’s and Eclipse’s efforts. Pulse rushing beneath her skin. The thought was too repulsive to believe, too awful, too horrifying, but glancing up again into the boy’s face, she saw it. The shape of her mother’s eyes. The bow of her lips. Memories of the babe she’d played with as a child, six years and a lifetime ago, flooding back into her mind and threatening to spill from her throat in a scream. Jonnen. O, sweet little Jonnen. My brother lives . . . Mind racing. Heart pounding. Sweat burning. Mia curled her hands into fists and pressed her knuckles into the stone as Cardinal Duomo stood before her and spread his arms wide, face upturned to the sky. Patience. “Father of Light!” Duomo called. “Creator of fire, water, storm and earth! We call you to bear witness, on this, your holy feast! Through right of combat and trial before your everseeing eyes, we name this slave a free woman, and beg you grant her the honor of your grace! Stand and speak your name, child, that all may know our victor!” Patience. “Crow!” the crowd roared. “CROW!” The name echoed on the arena walls. Reverberation. Admonition. Benediction. “Crow!Crow!Crow!Crow!” The girl rose slowly, standing like a mountain beneath those burning suns. “My name is Mia,” she said softly. Hand slipping to the gravebone blade at her wrist. “Mia Corvere.” Duomo’s eyes widened. Scaeva’s brow creased. The blade whistled as it came, slicing through the cardinal’s throat, ear to bloody ear. He staggered back, dark blood fountaining from the wound, fingers to his severed carotid and jugular. The spray hit her face, thick and red, warm on her lips as she moved, as the Luminatii moved, as everything around her moved. The crowd roaring in horror. The cardinal collapsing to the stone. The Luminatii crying out, raising their blades. And the girl. The Blade. The gladiatii. The daughter of a murdered house, child of a failed rebellion, victor of the greatest bloodsport the Republic had ever seen . . . she charged. Right at Julius Scaeva. Fear bleached his handsome features, his dark eyes wide with horror. The Luminatii moved to intercept her, but she was quick as shadows, sharp as razors, hard as steel. Scaeva cried out, lifting the boy off his shoulders, the child’s eyes wide with fear. And as Mia’s belly rolled, the consul held his son out like a shield, and coward among cowards, he threw the boy at Mia’s face. She cried out, hand outstretched, the child’s arms pinwheeling as he flew. The world slowed to a crawl, the suns pounding at her back, the heat of sunsteel flame rippling on her skin. She caught the boy, clutching him tight in her free arm, pulling him close. And rising up on her toes, she spun like a dancer, long dark hair streaming, arm outstretched in a glittering arc. Perfection. Her blade sank into Scaeva’s chest, buried all the way to the hilt. The consul gasped, eyes open wide. Mia’s face twisted, scar tissue pulling at her cheek, hatred like acid in her veins. All the miles, all the years, all the pain, coalescing in the muscles of her arm, corded and pulled tight as she dragged her blade sideways, splitting his ribs and cutting his heart in two. She left the gravebone blade quivering in his chest, the crow on the hilt smiling with its amber eyes, dark blood fountaining from the wound. And with the boy clutched tight to her chest, still spinning like poetry, like a picture, she twisted backward, over the edge of the battlements. And she fell. In turns to come, the next few moments would be the topic of countless taverna tales, dinner table debates, and barroom brawls across the city of Godsgrave. The confusion arose for a number of reasons. Firstly, it was around this moment where Magistrae, Leonides, Tacitus, Phillipi, and virtually every other sanguila and executus in the ringside boxes began vomiting blood from the poisoned goldwine they’d drunk, which proved more than a little distracting. The central plinth was a fair distance from even ringside seats, so it was difficult for many in the audience to see. And last, and most important, the grand cardinal and the consul had just been brutally murdered by the champion of the magni, which left everyone in the crowd a little shocked. Some said the girl fell, the boy in her arms, right into the mouth of a hungry stormdrake. Some said she hit the water, but avoided the drakes, making her escape through the pipes that had vented the ocean out onto the arena floor. And then there were those—discounted as madmen and drunks, for the most part—who swore by the Everseeing and all four of his Holy Daughters that this little slip of a girl, this daemon wrapped in leather and steel who’d just murdered the two highest officials in the Republic, simply disappeared. One moment falling toward the water in the long shadow of the battlements, the next, completely vanished. The arena was in an uproar, fury, dismay, terror. The blood masters collapsed in their seats, or fell to the stone, Leonides and Magistrae dead among them, every gladiatii stable in the Republic beheaded with a single stroke. Duomo lay on the battlements, his face bled white, throat cut to the bone. And beside the grand cardinal, his purple robe drenched with dark heart’s blood, lay the savior of the Republic. Julius Scaeva, the People’s Senator, the man who had bested the Kingmakers and rescued Itreya from calamity, had been assassinated. Ashlinn stole through the city of Bridges and Bones like a knife through a consul’s chest. The sounds of panic were swelling in the arena behind them, the girl’s heart singing as cathedrals all over the city began ringing a death knell. “Black Mother, she did it.” She chewed her lip, stifling a fierce grin. “She did it.” Mercurio sighed. “I’m not sure if you’ve noticed yet, girl, but Mia Corvere and lunacy go together like cigarillos and smoke.” “There’s only one way this ends,” she said. “And you and I both know it. But I’ll come at you frontways. I can promise you that, at least.” The Unfallen nodded, tightened his grip on his blade. “So be it. Sanguii e Gloria.” Mia shook her head. “You can keep the glory, Furian.” She turned her eyes to the consul’s chair. “I’m just here for the blood.” those who do not fear the flame are burned. those who do not fear the blade are bled. and those who do not fear the grave . . .” “ . . . ARE FREE TO BE AND DO WHATEVER THEY WISH. Life is pain, and loss, and sacrifice.” Furian grit his teeth and closed his eyes. “But we should welcome that pain. If it brings us salvation.” The fear. Welling in her belly like poison. She wanted Mister Kindly and Eclipse back, right now. Life was so much easier with no regard for consequence, no thought for pain. Her passengers were what made her strong, allowed her to be a terror of the sands, to spare no thought for hurting or being hurt in kind. She was steel when they were inside her. Without them . . . Without them, what am I? “ . . . I THINK YOU TOO STUPID TO BE FRIGHTENED OF ME, LITTLE MOGGY. BUT ONE TURN, I SHALL TEACH YOU THERE IS A PRICE FOR OWNING TOO MUCH MOUTH AND NOT ENOUGH TEETH . . .” “ . . . tell me, dear mongrel, do you practice these blunt little threats when you’re alone, or do you simply improvise “Thousands would have died. Tens of thousands, maybe. And for what? So one man could wear a crown, and another could place it on his head? I couldn’t do it. I went to my centurion and told him so. He listened patiently as I tried to tell him the wrong of it. And when I was done, he had me beaten near to death, branded a coward, and sold off to the first bidder on the blocks.” Sidonius shook his head. “Six years in chains for one moment of principle. That’s the tithe I paid. But you know what I learned in all the years between then and this, little Crow?” “ . . . No.” Sid fixed Mia in his ice-blue stare. “There’s no softer pillow than a clear conscience.” “What is her name?” Feet stamping, hands clapping, the word reverberating across the sands. “Crow! Crow! Crow! Crow!” Mia looked down at the bloody sword in her hand. Over to Furian, curled in a ball in the dirt, hands to his savaged throat. She raised her eyes to the sanguila’s box, saw Leona on her feet, horrified stare locked on Furian. Arkades stood beside her, hands raised in somber applause. She thought of Godsgrave, of the Venatus Magni, the berth her victory had now assured. She thought of Bryn, her dead brother cradled in her arms as she wailed. She thought of her father, holding her hands as he whisked her around some glittering ballroom, her feet atop his as they danced. Her mother, making her watch as he was hanged, as she whispered the words that would shape Mia forever, as the hope children breathed and adults mourned withered and fell away, floating like ashes on the wind. “Never flinch. Never fear. And never, ever forget.” What is my name? “Crow! Crow! Crow! Crow!” “The magistrae?” Mia raised her eyebrow. “I’ve a penchant for older women, little Crow.” “You’ve a penchant for anything with two tits, a hole and heartbeat, Sid.” Rubbing this prick’s face in his own shit had now become a burning priority. She turned in a circle, taking in the ocean of faces, the blood-drunken cheers, the thundering feet. And for a tiny moment, she ceased being Mia Corvere, the orphaned girl, the darkin assassin, the embodiment of vengeance. She held her arms wide, dripping red onto the sand, and listened to the crowd roar in response. And just for a breath, she forgot what she had been. Knowing only what she’d become. Gladiatii. But there are no girls on the sand. No mothers or daughters. Sons or fathers. Only enemies. You spend a moment worrying about what’s between your opponent’s legs you’ll find your head parted from your body. And what good will your fool cock do you then?” “You’re a lying cunt is what you are.” “There’s an obsidian vault inside the Revered One’s chambers,” Ash spat. “And inside that vault, they keep a ledger of every offering the Church has undertaken. All their patrons. All their shit. When I poisoned the Ministry at the initiation feast, I stole the ledger, Mia. That’s the reason they’ve been hunting me and my da for the past eight months. Not because we betrayed them. Because we knew all their dirty little secrets.” “They’re assassins, of course they would! There’s no sanctity to what the Red Church does. They murder people for money. Half of them are psychopaths and the rest are just sadistic bastards. They’re not servants of some divine Goddess of Night, they’re fucking whores.” “And I’ve two golden rules in this life, little one—never trust a man who speaks of his mother without kindness, and never trust a woman who hides her face without cause.” “The sand is no place for brawlers,” Executus said, his scar creased in a scowl. “It is checkered board. And on it, we play the greatest game of all. A wily opponent may feign weakness. Allow you to exert yourself and learn your patterns, all without breaking a sweat. Overconfidence has ended a thousand fools who’d name themselves gladiatii. Mark this, or it will be the end of you. Now get off my fucking sand.” “Blade Mia. Godsgrave is the only Red Church chapel we’ve managed to rebuild in the eight months since the Luminatii attack. Thanks to Grand Cardinal Duomo and his god-bothering shitheels, I’m one of two bishops servicing the whole fucking Republic, in fact, and with Scaeva running for a fourth term as consul and Godsgrave politics all aflutter, there’s no end of bastards who need killing. So, given that I’m busier than a whorehouse running a two-for-one special, do me the honor of saying thank you, and taking what you’re bloody given.” “Gladiatii fear no death!” Executus continued, spittle on his lips. “Gladiatii fear no pain! Gladiatii fear but one thing—the everlasting shame of defeat! Mark my lessons. Know your place. Train until you bleed. For if you bring such shame upon this collegium, upon your domina, I swear by almighty Aa and all four of his holy fucking Daughters. Executus growled. “Unworthy to lick the shit from my boot. What do you know of glory? It is a hymn of sand and steel, woven by the hands of legends and sung by the roaring crowd. Glory is the province of gladiatii. CASSIUS FOUND ENOUGH MEANING IN LIFE BY ENDING THE LIVES OF OTHERS. HE NEEDED NO MORE THAN THAT . The old man hooked his thumbs into his waistcoat. “Problem with being a librarian is there’s some lessons you just can’t learn from books. And the problem with being an assassin is there’s some mysteries you just can’t solve by stabbing fuck out of them.” “You said I was a girl with a story to tell.” “And what else?” Smoke drifted from the girl’s lips as the old man stared her down. “You said maybe here’s not where I’m supposed to be,” she finally replied. “Which stank like horseshit at the time, and smells even worse now. I proved myself. The Ministry would all be nailed to crosses in the ’Grave if not for me. And I’m sick and bloody tired of everybody around here seeming to forget that.” “You don’t find any irony in earning your place in a cult of assassins by saving half a dozen lives?” “I killed almost a hundred men in the process, Aelius.” “And how do you feel about that?” “What are you, my nursemaid?” Mia snapped. “A killer is what I am. The wolf doesn’t pity the lamb. Looking out over the mezzanine to the endless shelves below, the girl couldn’t help but smile. She’d grown up inside books. No matter how dark life became, shutting out the hurt was as easy as opening a cover. A child of murdered parents and a failed rebellion, she’d still walked in the boots of scholars and warriors, queens and conquerors. The heavens grant us only one life, but through books, we live a thousand. if the unpleasant realities of bloodshed turn your insides to water, be advised now that the pages in your hands speak of a girl who was to murder as maestros are to music. Who did to happy ever afters what a sawblade does to skin. “Slender” is a poet’s way of saying “starved.” “The largest of the three suns is a furious red globe called Saan. The Seer. Shuffling across the heavens like a brigand with nothing better to do, Saan hangs in the skies for near one hundred weeks at a time. The second sun is named Saai. The Knower. A smallish blue-faced fellow, rising and setting quicker than its brother—” “… sibling…,” the cat corrected. “… old ashkahi does not gender nouns…” “… quicker than its sibling, it visits for perhaps fourteen weeks at a stretch, near twice that spent beyond the horizon. The third sun is Shiih. The Watcher. A dim yellow giant, Shiih takes almost as long as Saan in its wanderings across the sky.” Peacock’s mouth opened as she introduced her boot to his partner’s groin, kicking him hard enough to cripple his unborn children. And as simple as that, our girl’s tally of endings had multiplied threefold. Pebbles to avalanches. “You can drag the girl from the gutter, but never the gutter from the girl.” “You imagine an oaf, don’t you?” Mia continued. “Someone so full of wank there’s no room for wits. A slow-minded bastard who struts about full of spunk and completely ignorant of how he looks to others.” “Truth is, there’s no difference between your nethers and mine. Aside from the obvious, of course. But one doesn’t carry any more weight than the other. Why should what’s between my legs be considered any smarter or stupider, any worse or better? It’s all just meat, Don Tric. In the end, it’s all just food for worms. Just like Duomo, Remus, and Scaeva will be.” “Corvere and his cronies got off light with that hanging. Their commonborn troops have been crucified along the banks of the Choir. Rumor is they’re going to pave the Senate House streets with their skulls. A lot of those soldiers had familia ’round here. So, I’d not walk about with a traitor’s mark pinned to my tits were I you.” “You’ve heard the saying the quickest way to a man’s heart is through his stomach?” “I always wondered about that,” Tric frowned. “Ribcage seems much quicker to me.” “True enough. - “Bastard I might be,” Tric spat. “But you’re the one who decides to be a cunt every turn of your life.” Mia had her knife out, smiling. “That’s the sweetest thing you’ve ever said to me.” His was the beauty of a fresh suicide, laid out in a new pine box. The kind of beautiful you know will spoil after an hour or two in the ground. “All power comes with a tithe. We all pay a price. Speakers, their hunger. Weavers, their impotence. And those who call the Dark…”—Drusilla looked down to Mia’s shadow—“… well, eventually it calls them back.” The trust of a woman who can lead you to your kill? How will steel serve you then?” “I’m told hot coals work wonders in those situations.” “Warm skin serves better still. And leaves fewer “They will never see the knife in your hand if they are lost in your eyes. They will never taste the poison in their wine when they are drunk on the sight of you.” A small shrug. “Beauty simply makes it easier, love. Easier than you have it now. It may be sad. It may be wrong. But it is also true.” “It may not be right,” Aalea said. “It may not be just. But this is a world of senators and consuls and Luminatii—of republics and cults and institutions built and maintained almost entirely by men. And in it, love is a weapon. Sex is a weapon. Your eyes? Your body? Your smile?” She shrugged. “Weapons. And they give you more power than a thousand swords. Open more gates than a thousand war walkers. Love has toppled kings, Mia. Ended empires. Even broken our poor, sunsburned sky.” It all made sense now. Aalea’s unearthly beauty. Mouser’s young face and old eyes. Even the Revered Mother’s facade of homely warmth. She understood this room’s name at last. The Hall of Masks. Daughters, it might apply to the entire Mountain. Killers within—killers all—hiding behind facades not of ceramic or wood, but flesh. Beauty. Youth. Soft maternity. How better to maintain a cadre of anonymous assassins than by reshaping their faces whenever the need struck? How better to seduce a mark or blend into a crowd or be met and instantly forgotten than by crafting a face suited to the task? How better to make us forget who we were, and shape us into what they want us to be? “That is how it begins. The weaving is only the first of it. The butterfly remembers being the caterpillar. But do you think it feels anything but pity for that thing crawling in the muck? Once it has spread those beautiful wings and learned to fly?” “That is how it begins. The weaving is only the first of it. The butterfly remembers being the caterpillar. But do you think it feels anything but pity for that thing crawling in the muck? poison is a sword with no hilt, children. There is only the blade. Double-edged and ever-sharp. To be handled with utmost care lest it bleed you to your ending.” “Well, he might’ve had a hard time convincing the Senate there was still a crisis, but when an assassin tries to murder the head of the Republic in a cathedral full of witnesses, it gets a touch easier to make the case. The Truedark Massacre showed the Senate just how dangerous this city still is. You’d need a bloody army to get through to Scaeva now. He doesn’t take a piss without a cadre of Luminatii to hold the pot.” Mia sipped her whiskey. Eyes on the table. “Cardinal Duomo is still on Scaeva like a babe at his mother’s tit, of course,” Mercurio muttered. “Has his ministers preaching from the pulpits, praising our ‘glorious consul’ and his ‘golden age of peace.’” The old man scoffed. “Golden age of tyranny, more like it. We’re closer to a new arse on the throne than when the Kingmakers raised their army. But the plebs lap it up. Peace means stability. And stability means money. Scaeva’s near untouchable now.” “A shard of glass can slice a man’s throat. Pierce his heart clean. Open his wrists to the bone. But press it in the wrong place, glass with shatter. Iron will not.” “A shard of glass can slice a man’s throat. Pierce his heart clean. Open his wrists to the bone. matters not what you are,” Cassius said. “Only that you are. And if you seek an answer to some greater riddle of yourself, seek it not from me until you’ve earned it. In one measure, and one measure alone, you You are beauty and a philosopher. be still, my beating heart…” “The brighter the light, the deeper the shadow.” Focusing on the task. The comfort of the rote. “That goat-loving, mule-sucking, pig-fucking sonofabitch,” Ash growled. “Righteous brothers,” Remus began. “This eve, we strike a blow against a blasphemy that has blackened our glorious Republic for decades. The ministers of this godless church are to be brought back alive to Godsgrave for interrogation. But any other night-worshipping bastard you cross within these walls is to be shown no mercy. We are the right hand of Aa, and this eve, we bring this house of heresy to its knees.” “Righteous brothers,” Remus began. “This eve, we strike a blow against a blasphemy that has blackened our glorious Republic for decades. The ministers of this godless church are to be brought back alive to Godsgrave for interrogation. But any other night-worshipping bastard you cross within these walls is to be shown no mercy. We are the right hand of Aa, “Hear me, Aa. Hear me, Father. Your flame, my heart. Your light, my soul. For your name, and your glory, and your justice, I march. Shine upon me.” Remus raised his head. Nodded at his men. “Luminus Invicta.” “Hear me, Niah,” she whispered. “Hear me, Mother. This flesh your feast. This blood your wine. This life, this end, my gift to you. Hold him close.” But again, at the final hurdle, she’d stumbled. And she’d fallen. “Story of my life,” she muttered. “Every nevernight since I was ten years old, I’ve dreamed of killing you. You and Scaeva and Duomo. I gave up everything. Any chance I ever had of ever being happy. Every turn, I’d picture your face and imagine all the things I’d say to let you know just how much I hate you. It’s all I am anymore. It’s all that’s left inside me. You killed me, Remus. Just as sure as you killed my familia.” Mia raised her sword, leveled it at Remus’s head. “And now, I’m going to kill you.” “O, fuck off, god-botherer,” Ashlinn snarled. “I’m not in this for your glorious Republic and I don’t give a shit about you or your men. If I wanted a trump card up my sleeve, that’s my business. And in case you missed it, it just saved your miserable life. So instead of bleating about it, maybe you should end the girl who just tried to murder you, then go make sure the rest of the Ministry is still under lock and key? Unless you and your merry band of idiots want to accidentally gut them, too?” “You’ll never know my name, I’m afraid,” she said. “It’s the shadow road for me. I’m a rumor. A whisper. The thought that wakes the bastards of this world sweating in the nevernight. And you are a bastard, Swordbreaker of the Threedrake clan. A bastard I made a promise about to someone I cared for, not so long ago.” I suppose now you think you know her. The girl some called Pale Daughter. Or Kingmaker. Or Crow. The girl who was to murder as maestros are to music. Who did to happy ever afters what a sawblade does to skin. Look now upon the ruins in her wake. As pale light glitters on the waters that drank a city of bridges and bones. As the ashes of the Republic dance in the dark above your head. Stare mute at the broken sky and taste the iron on your tongue and listen as lonely winds whisper her name as if they knew her too. Do you think she would laugh or weep to see the world her hand has wrought? Do you think she knew it would come to this? Do you really know her at all? Not yet, little mortal. Not yet by half. But after all, this tale is only one of three. Birth and life and death. So take my hand now. Close your eyes. And walk with me. “Pigs. Paupers. Cattle. Kings. It makes no difference to Our Lady. It all stains alike. And it all washes out the same.” “Go,” he finally said. “May Our Lady be late when she finds you. And when she does, may she greet you with a kiss.” “One stipulation,” the big man said, holding up his finger. “An item of import to your patron. A map, written in Old Ashkahi and set with a seal shaped like a sickle’s blade. The Dona is brokering an exchange with the map’s current owner. You must take the map, along with her life.” “ . . . What’s the map of?” “It provides detailed directions to the Empire of None of Your Fucking Concern.” “Who is this patron, Shahiid?” “Irrelevant,” Solis scowled. “All you need know is that, miracle of miracles, they are pleased with your results. You are being sent after bigger game.” Mia looked Solis up and down, considering. From the scowl at his brow, the tension in his jaw, she’d wager her last coin the Revered Father had violently objected to her assignment. But despite that, she’d been appointed anyway. Which meant this patron was powerful. Or rich. Or both. Well, that narrows it down . . . “So what new backwater does my illustrious patron send me to?” Mia asked. “Last Hope? Amai? Sto—” “Godsgrave,” Mouser replied. Mia’s tongue cleaved to her teeth, her heart running quicker. Maw’s teeth. The ’Grave . . . The capital of Itreya. Only the Church’s finest Blades served in the City of Bridges and Bones. Grand Cardinal Duomo lived there, as did Consul Scaeva. If Mia wanted revenge for her familia, her first step was getting close to the men who murdered them. If she’d somehow lucked into a dream posting . . . “I know your mind,” Solis growled. “I know why you came to this Church and what it is you seek. So, while I am sending you to the capital against my better judgment, I am telling you this now, and I am telling you once.” Solis towered over her, blind eyes boring into Mia’s own. “Consul Julius Scaeva is not to be touched.” Mia scowled. “Wh—” “I will not tolerate you pursuing your own vendettas while serving this Ministry,” Solis said. “You already murdered a bara of the Dweymeri out of some misplaced sympathy for the boy you were bedding. I’ll not have another unsanctioned kill wrought by your hand. Or your quim.” “Who I bed is my concern. And you don’t get to dec—” “I do decide!” Solis roared. “I am Revered Father of this congregation! I give not a beggar’s cuss for who you wet the furs with, but Swordbreaker was a fucking king! What if he’d been a patron of this Church? We’d have breached Sanctity! Our reputation shattered over a child’s whim.” “It wasn’t a whim, it was a promise!” “Let us speak of promises, then, girl,” Solis spat. “Disobey me, and I promise you an ending from which even the Goddess herself would avert her gaze. Scaeva is not to be touched!” “And why not?” Mia looked among the Ministry, her anger finally getting the better of her. “The Luminatii killed Lord Cassius, almost killed all of you! You think Scaeva didn’t order it? Remus was a fucking lapdog. You think he took a piss without asking the consul’s permission first?” “Hear me now!” Solis raised a finger in warning, blind eyes flashing. “Scaeva will be dealt with. But in our own way. In our own time. You are a servant of Our Lady of Blessed Murder, and in the Mother’s name, that means you fucking serve!” Mia felt her cheeks flush with rage. She stared into Solis’s blind eyes and imagined drawing the gravebone stiletto in her sleeve. Cutting his throat. Spilling his steaming guts onto the floor. But amid the outrage, a single, ice-cold thought took her by the scruff of the neck and shook her ’til she was still. . . . He’s right. She had been childish. She had risked the Church’s reputation in killing Swordbreaker. She had thought to kill Duomo and Scaeva if she got back to the ’Grave. Her knuckles were white on the book in her grip. But she forced her fingers to unclench, speaking words that rang heavy in the quiet dark. “In the Mother’s name. I will serve.” “And you, Speaker.” Adonai’s pretty lips twisted in a knowing smile, but Mia kept her face like stone. The speaker was a picture, no doubt. And Mia had entertained her share of fantasies; lying in bed and picturing his pale, clever fingers as her own roamed ever lower. She’d even saved his and his beloved sister’s lives during the Luminatii attack. But Mia couldn’t fool herself into thinking of him as anything but a blackhearted bastard. Still. A fuckable bastard . . . Pig’s blood has a very peculiar taste. The blood of a man is best drunk warm, and leaves a hint of sodium and rust clinging to the teeth. Horse’s blood is less salty, with an odd bitterness almost like dark chocolate. But pig’s blood has an almost buttery quality, like oysters and oiled iron, slipping down your throat and leaving a greasy tang in its wake. Mia was thankful for the chance to show her worth. But problem was, her list of throats to slit was growing longer, not shorter. She’d killed Justicus Remus, but Consul Scaeva and Grand Cardinal Duomo still lived. Her familia were still unavenged. And with Tric’s murder at Ashlinn’s hands during the Luminatii attack, she now had one more windpipe to open before her vengeance was done. And stuck here in Galante, she was no closer to any of them. “You’re next, prettyboy.” The fighter (who was rather pretty) looked to his fellows, the corpse on the ground, and finally to the ledgerman. The greasy fellow glanced up at the sanguila, who were now staring at Mia intently. And turning back to the swordsman, he nodded. The fighter stepped forward, Mia skipped up to meet him. Their match lasted less than ten seconds, ending with Mia’s bootprint embedded in the man’s crotch and her wooden sword shoved down his pretty throat, all the way to the hilt. The girl turned to the crowd and curtseyed again. “A hundred priests,” came the call. “One hundred and ten.” Mia smiled behind her hair as sanguila began bidding. Within moments, her bid was two hundred silver coins—a decent sum by anyone’s measure. But as she looked up into the bleachers, she saw Leonides and Titus hadn’t uttered a word. Though the sanguila watched her intently, though Teardrinker was whispering in Titus’s ear and he was nodding slow, Leonides didn’t raise his voice to bid. Time to stoke the flame. Mia retrieved her wooden blade from the dead fighter’s throat, turned to the third and spoke loud enough for the bleachers to hear. “You. Next.” The big man looked at the two corpses at Mia’s feet. “Fuck that,” he scoffed. “Bring your friends.” Mia smiled at the fighters beside him. “I’ve always wanted to try three at once.” The girl tossed her wooden sword onto the dirt. “Or are you cowards all?” The crowd hooted and jeered, and the fighters rankled. To be bested on their own soil was one thing, but to eat a plateful of shit from an unarmed girl half their size was another. With flashing eyes and swords raised, the men stepped out into the Pit. “Or are you cowards all?” The crowd “I KNOW THAT YOU ARE MEANT FOR MORE THAN THIS,” it said. “YOUR TRUTH LIES BURIED IN THE GRAVE. AND YET YOU PAINT YOUR HANDS IN RED FOR THEM, WHEN YOU SHOULD BE PAINTING THE SKIES BLACK.” “ . . . o, joys, a cryptic one . . .” “YOUR VENGEANCE IS AS THE SUNS, MIA CORVERE. IT SERVES ONLY TO BLIND YOU.” “What the fuck are you talking about?” Mia heard shouts, turning toward the sound of approaching boots. “SEEK THE CROWN OF THE MOON.” And though her hand trembled, she carried that steel like she knew how to swing it. Luka had dropped faster than a bride’s unmentionables on her wedding night. It takes a while for them to really start reeking. O, chances are good if you don’t soil your britches before you die, you’ll soil them soon afterward—your human bodies simply work that way, I’m afraid. But I don’t mean the pedestrian stink of shit, gentlefriends. I speak of the eye-watering perfume of simple mortality. It takes a turn or two to really warm up, but once the gala gets into full swing, it’s one not soon forgot. ","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-nevernight-trilogy-by-jay-kristoff/","summary":"Let\u0026rsquo;s not mess around here. This series has just more than quotes to offer so I have included rich descriptive texts that boil the blood and wake something deep inside. Here\u0026rsquo;s to the good times fellas. Read on for some savage blood-curdling brutalism.\nThe deed is done. The war is won. And at the last, gentlefriend, her song is sung. I suppose you can say you know her now, at least as well as I did.","title":"Best Quotes from Nevernight Trilogy"},{"content":"Currently, I have only managed to finish off the first trilogy in the mammoth that Realm of the Elderlings happens to be but I plan to power through the series soon and add the remainder of the quotes so sit back and enjoy what I have to offer. If you feel a few hidden gems are missing, email me!\nFarseer Trilogy Assassin’s Apprentice When you cut pieces out of the truth to avoid looking like a fool you end up looking like a moron instead. Don’t do what you can’t undo, until you’ve considered what you can’t do once you’ve done it. Very little worth knowing is taught by fear. Nothing takes the heart out of a man more than the expectation of failure. When you spring to an idea, and decide it is truth, without evidence, you blind yourself to other possibilities. Too late to apologize, I\u0026rsquo;ve already forgiven you. Most prisons are of our own making. A man makes his own freedom, too. Learning is never wrong. Even learning how to kill isn\u0026rsquo;t wrong. Or right. It\u0026rsquo;s just a thing to learn, a thing I can teach you. That\u0026rsquo;s all. My silences he mistook for a lack of wit rather than a lack of any need to speak. I think myself cured of all spite, but when I touch pen to paper, the hurt of a boy bleeds out with sea-spawned ink, until I suspect each carefully formed black letter scabs over some ancient scarlet wound. Locked into loneliness were we two and looking at one another every evening we each saw the one we blamed for it. I have since come to know that many men always see another’s good fortune as a slight to themselves If you can read, you can learn anything. If you’ve a will to. For there is a very strange peace in giving over your judgment to someone else, to saying to them, “You lead and I will follow, and I will trust entirely that you will not lead me to death or harm.” You\u0026rsquo;re not especially strong, or fast, or bright. Don\u0026rsquo;t think you are. But you\u0026rsquo;ll have the stubborness to wear down anyone stronger, or faster, or brighter than yourself. I\u0026rsquo;ll be teaching you the nasty, furtive, polite ways to kill people When you spring to an idea, and decide it is truth, without evidence, you blind yourself to other possibilities For it is said, one may ask of the Elderlings, but what they answer may not be the question you ask, but the one you should have asked. And the answer to that question may be one a man cannot hear and live. what I have become. And so I begin again, and again, but always find that I am writing of my own beginnings rather than the beginnings of this land. I do not even know to whom I try to explain myself. My life has been a web of secrets, secrets that even now are unsafe to share. Shall I set them all down on fine paper, only to create from them flame and ash? Perhaps. My memories reach back to when I was six years old. Before that, there is nothing, only a blank gulf I know you meant no harm by it, boy. But men don’t talk about times spent among the pillows with a lady. And assassins don’t talk about…our business.” We all get used to things we once swore we could never live with If ever you make it so they don\u0026rsquo;t need you, they will kill you. I’d have wished myself elsewhere, but there is something in a boy that takes the mundanely difficult and unpleasant and turns it into a personal challenge and an adventure. I idly wished for something else, for any situation that was neither this forsaken chamber nor the tenseness of Burrich’s room. For a restfulness that perhaps I had once known somewhere else but could no longer recall. And so I drowsed into oblivion. But take him now, Regal, and shape him, and a decade hence you will command his loyalty. [\u0026hellip;] A bastard, Regal, is a unique thing. Put a signet ring on his hand and send him forth, and you have created a diplomat no foreign ruler will dare to turn away. He may safely be sent where a prince of the blood may not be risked. Imagine the uses for one who is and yet is not of the royal bloodline. Hostage exchanges. Martial alliances. Quiet work. The diplomacy of the knife. Royal Assassin He shook his head pityingly. “This, more than anything else, is what I have never understood about your people. You can roll dice, and understand that the whole game may hinge on one turn of a die. You deal out cards, and say that all a man\u0026rsquo;s fortune for the night may turn upon one hand. But a man\u0026rsquo;s whole life, you sniff at, and say, what, this naught of a human, this fisherman, this carpenter, this thief, this cook, why, what can they do in the great wide world? And so you putter and sputter your lives away, like candles burning in a draft.” “Not all men are destined for greatness,” I reminded him.“Are you sure, Fitz? Are you sure? What good is a life lived as if it made no difference at all to the great life of the world? A sadder thing I cannot imagine. Why should not a mother say to herself, if I raise this child aright, if I love and care for her, she shall live a life that brings joy to those about her, and thus I have changed the world? Why should not the farmer that plants a seed say to his neighbor, this seed I plant today will feed someone, and that is how I change the world today?” “This is philosophy, Fool. I have never had time to study such things.” “No, Fitz, this is life. And no one has time not to think of such things. Each creature in the world should consider this thing, every moment of the heart\u0026rsquo;s beating. Otherwise, what is the point of arising each day? Stop thinking of what you intend to do. Stop thinking of what you have just done. Then, stop thinking that you have stopped thinking of those things. Then you will find the Now, the time that stretches eternal, and is really the only time there is. Men of passion and vision are often seen as mad. The fight isn\u0026rsquo;t over until you win it, Fitz. That\u0026rsquo;s all you have to remember. No matter what the other man says. I have heard it called a dance, I have heard it called a battle. Some men speak of it with a knowing laugh, some with a sneer. I have heard the study market women chuckling over it like hens clucking over bread crumbs; I have been approached by bawds who spoke their wares as boldly as peddlers hawking fresh fish. For myself, I think some things are beyond words. The color blue can only be experienced, as can the scent of jasmine or the sound of a flute. The curve of a warm bared shoulder, the uniquely feminine softness of a breast, the startled sound one makes when all barriers suddenly yield, the perfume of her throat, the taste of her skin are all but parts, and sweet as they may be, they do not embody the whole. A thousand such details still would not illustrate it. The separate parts of my life became like beads and I the string that ran through them all. I believe if I had ever paused to consider the intricacy of all I did to keep those parts separate, I would have found it impossible. But I was young then, much younger than I suspected, and somehow I found the energy and time to do and be it all. Some things may be learned from words on a page, but some skills are learned first by a man’s hands and heart, and later by his head. But we are two old men, who have grown old together. Sometimes that is a greater closeness. We have come through time to your day and age. We can talk together, quietly, and share memories of a time that exists no more. I can tell you how it was, but it is not the same. It is like being two foreigners, trapped in a land we have come to, unable to return to our own, and having only each other to confirm the reality of the place we once lived. My head cleared, and suddenly I had heart to fight again, to ignore pain and damage, to fight! I swear I saw myself, face purpled from strangling, the rich blood streaming and soaking and the smell so maddening. When I had encountered the Skill joy, I had not found it the tawdry pleasure Galen had implied. Rather, it had been the same rush of blood and thunder of earth that sometimes music brought to me, or a sudden flight of bright pheasant in an autumn wood, or even the pleasure of taking a horse perfectly over a difficult jump. That instant when all things come into balance, and for a moment turn together as perfectly as birds wheeling in flight. There is a place where all time is now, and the choices are simple and always your own. Accept the discipline, live up to the task. I fancied that if I sat very still, I could still feel the warmth of Molly\u0026rsquo;s arms around me. I knew precisely where her cheek had touched mine. A very faint scent of her clung to my shirt from our brief embrace, and I agonized over whether to wear the shirt that day, to carry that scent with me, or to set it aside carefully in my clothing chest, to preserve it. I did not think it a foolish thing at all to care so much about that. Looking back, I smile, but it is at my wisdom, not my folly. Does no one around here ever use the healer? Always I have possessed the loneliness of one raised amid intrigues and clustering secrets, the isolation of a boy who cannot trust the completeness of his heart to anyone. We cannot put old heads on young shoulders. Assassin’s Quest There is a dead spot in the night, that coldest, blackest time when the world has forgotten evening and dawn is not yet a promise. A time when it is far too early to arise, but so late that going to bed makes small sense. Someday is someday, and maybe it will be or maybe it won\u0026rsquo;t. This is a human thing, to worry about things that may or may not come to be. You can\u0026rsquo;t eat meat until you\u0026rsquo;ve killed it. \u0026hellip;To free humanity of time. For time is the great enslaver of us all. Time that ages us, time that limits us. Think how often you have wished to have more time for something, or wished you could go back a day and do something differently. When humanity is freed of time, old wrongs can be corrected before they are done. No. This is right. I feel it. I am the Catalyst, and I came to change all things. Prophets become warriors, dragons hunt as wolves. You will live to love again. You know you have lost your springtime girl, your Molly on the beach with the wind in her brown hair and red cloak. You have been gone too long from her, and too much has befallen you both. And what you loved, what both of you truly loved, was not each other. It was the time of your life. It was the spring of your years, and life running strong in you, and war on your doorstep and your strong, perfect bodies. Look back, in truth. You will find you recall fully as many quarrels and tears as you do lovemaking and kisses. Fitz. Be wise. Let her go, and keep those memories intact. Save what you can of her, and let her keep what she can of the wild and daring boy she loved. Because both he and that merry little miss are no more than memories anymore.\u0026quot; She shook her head. \u0026ldquo;No more than memories. Somewhere inside me, a madman raged in his cell, but I chose not to know of that. You are not a man as ordinary men are. They think they have a right to all beasts; to hunt them and eat them, or to subjugate them and rule their lives. You know you have no such right to mastery. The horse that carries you will do so because he wishes to, as does the wolf that hunts beside you. You have a deeper sense of yourself in the world. You believe you have a right, not to rule it, but to be part of it. Predator or prey; there is no shame to being either one. I looked at her, wanting her with all the lust of my months alone and untouched. But I knew also that for that deeper hunger for companionship and understanding, she offered me no more solace than any man might find in his own hand. Other men might dream of high honors or riches or deeds of valor sung by minstrels. I wanted to come to a small cot as light faded, to sit in a chair by a fire, my back aching from work, my hands rough with toil, and hold a little girl in my lap while a woman who loved me told me of her day. Perhaps there can be no thanks nor any blame, but only recognition of the forces that brought us and bound us to our inevitable fates. Some people say there is relief in the sharing of cares and pains. To me there was no catharsis, only an unearthing of rotting corpses of memories, a baring of still suppurating wounds. All of history, a great wheel, turning inexorably. Just as seasons come and go, just as the moon moves endlessly through her cycle, so does time. The same wars are fought, the same plagues descend, the same folk, good or evil, rise to power. Humanity is trapped on that wheel, doomed endlessly to repeat the mistakes we have we have already made. Unless someone comes to change it. I take myself with me. That\u0026rsquo;s all I truly need, or own. He pleasures his body with drugs and deadens his soul with his savage amusements. Aye, and spreads the disease to those around him, until they take no satisfaction in a contest of skill that draws no blood, until games are only amusing if lives are wagered on the outcome. In every building, in every garden, at every turn the visitor finds the austere beauty and simplicity of color and form that are the Mountain ideal. The overall impression that one carries away is of tranquillity and joy in the natural world. The chosen simplicity of life there may lead the visitor to question his own choice in life. Take my memories of my mother, and the feelings that went with them. I do not want to know them at all. Take the ache in my throat when I think of Molly, take all the sharp-edged, bright-colored days I recall with her. Take their brilliance and leave me but the shadows of what I saw and felt. Let me recall them without cutting myself on their sharpness. Take my days and nights in Regal’s dungeons. It is enough to know what was done to me. Take it to keep, and let me stop feeling my face against that stone floor, hearing the sound of my nose breaking, smelling and tasting my own blood. Take my hurt that I never knew my father, take my hours of staring up at his portrait when the great hall was empty and I could do so alone. Take my— Fitz. Stop. You give her too much, there will be nothing left of you. I know of nothing more warming than hot meat and tea and good fellowship. I supposed there was something about me that made all elderly folk assume my time was at their disposal. Death is always at the edge of now. Liveship Traders Trilogy Ship of Magic The Mad Ship Ship of Destiny Tawny Man Trilogy Fool’s Errand Golden Fool Fool’s Fate Rain Wild Chronicles Dragon Keeper Dragon Haven City of Dragons Blood of Dragons The Fitz and the Fool Trilogy Fool’s Assassin Fool’s Quest Assassin’s Fate ","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-realm-of-the-elderlings-by-robin-hobb/","summary":"Currently, I have only managed to finish off the first trilogy in the mammoth that Realm of the Elderlings happens to be but I plan to power through the series soon and add the remainder of the quotes so sit back and enjoy what I have to offer. If you feel a few hidden gems are missing, email me!\nFarseer Trilogy Assassin’s Apprentice When you cut pieces out of the truth to avoid looking like a fool you end up looking like a moron instead.","title":"Best Quotes from Realm of the Elderlings"},{"content":"Vol 1: Preludes and Nocturnes But where shall wisdom be found? And where is the place of understanding? Man knoweth not the price thereof; neither is it found in the land of the living … for the price of wisdom is above rubies. CHORONZON: I am a dire wolf, prey-stalking, lethal prowler. MORPHEUS: I am a hunter, horse-mounted, wolf-stabbing. CHORONZON: I am a horsefly, horse-stinging, hunter-throwing. MORPHEUS: I am a spider, fly-consuming, eight legged. CHORONZON: I am a snake, spider-devouring, posion-toothed. MORPHEUS: I am an ox, snake-crushing, heavy-footed. CHORONZON: I am an anthrax, butcher bacterium, warm-life destroying. MORPHEUS: I am a world, space-floating, life-nurturing. CHORONZON: I am a nova, all-exploding\u0026hellip; planet-cremating. MORPHEUS: I am the Universe \u0026ndash; all things encompassing, all life embracing. CHORONZON: I am Anti-Life, the Beast of Judgment. I am the dark at the end of everything. The end of universes, gods, worlds\u0026hellip; of everything. Sss. And what will you be then, Dreamlord? MORPHEUS: I am hope. I will be a wise and tolerant monarch, dispensing justice fairly, and only setting nightmares to rip out the minds of the evil and wicked. Or just anybody I don\u0026rsquo;t like. You are utterly the stupidest, most self-centered, appallingest excuse for an anthropomorphic personification in this or any other plane! You get what anybody gets - you get a lifetime. What power would hell have if those imprisoned here would not be able to dream of heaven? I think I’ll dismember the world and then I’ll dance in the wreckage. Vol 2: The Doll’s House There is another version of the tale. That is the tale the women tell each other, in their private language that the men-children are not taught, and that the old men are too wise to learn. And in that version of the tale perhaps things happened differently. But then, that is a women\u0026rsquo;s tale, and it is never told to men. For love is no part of the dream-world. Love belongs to desire, and desire is always cruel. And they left, slowly, one by one, with reluctance, leaving the safety of the light for the chill certainties of the darkness. It seemed like the night sucked them up, took them into its dark heart. It seemed like the darkness swallowed them … perhaps it did. If my dream was true, then everything we know, everything we think we know is a lie. It means the world\u0026rsquo;s about as solid and as reliable as a layer of scum on the top of a well of black water which goes down forever, and there are things in the depths that I don\u0026rsquo;t even want to think about. It means that we\u0026rsquo;re just dolls. We don\u0026rsquo;t have a clue what\u0026rsquo;s really going down, we just kid ourselves that we\u0026rsquo;re in control of our lives while a paper\u0026rsquo;s thickness away things that would drive us mad if we thought about them for too long play with us, and move us around from room to room, and put us away at night when they\u0026rsquo;re tired, or bored. And Desire walks the endless pathways of its body, certain that he, or she, or it, is in sole and only control of its destiny. The only inhabitant of the twilight realm of Desire; and it feels nothing like a doll. Nothing like a doll at all. Human beings are the creatures of desire. They twist and bend as I require it. If I thought otherwise, I would crack, like Delirium or I would abandon my realm, like our lost brother. If there is a moral to this part of the story, and I distrust morals in the same way that I distrust beginnings, it is simply this: know that with which you deal. I am coming through the barriers you have erected in this mind. I am coming, though the way be ardous and strange. Nothing will stop me. As I travel, I admire the craftsmanship in the construction of this maze, admire the traps and pitfalls they have wrought. You have learned well, my servants. To force the child to construct these barriers insides its mind, in its effort to escape the physical world; to build an island of dream alone and untouched by the true Dreaming\u0026hellip; This takes skill. My admiration does not lessen my anger. I am dream. I am coming. Vol 3: Dream Country The fraternity of critics, in reality a dark brethren, linked by profane rites and blood vows. To destroy an author they sacrifice a child and perform a critical mass. Gryphons shouldn\u0026rsquo;t marry. Vampires don\u0026rsquo;t dance. A man who inherits a library card to the library in Alexandria. A rose bush, a nightingale, and a black rubber dog-collar. Justice?\u0026quot; It repeated. \u0026ldquo;Justice is a delusion you will not find on this or any other sphere. And wisdom? Wisdom is no part of dreams, lithe walker, though dreams are a part of the sum of each life\u0026rsquo;s experiences, which is the only wisdom that matters. But revelation? That is the province of dream. If enough of us dream, if a bare thousand of us dream, we can change the world. We can dream it anew! A world in which no cat suffers from the malice of humans. In which no cats are killed by human caprice. A world that we rule. Dream the world. Not this pallid shadow of reality. Dream the world the way it truly is. A world in which all cats are queens and kings of creation. That is my message. And I shall keep moving, keep repeating it, until I die. Or until a thousand cats hear my words, and believe them, and dream, and we come again to paradise. It is a fool\u0026rsquo;s prerogative to utter truths that no one else will speak. I am that merry wanderer of the night\u0026rsquo;? I am that giggling-dangerous-totally-bloody-psychotic-menace-to-life-and-limb, more like it. Things have changed, and will change more; and Gaia no longer welcomes us as once she did. But he did not understand the price. Mortals never do. They only see the prize, their heart\u0026rsquo;s desire, their dream\u0026hellip; But the price of getting what you want, is getting what once you wanted. The lunatic, the lover, and the poet are of imagination all compact — One sees more devils than vast hell can hold. That is the madman. The Lover, all as frantic, sees Helen\u0026rsquo;s beauty in a brow of egypt. The poet\u0026rsquo;s eye, in a fine frenzy rolling, doth glance from heaven to earth, from earth to heaven. And, as imagination bodies forth the forms of things unknown, the poet\u0026rsquo;s pen turns them to shapes, and gives to airy nothing a local habitation and a name. And you\u0026rsquo;ve come for me? Blessed, merciful death. You\u0026rsquo;ve come to make it all stop? When the first living thing existed, I was there, waiting. When the last living thing dies, my job is finished. I\u0026rsquo;ll put the chairs on the tables, turn out the lights and lock the universe behind me when I leave. Vol 4: Season of Mists The garden of Destiny. You would know it if you saw it. After all, you will wander it until you die. Or beyond. For the paths are long, and even in death there is no ending to them. The paths fork and divide. With each step you take through Destiny\u0026rsquo;s garden, you make a choice; and every choice determines future paths. However, at the end of a lifetime of walking you might look back, and see only one path stretching out behind you; or look ahead, and see only darkness. Desire smells almost subliminally of summer peaches, and casts two shadows: one black and sharp-edged, the other translucent and forever wavering, like heat haze … Desire smiles in brief flashes, like sunlight glinting from a knife-edge. And there is much else that is knife-like about Desire … never a possession, always the possessor, with skin as pale as smoke, and eyes tawny and sharp as yellow wine: Desire is everything you have ever wanted. Whoever you are. Whatever you are. Everything. Despair, Desire\u0026rsquo;s sister and twin, is queen of her own bleak bourne. It is said that scattered through Despair\u0026rsquo;s domain are a multitude of tiny windows, hanging in the void. Each window looks out onto a different scene, being, in our world, a mirror. Sometimes you will look into a mirror and feel the eyes of Despair upon you, feel her hook catch and snag on your heart. Destiny is the oldest of the Endless; in the beginning was the Word, and it was traced by hand on the first page of his book, before ever it was spoken aloud … Destiny smells of dust and the libraries of night. He leaves no footprints. He casts no shadow. Delirium was once Delight. And although that was long ago now, even today her eyes are badly matched; one eye is a vivid emerald green, spattered with silver flecks that move; her other eye is vein blue. Who knows what Delirium sees, through her mismatched eyes? To absent friends, lost loves, old gods and the seasons of mists. And may each and everyone of us always give the devil his due. I am Breschau of Livonia. I ripped out the tongues of those who spoke against me, and cut the unborn babes from the wombs of my enemies women, that they would not become warriors to rise against me. I took my mother by force, and I strangled my sister when she would not consent to my advances. Soon my name was whispered in the night by mothers to terrify their babes into obedience, I am Breschau, who bathed in the blood of children. I am Breschau, who forced the true prophets of the lord to dance upon plates of hot iron, under which fires were burning, and I laughed as they danced. I am Breschau, and when my mistress was unfaithful to me, I cut the nose from her face and wore it about my neck. As for the woman, I had her sewn to her lover, and, skin to skin, I left them in the desert to be eaten by ravens, and I laughed as I heard them scream. I am Breschau, and this is my punishment. I could never again be an angel … innocence, once lost, can never be regained. Times have changed, and we have changed with them. We are expanding — assimilating other pantheons, later gods, new altars and icons. Marilyn Monroe is ours now, as are King Kong and Lady Liberty. I\u0026rsquo;m the amazing Cain. If you enjoyed our show, tell your friends. If you didn\u0026rsquo;t, I trust you get throat cancer and die without ever again uttering another word. Goodnight. There will be no more wanton violence; no further suffering, inflicted without reason or explanation. We will hurt you. And we are not sorry. But we do not do it to punish you. We do it to redeem you. Because afterward, you\u0026rsquo;ll be a better person … and because we love you. One day you\u0026rsquo;ll thank us for it. Why do they blame me for all their little failings? They use my name as if I spent my entire days sitting on their shoulders, forcing them to commit acts they would otherwise find repulsive. \u0026lsquo;The devil made me do it.\u0026rsquo; I have never made one of them do anything. Never. They live their own tiny lives. I do not live their lives for them. October knew, of course, that the action of turning a page, of ending a chapter or of shutting a book, did not end a tale. Having admitted that, he would also avow that happy endings were never difficult to find: \u0026ldquo;It is simply a matter,\u0026rdquo; he explained to April, \u0026ldquo;of finding a sunny place in a garden, where the light is golden and the grass is soft; somewhere to rest, to stop reading, and to be content. There must be a Hell. A place for demons. A place for the damned. Hell is Heaven\u0026rsquo;s reflection. Heaven\u0026rsquo;s shadow. They define each other. There must be a Hell for without Hell, Heaven has no meaning. Vol 5: A Game of You Everybody has a secret world inside of them. I mean everybody. All of the people in the whole world, I mean everybody — no matter how dull and boring they are on the outside. Inside them they\u0026rsquo;ve all got unimaginable, magnificent, wonderful, stupid, amazing worlds\u0026hellip; Not just one world. Hundreds of them. In the pale light of the Moon I play the game of you. Whoever I am. Whoever you are. All sense of where I am, of who I am and where I’m going, has been swallowed by the dark. And I walk through the stars and sky\u0026hellip; a trinity of dreams beneath the moon. And then it crumbled in his hand. It was just dust\u0026hellip; Sand\u0026hellip; A glittering, multicolored sand that fell away into the chilly wind at the end of the world. Where others ask timorously, Thessalian, your kind commanded, directed, ordered. It galled us. But the others are dust now, and less than dust. And one day you, in your turn, will join them. And then our compact will be over, and you will be ours, as they are. Vol 6: Fables and Reflections It is sometimes a mistake to climb, it is always a mistake never even to make the attempt. Sometimes you wake up. Sometimes the fall kills you. And sometimes, when you fall, you fly. Desire? You disappoint me. This evening\u0026rsquo;s display: bringing back a dead man to offer Norton the pleasures of the world. It was not very subtle. They say that the world rests on the backs of 36 living saints — 36 unselfish men and women. Because of them the world continues to exist. They are the secret kings and queens of this world. Will you kill all the poets, then, St. Just? Will you kill all the dreamers? From that Time on, the Song of Orpheus has always hovered at the Edge of my Perception; a Melody I can never fully recover, try howsoever I will. And do not doubt that there are many in Authority to whom I would sing it, if \u0026rsquo;twere within my Power. Listen, blood of my blood, although I\u0026rsquo;m a hard man to anger, and I love you deeply, if you interrupt me again so help me I\u0026rsquo;ll rip out your throat with my teeth. The young man\u0026rsquo;s mother had died bringing him into the world; she gave him life, a small wooden finger-ring, and the name Vassily. There have been worse legacies. We write our names in the sand, and then the waves roll in and wash them away. Forewarned is seldom forearmed. Not even in the shifting zones. There are really patterns. It was a revelation, of a kind. Dreams and sand and stories. Deserts and cities and time. You attend the funeral, you bid the dead farewell. You grieve. Then you continue with your life. And at times the fact of her absence will hit you like a blow to the chest, and you will weep. But this will happen less and less as time goes on. She is dead. You are alive. So live. Thou hast made the Furies cry, Orpheus. They will never forgive you for that. \u0026ldquo;Abel, the younger brother, had lots of sheep, and he had given the land\u0026rsquo;s creator a sheep as present. Cain, who was the older, grew fruit and vegetables, and he\u0026rsquo;d given the land\u0026rsquo;s creator some of them. The creator liked the sheep best, because it was all funny and fluffy and white — \u0026quot; \u0026ldquo;Because it was warm, steaming meat. It was a bleeding sacrifice, you bloody idiot!\u0026rdquo; There was also in that room the Other Egg of the Phoenix. (For the Phoenix when its time comes to die lays two eggs, one black, one white: From the white egg hatches the Phoenix-bird itself, when its time is come, but what hatches from the black egg no one knows.) You have called me here, Haroun. It is unwise to summon what you cannot dismiss. Bodies are strange. Some people have real problems with the stuff that goes on inside them. You find out that inside someone you know there\u0026rsquo;s just mucus and meat and slime and bone. They menstruate, salivate, defecate and cry. You know? Sometimes it can just kill the romance. You know that? Vol 7: Brief Lives Some things are changeless. People love, and die, they dream, destroy, despair, go mad. They fulfill their destinies, live out the course of their lives. We fulfill our function, as they fulfill theirs\u0026hellip;that will not change. \u0026ldquo;I mean, does this always happen when a girlfriend walks out on him?\u0026rdquo; \u0026ldquo;Not at all. For example, after the Nada affair he razed the Dreaming. It was a bleak, lonely desert for centuries. I remember the first flower that grew. The first time he smiled again …\u0026rdquo; You lived what anybody gets, Bernie. You got a lifetime. No more. No less. \u0026ldquo;What\u0026rsquo;s the name of the word for the precise moment when you realize that you\u0026rsquo;ve actually forgotten how it felt to make love to somebody you really liked a long time ago?\u0026rdquo; \u0026ldquo;There isn\u0026rsquo;t one.\u0026rdquo; \u0026ldquo;Oh. I thought maybe there was.\u0026rdquo; \u0026ldquo;Is there a word for forgetting the name of someone when you want to introduce them to someone else at the same time you realize you\u0026rsquo;ve forgotten the name of the person you\u0026rsquo;re introducing them to as well?\u0026rdquo; \u0026ldquo;No.\u0026rdquo; I know how gods begin, Roger. We start as dreams. Then we walk out of dreams into the land. We are worshipped and loved, and take power to ourselves. And then one day there\u0026rsquo;s no one left to worship us. And in the end, each little god and goddess takes its last journey back into dreams … and what comes after, not even we know. The garden of Destiny. Look behind you: shadow-plays of memory are forever being enacted, on paths you walked too long ago. Do you know why I stopped being Delight, my brother? I do. There are things not in your book. There are paths outside this garden. You would do well to remember that. I like the stars. It\u0026rsquo;s the illusion of permanence, I think. I mean, they\u0026rsquo;re always flaring up and caving in and going out. But from here, I can pretend … I can pretend that things last. I can pretend that lives last longer than moments. Gods come, and gods go. Mortals flicker and flash and fade. Worlds don\u0026rsquo;t last; and stars and galaxies are transient, fleeting things that twinkle like fireflies and vanish into cold and dust. But I can pretend. I like airplanes. I like anywhere that isn\u0026rsquo;t a proper place. I like in betweens. Touched by her fingers, the two surviving chocolate people copulate desperately, losing themselves in a melting frenzy of lust, spending the last of their brief borrowed lives in a spasm of raspberry cream and fear. The stuff you bring back from dreams is free. I walk across the dreaming sands under the pale moon: through the dreams of countries and cities, past dreams of places long gone and times beyond recall. When you dream, sometimes you remember. When you wake, you always forget. Hey, that\u0026rsquo;s life, flick it off if you can\u0026rsquo;t take a joke. To bite off your shadow is neither easy nor painless. It demands a single-mindedness that is almost unknown in this day. Three blind hummingbirds hang in the air like jewels of iridescent scarlet and cobalt; then, one by one, they fade, all color leeched from them, and fall lifeless into the mists, to be eaten by rats. Despair places the cold metal barb of her hook onto the surface of her eye. And then she pushes, piercing cornea and lens, and ripping free the aqueous humor and vitreous humor to run like tears down her cheek, into her hand\u0026hellip;The pain distracts her, a little. But still, she remembers\u0026hellip; Vol 8: World’s End I don\u0026rsquo;t really like driving in snow. There\u0026rsquo;s something about the motion of the falling snowflakes that hurts my eye, throws my sense of balance all to hell. It\u0026rsquo;s like tumbling into a field of stars. You need help, matey. You and that there young lady. That red stuff, that\u0026rsquo;s blood that is. Meant to be on the inside, it is. Bad sign if it\u0026rsquo;s not on the inside, that\u0026rsquo;s what I says. If a city has a personality, maybe it also has a soul. Maybe it dreams. That is where I believe we have come. We are in the dreams of the city. That\u0026rsquo;s why certain places hover on the brink of recognition; why we almost know where we are. \u0026ldquo;If the city was dreaming,\u0026rdquo; he told me, \u0026ldquo;then the city is asleep. And I do not fear cities sleeping, stretched out unconscious around their rivers and estuaries, like cats in the moonlight. Sleeping cities are tame and harmless things. What I fear,\u0026rdquo; he said, \u0026ldquo;is that one day the cities will waken. That one day the cities will rise.\u0026rdquo; We of Faerie are of the wild magic. We are not creatures of spells and grimoires. We are spells, and we are written of in grimoires. The words said over my father\u0026rsquo;s body were hollow and dumb, and I couldn\u0026rsquo;t find it in me to cry, not then. I knew I was watching the real thing here. There was true grief in each step they took across the sky, and they shouldered the casket as if they were shouldering the weight of the world. She looked at me. Maybe she was trying to tell me something; I don\u0026rsquo;t know. She probably didn\u0026rsquo;t even know I was there. But I\u0026rsquo;ll always love her. All my life. It was like I knew her. Like she was my oldest, dearest friend. The kind of person you can tell anything to, no matter how bad, and they\u0026rsquo;ll still love you, because they know you. Is there any person in the world who does not dream? Who does not contain within them worlds unimagined? “Sometimes big things happen, and they echo. Those echoes crash across worlds. They are the ripples in the fabric of things. Often they manifest as storms. Reality is a fragile thing, after all. Nothing you do in the White House matters. You know why not? Because as far as the mass of voting morons is concerned, while you\u0026rsquo;re in office, you\u0026rsquo;ll still be the worst single president they\u0026rsquo;ve ever had until you stop. Then it\u0026rsquo;s some other poor bastard\u0026rsquo;s turn. And even that doesn\u0026rsquo;t matter, because ten, twenty years later, they\u0026rsquo;ll look back on you, and wonder why they didn\u0026rsquo;t appreciate you when they had you\u0026hellip;You don\u0026rsquo;t get to make a difference. You don\u0026rsquo;t get to do jack shit. You know what you get?\u0026hellip;You get an entry in the history book, and every 15 minutes, every day at Disneyworld, an animatronic puppet wearing your face will wave or nod when the spotlight hits it. In the manner of one recognizing a line from a familiar poem in a strange book. Vol 9: The Kindly Ones It\u0026rsquo;s never what they want, and if we give them what they think they want, they like it less than ever. Been there, Remiel. Done that, wore the tee-shirt, ate the burger, bought the original cast album, choreographed the legions of the damned and orchestrated the screaming… You didn\u0026rsquo;t join the rebellion, not because you felt I was wrong, but because you were too damned scared. What would you have done, had I won? Told me that you\u0026rsquo;d always supported me ideologically? That you were secretly cheering me on the whole time? It has always been the prerogative of children and half-wits to point out that the emperor has no clothes. But the half-wit remains a half-wit, and the emperor remains an emperor. The gods we prayed to when we were young used up their time so long ago. They cannot answer anymore. You don\u0026rsquo;t have to believe in God. But what about gods? Eh? The plurality of powers and dominions. The lords and ladies of field and thorn, of asphalt and sewer, gods of telephone and whore, gods of hospital and car-crash? There is a madness needed to touch the gods, yes, this is true. Few mortals possess it, the willingness to step away from the protection of sanity. To walk into the wild woods of madness. I am the mother to Odin\u0026rsquo;s stallion, Sleipnir. I am the father of Fenrir sun-eater and of Hel half-rotted and of Jormungund the world-serpent. I am Loki Scar-Lip, Loki Skywalker, Loki Giant\u0026rsquo;s Child, Loki Lie-Smith. I am Loki, who is fire and wit and hate. I am Loki. And I will be under an obligation to no one. You puzzle me, Dream-Weaver. Are you a spider who\u0026rsquo;s spun a web of cunning and deceit and now waits patiently for his prey to come to him; or are you a deer frozen by the light of a hunter\u0026rsquo;s flame, as disaster comes toward you? And she wrapped her slimy body around his, and she whispered his name into his ear. And he screams, \u0026ldquo;Kill me, for God\u0026rsquo;s sake, just get it over with.\u0026rdquo; But she licked her lips with her long worm tongue, and she shakes her head. \u0026ldquo;A meal this good must never be hurried,\u0026rdquo; she says. \u0026ldquo;Just hold still boy, and let me enjoy myself.\u0026rdquo; And she takes her first, gentle bite from his cheek with her sharp, sharp teeth … Dancing salamanders brought the children silver plates filled with exotic ice-creams of various flavors, and with fruits they had never seen before and would never see again … although they would dream of them, on rare occasions, until they died. The things we do make echos. Our existence deforms the universe. That\u0026rsquo;s responsibility. I am honor-bound to warn you to stay on the path through the castle. Straying from the path could mean your destruction. Have you ever been in love? Horrible, isn\u0026rsquo;t it? It makes you so vulnerable. It opens your chest and it opens up your heart and it means that someone can get inside you and mess you up. You build up all these defenses. You build up this whole armor, for years, so nothing can hurt you, then one stupid person, no different from any other stupid person, wanders into your stupid life… You give them a piece of you. They don\u0026rsquo;t ask for it. They do something dumb one day like kiss you, or smile at you, and then your life isn\u0026rsquo;t your own anymore. Love takes hostages. It gets inside you. It eats you out and leaves you crying in the darkness, so a simple phrase like \u0026ldquo;maybe we should just be friends\u0026rdquo; or \u0026ldquo;how very perceptive\u0026rdquo; turns into a glass splinter working its way into your heart. It hurts. Not just in the imagination. Not just in the mind. It\u0026rsquo;s a soul-hurt, a body-hurt, a real gets-inside-you-and-rips-you-apart pain. Nothing should be able to do that. Especially not love. I hate love. Me? Lady, I\u0026rsquo;m your worst nightmare — a pumpkin with a gun. Gods fear us. Demons fear us. We have hounded kings and angels. We have taken vengeance on worlds and universes. We are the Kindly Ones. We are the Eumenides. This will be felt across worlds and days as a reality storm; and, as it plays its course, conflicting realities will fall and spin and shatter across time and existence. If you don\u0026rsquo;t let me in, I will turn you into a demon half-face waitress night-club lady with a crush on her boss, and I\u0026rsquo;ll make it so you\u0026rsquo;ve been that from the beginning of time to now and you\u0026rsquo;ll never ever know if you were anything else and it will itch inside your head worse than little bugses. It\u0026rsquo;s the same old story … whatever it turns into on the way, whatever it is you originally undertake to spin or knit or weave, keep it going long enough and, in the end, my lilies, it\u0026rsquo;s always a winding sheet. Flowers gathered in the morning, Afternoon they blossom on, Still are withered by the evening, You can be me when I\u0026rsquo;m gone. We make choices. No one else can live our lives for us. And we must confront and accept the consequences of our actions We do what we do, because of who we are. If we did otherwise, we would not be ourselves. I\u0026rsquo;ve been making a list of the things they don\u0026rsquo;t teach you at school. They don\u0026rsquo;t teach you how to love somebody. They don\u0026rsquo;t teach you how to be famous. They don\u0026rsquo;t teach you how to be rich or how to be poor. They don\u0026rsquo;t teach you how to walk away from someone you don\u0026rsquo;t love any longer. They don\u0026rsquo;t teach you how to know what\u0026rsquo;s going on in someone else\u0026rsquo;s mind. They don\u0026rsquo;t teach you what to say to someone who\u0026rsquo;s dying. They don\u0026rsquo;t teach you anything worth knowing. Can\u0026rsquo;t say I\u0026rsquo;ve ever been too fond of beginnings, myself. Messy little things. Give me a good ending anytime. You know where you are with an ending. I suppose the point you grow up is the point you let the dreams go. There\u0026rsquo;s but three Furies found in spacious hell. But in a great man\u0026rsquo;s breast three thousand dwell. Vol 10: The Wake The bonds of family bind both ways. They bind us up, support us, help us, and they are also a bond from which it is difficult, perhaps impossible to extricate oneself. We were never lovers, and we never will be, now. I do not regret that, however. I regret the conversations we never had, the time we did not spend together. I regret that I never told him that he made me happy, when I was in his company. The world was the better for his being in it. These things alone do I now regret: things left unsaid. And he is gone, and I am old. I cared for him, very much. He was so wise; he seemed so certain of the rightness of his actions. And I, who do nothing but doubt, admired that in him. He was a creature of hope, for dreams are hopes, and echoes of hopes, and I am a creature of despair. It\u0026rsquo;s astonishing how much trouble one can get oneself into, if one works at it. And astonishing how much trouble one can get oneself out of, if one simply assumes that everything will, somehow or other, work out for the best. I am banished to the grey waste at the end of the world, but I mourn myself no longer; I cherish the pain in my hand. I imagine the taste of the mulberries in the violet dusk. And tomorrow I shall arrive in the town of Wei. My own fine words notwithstanding, life is no play. We meet people once, and never see them again. There is no shape to events, no point at which we turn to the audience for their praise. No time at which we step behind the stage, to see the actors changing their wigs, and painting their faces, and muttering their lines. Look,i\u0026rsquo;m sorry it\u0026rsquo;s over too. But good things have to end; stories have to end. It\u0026rsquo;s what gives them meaning. Death’s a funny thing. I used to think it was a big, sudden thing, like a huge owl that would swoop down out of the night and carry you off. I don’t anymore. I think it’s a slow thing. Like a thief who comes to your house day after day, taking a little thing here and a little thing there, and one day you walk round your house and there’s nothing there to keep you, nothing to make you want to stay. And then you lie down and shut up forever. Lots of little deaths until the last big one. Whatever happened to me in my life, happened to me as a writer of plays. I\u0026rsquo;d fall in love, or fall in lust. And at the height of my passion, I would think, \u0026lsquo;So this is how it feels,\u0026rsquo; and I would tie it up in pretty words. I watched my life as if it were happening to someone else. My son died. And I was hurt, but I watched my hurt, and even relished it, a little, for now I could write a real death, a true loss. My heart was broken by my dark lady, and I wept, in my room, alone; but while I wept, somewhere inside I smiled. For I knew I could take my broken heart and place it on the stage of The Globe, and make the pit cry tears of their own. Summer is a time for popsicles. But you will remember it, in the soft, lost, slumbering moments between waking and true sleep: remember the whispering voices of the Gods of Earth and Heaven, the piping laughter of innocent chaos, the frightened rusting of cold order\u0026hellip;the voices of the living. The voices of the dead. They will haunt your sleep until you die. ","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-sandman-graphic-novel-by-neil-gaiman/","summary":"Vol 1: Preludes and Nocturnes But where shall wisdom be found? And where is the place of understanding? Man knoweth not the price thereof; neither is it found in the land of the living … for the price of wisdom is above rubies. CHORONZON: I am a dire wolf, prey-stalking, lethal prowler. MORPHEUS: I am a hunter, horse-mounted, wolf-stabbing. CHORONZON: I am a horsefly, horse-stinging, hunter-throwing. MORPHEUS: I am a spider, fly-consuming, eight legged.","title":"Best Quotes from Sandman (Neil Gaiman)"},{"content":"The Last Wish You make as good a fisherman as a goat’s arse makes a trumpet. \u0026ldquo;Kings,” continued Calanthe, “divide people into two categories—those they order around, and those they buy—because they adhere to the old and banal truth that everyone can be bought. \u0026ldquo;The sun shines differently, the air is different, water is not as it used to be. The things we used to eat, made use of, are dying, diminishing, deteriorating. We never cultivated the land. Unlike you humans we never tore at it with hoes and ploughs. All decent predictions rhyme. It\u0026rsquo;s an invention, a fairy tale devoid of any sense, like all the legends in which good spirits and fortune tellers fulfill wishes. Stories like that are made up by poor simpletons, who can\u0026rsquo;t even dream of fulfilling their wishes and desires themselves. I\u0026rsquo;m pleased you\u0026rsquo;re not one of them, Geralt of Rivia. It makes you closer in spirit to me. If I want something, I don\u0026rsquo;t dream of it—I act. And I always get what I want. People,\u0026rdquo; Geralt turned his head, \u0026ldquo;like to invent monsters and monstrosities. Then they seem less monstrous themselves. When they get blind-drunk, cheat, steal, beat their wives, starve an old woman, when they kill a trapped fox with an axe or riddle \u0026hellip;\u0026rdquo; Lesser, greater, middling, it\u0026rsquo;s all the same. Proportions are negotiated, boundaries blurred. I\u0026rsquo;m not a pious hermit, I haven\u0026rsquo;t done only good in my life. But if I\u0026rsquo;m to choose between one evil and another, then I prefer not to choose at all.”\u0026rdquo; I manage because I have to. Because I\u0026rsquo;ve no other way out. Because I\u0026rsquo;ve overcome the vanity and pride of being different, I\u0026rsquo;ve understood that they are a pitiful defense against being different. Because I\u0026rsquo;ve understood that the sun shines differently\u0026hellip;\u0026quot; A mother, you son-of-a-bitch, is sacred! Sword of Destiny There is never a second opportunity to make a first impression. Life is full of hazards, selection also occurs in life, Geralt. Misfortune, sicknesses and wars also select. Defying destiny may be just as hazardous as succumbing to it. To me, Madam Yennefer, wisdom includes the ability to turn a deaf ear to foolish or insincere advice. For there are some… things… which there is no way of obtaining, even by magic. And there are gifts which may not be accepted, if one is unable to… reciprocate them… with something equally precious. Otherwise such a gift will slip through the fingers, melt like a shard of ice gripped in the hand. Then only regret, the sense of loss and hurt will remain… Emotions, whims and lies, fascinations and games. Feelings and their absence. Gifts, which may not be accepted. Lies and truth. What is truth? The negation of lies? Or the statement of a fact? And if the fact is a lie, what then is the truth? Who is full of feelings which torment him, and who is the empty carapace of a cold skull? Who? What is truth, Geralt? What is the essence of truth?’ Organising festivities, the poet argued, satisfied people’s profound and natural needs. From time to time, the bard maintained, a chap has to meet other people in a place where he can have a laugh and a singsong, gorge himself on kebabs and pierogis, drink beer, listen to music and squeeze a girl as he swung her around in the dance. If every chap wanted to satisfy those needs, Dandelion argued, individually, periodically and randomly, an indescribable mess would arise. For that reason holidays and festivities were invented. And since holidays and festivities exist, a chap ought to frequent them. A choice which should be respected, for it is the holy and irrefutable right of every woman. You’re taking umbrage like a tart whose lack of chastity has been pointed out to her. A little sacrifice, he thought, just a little sacrifice. For this will calm her, a hug, a kiss, calm caresses. She doesn’t want anything more. And even if she did, what of it? For a little sacrifice, a very little sacrifice, is beautiful and worth… Were she to want more… It would calm her. A quiet, calm, gentle act of love. And I… Why, it doesn’t matter, because Essi smells of verbena, not lilac and gooseberry, doesn’t have cool, electrifying skin. Essi’s hair is not a black tornado of gleaming curls, Essi’s eyes are gorgeous, soft, warm and cornflower blue; they don’t blaze with a cold, unemotional, deep violet. Essi will fall asleep afterwards, turn her head away, open her mouth slightly, Essi will not smile in triumph. For Essi… Essi is not Yennefer. I know that in order to unite two people, destiny is insufficient. Something more is necessary than destiny. Blood of Elves Remember,” she repeated, “magic is Chaos, Art and Science. It is a curse, a blessing and progress. It all depends on who uses magic, how they use it, and to what purpose. And magic is everywhere. All around us. Easily accessible. Intolerance and superstition has always been the domain of the more stupid amongst the common folk and, I conjecture, will never be uprooted, for they are as eternal as stupidity itself. There, where mountains tower today, one day there will be seas; there where today seas surge, will one day be deserts. But stupidity will remain stupidity. Nicodemus de Boot, Meditations on life, Happiness and Prosperity. None who contemplates and commits violence has the right to consider himself better than an ordinary criminal. Because it is in the nature of all violence to lead inevitably to crime. Chaos extends its talons towards you, still uncertain if you will be its tool or an obstacle in its design. That which Chaos shows you in your dreams is this very uncertainty. Chaos is afraid of you, Child of Destiny. But it wants you to be the one who feels fear. Chaos cannot show you what it really is. So it is showing you the future, showing you what is going to happen. It wants you to be afraid of the coming days, so that fear of what is going to happen to you and those closest to you will start to guide you, take you over completely. That is why Chaos is sending you those dreams. Now, you are going to show me what you see in your dreams. And you are going to be frightened. And then you will forget and master your fear. You mistake the stars reflected in the surface of the lake at night for the heavens. The special army, skipper, isn’t just any old unit. It’s not some shitty shield-bearers who just need to be shown which end of the javelin pricks. A special army has to know how to fight like nobody’s business! Taste of forbidden fruit, made all the more exciting. So you’ve got the honest truth and faithful history of a world where he who shatters the skulls of others most efficiently and swells women’s bellies fastest, reigns. You are an anachronistic witcher, and I\u0026rsquo;m a modern witcher, moving with the spirit of the times. Which is why you\u0026rsquo;ll soon be out of work and I\u0026rsquo;ll be doing well. Soon there won\u0026rsquo;t be any strigas, wyverns, endriagas or werewolves left in the world. But there\u0026rsquo;ll always be whoresons. Time of Contempt Believe me, little one, you should only regret inactivity, indecisiveness, hesitation. You shouldn’t regret actions or decisions, even if they occasionally end in sadness and regret. Everything ends.’ No, he thought. I don’t want it to be like that. I’m tired. Too tired to accept the perspective of endings which are beginnings, and starting everything over again. In each of us lies a creditor and a debtor at once and the art is for the reckoning to tally inside us. Thus do I take you, to have and to hold, for the most wondrous and terrible of times, for the best and the worst of times, by day and by night, in sickness and in health. For I love you with all my heart and swear to love you eternally, until death do us part. Traditional marriage vows. There is only she, Yennefer, at my side, here and now, and only she matters. Here and now. And what she was long ago, where she was long ago and who she was with long ago doesn’t have any, doesn’t have the slightest, importance. Now she’s with me, here, among you all. With me, with no one else. That’s what I’m thinking right now, thinking only about her, thinking endlessly about her, smelling the scent of her perfume and the warmth of her body. And you can all choke on your envy. Is there still good sense in the world? Or do only contemptibility and contempt remain? You can’t afford the luxury of spurning contempt. A time of contempt is approaching, Witcher, my friend, a time of great and utter contempt. You have to adapt. Baptism of Fire Were I to attempt to be good to everyone, to the entire world and to all the creatures living in it, it would be a drop of fresh water in the salt sea. In other words, a wasted effort. Thus, I decided to do specific good; good which would not go to waste. I’m good to myself and my immediate circle. You surround the dead with veneration and memory, you dream of immortality, and in your myths and legends there’s always someone being resurrected, conquering death. But were your esteemed late great-grandfather really to suddenly rise from the grave and order a beer, panic would ensue. When there’s hunger you don’t share out your food, you just devour the weakest ones. This practice works among wolves, since it lets the healthiest and strongest individuals survive. But among sentient races selection of that kind usually allows the biggest bastards to survive and dominate the rest. Life, it turns out, isn’t poetry! And do you know why? Because it’s so resistant to criticism! We enter the world as a minute part of the life we are given, and from then on we are ever paying off debts. To ourselves. For ourselves. In order for the final reckoning to tally. Everyone has some kind of debt. Such is life. Debts and liabilities, obligations, gratitude, payments, doing something for someone. Or perhaps for ourselves? For in fact we are always paying ourselves back and not someone else. Each time we are indebted we pay off the debt to ourselves. In each of us lies a creditor and a debtor at once and the art is for the reckoning to tally inside us. We enter the world as a minute part of the life we are given, and from then on we are ever paying off debts, To ourselves. For ourselves. In order for the final reckoning to tally. A baptism of fire, the Witcher thought, furiously striking and parrying blows. I was meant to pass through fire for Ciri. And I\u0026rsquo;m passing through fire in a battle which is of no interest to me at all. Which I don\u0026rsquo;t understand in any way. The fire that was meant to purify me is just scorching my hair and face. Ambition is the undoing of men. They always want what they know to be impossible and unattainable. And they are unaware of the attainable. Your talk\u0026rsquo;s so clever it makes my head spin,\u0026rsquo; Milva snorted. \u0026lsquo;And all your wisdom comes down to what\u0026rsquo;s under a woman\u0026rsquo;s skirt. Woeful philosophers. The Tower of the Swallow Why should I give up revenge? On behalf of what? Moral principles? And what of the higher order of things, in which evil deeds are punished? For you, a philosopher and ethicist, an act of revenge is bad, disgraceful, unethical and illegal. But I ask: where is the punishment for evil? Who has it and grants access? The Gods, in which you do not believe? The great demiurge-creator, which you decided to replace the gods with? Or maybe the law? [\u0026hellip;] I know what evil is afraid of. Not your ethics, Vysogota, not your preaching or moral treaties on the life of dignity. Evil is afraid of pain, mutilation, suffering and at the end of the day, death! The dog howls when it is badly wounded! Writhing on the ground and growls, watching the blood flow from its veins and arteries, seeing the bone that sticks out from a stump, watching its guts escape its open belly, feeling the cold as death is about to take them. Then and only then will evil begin to beg, \u0026lsquo;Have mercy! I regret my sins! I\u0026rsquo;ll be good, I swear! Just save me, do not let me waste away!\u0026rsquo;. Yes, hermit. That is the way to fight evil! When evil wants to harm you, inflict pain - anticipate them, it\u0026rsquo;s best if evil does not expect it. But if you fail to prevent evil, if you have been hurt by evil, then avenge him! It is best when they have already forgotten, when they feel safe. Then pay them in double. In triple. An eye for an eye? No! Both eyes for an eye! A tooth for a tooth? No! All their teeth for a tooth! Repay evil! Make it wail in pain, howling until their eyes pop from their sockets. And then, you can look under your feet and boldly declare that what is there cannot endanger anyone, cannot hurt anyone. How can someone be a danger, when they have no eyes? How can someone hurt when they have no hands? They can only wait until they bleed to death. No one wants to suffer. But that is the fate of each. And some suffer more. Not necessarily of their own volition. It\u0026rsquo;s not about to enduring the suffering. It\u0026rsquo;s about how you endure it. Draw me not without reason; sheath me not without honour. The line delineated by destiny is winding, but leads to this tower. Towards annihilation, towards the destruction of established values, of the established order. But there, above the tower, do you see? A swallow. The symbol of hope. Take this sword. And may what is to come about, come about. Your vision is a world where people are afraid to venture out after dark; not for fear of cut-throats, but of the guardians of public order. For, after all, the result of all great crackdowns on miscreants is always that the miscreants enter the ranks of the guardians of public order en masse. the Dank Wilderness was so dank it would have been difficult to imagine anything danker. You often disguise gaps in your education with sarcastic or exaggerated simplifications which you consider witty. The world you envision is made for a witcher. A witcher would never be short of work in it. Instead of codes, articles and peevish platitudes about justice, your idea creates lawlessness, anarchy, the licence and self-serving of princelings and mandarins, the officiousness of careerists wanting to endear themselves to their superiors, the blind vindictiveness of fanatics, the cruelty of assassins, retribution and sadistic vengeance. Your vision is a world where people are afraid to venture out after dark; not for fear of cut-throats, but of the guardians of public order. For, after all, the result of all great crackdowns on miscreants is always that the miscreants enter the ranks of the guardians of public order en masse. ","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-witcher-series-by-andrzej-sapkowski/","summary":"The Last Wish You make as good a fisherman as a goat’s arse makes a trumpet. \u0026ldquo;Kings,” continued Calanthe, “divide people into two categories—those they order around, and those they buy—because they adhere to the old and banal truth that everyone can be bought. \u0026ldquo;The sun shines differently, the air is different, water is not as it used to be. The things we used to eat, made use of, are dying, diminishing, deteriorating.","title":"Best Quotes from The Witcher"},{"content":" Heard joke once: Man goes to doctor. Says he\u0026rsquo;s depressed. Says life seems harsh and cruel. Says he feels all alone in a threatening world where what lies ahead is vague and uncertain. Doctor says, \u0026ldquo;Treatment is simple. Great clown Pagliacci is in town tonight. Go and see him. That should pick you up.\u0026rdquo; Man bursts into tears. Says, \u0026ldquo;But doctor\u0026hellip;I am Pagliacci. Looked at sky through smoke heavy with human fat and God was not there. The cold, suffocating dark goes on forever and we are alone. Live our lives, lacking anything better to do. Devise reason later. Born from oblivion; bear children, hell-bound as ourselves, go into oblivion. There is nothing else. Existence is random. Has no pattern save what we imagine after staring at it for too long. No meaning save what we choose to impose. This rudderless world is not shaped by vague metaphysical forces. It is not God who kills the children. Not fate that butchers them or destiny that feeds them to the dogs. It’s us. Only us. Streets stank of fire. The void breathed hard on my heart, turning its illusions to ice, shattering them. Was reborn then, free to scrawl own design on this morally blank world. Thermodynamic miracles\u0026hellip; events with odds against so astronomical they\u0026rsquo;re effectively impossible, like oxygen spontaneously becoming gold. I long to observe such a thing. And yet, in each human coupling, a thousand million sperm vie for a single egg. Multiply those odds by countless generations, against the odds of your ancestors being alive; meeting; siring this precise son; that exact daughter\u0026hellip; Until your mother loves a man she has every reason to hate, and of that union, of the thousand million children competing for fertilization, it was you, only you, that emerged. To distill so specific a form from that chaos of improbability, like turning air to gold\u0026hellip; that is the crowning unlikelihood. The thermodynamic miracle. But\u0026hellip;if me, my birth, if that\u0026rsquo;s a thermodynamic miracle\u0026hellip; I mean, you could say that about anybody in the world!. Yes. Anybody in the world. ..But the world is so full of people, so crowded with these miracles that they become commonplace and we forget\u0026hellip; I forget. We gaze continually at the world and it grows dull in our perceptions. Yet seen from the another\u0026rsquo;s vantage point. As if new, it may still take our breath away. Come\u0026hellip;dry your eyes. For you are life, rarer than a quark and unpredictable beyond the dreams of Heisenberg; the clay in which the forces that shape all things leave their fingerprints most clearly. Dry your eyes\u0026hellip; and let\u0026rsquo;s go home. No. Not even in the face of Armageddon. Never compromise. Dog carcass in alley this morning, tire tread on burst stomach. This city is afraid of me. I have seen its true face. The streets are extended gutters and the gutters are full of blood and when the drains finally scab over, all the vermin will drown. The accumulated filth of all their sex and murder will foam up about their waists and all the whores and politicians will look up and shout \u0026ldquo;Save us!\u0026rdquo;\u0026hellip; and I\u0026rsquo;ll look down and whisper \u0026ldquo;No.” We\u0026rsquo;re all puppets, Laurie. I\u0026rsquo;m just a puppet who can see the strings. There is no future. There is no past. Do you see? Time is simultaneous, an intricately structured jewel that humans insist on viewing one edge at a time, when the whole design is visible in every facet. In an era of stress and anxiety, when the present seems unstable and the future unlikely, the natural response is to retreat and withdraw from reality, taking recourse either in fantasies of the future or in modified visions of a half-imagined past. You know what I wish? I wish all the scum of the Earth had one throat and I had my hands about it. We have laboured long to build a heaven, only to find it populated with horrors. Nothing ends, Adrian. Nothing ever ends. A live body and a dead body contain the same number of particles. Structurally, there\u0026rsquo;s no discernible difference. Life and death are unquantifiable abstracts. Why should I be concerned? I sat on the bed. I looked at the Rorschach blot. I tried to make it look like a spreading tree, shadows pooled beneath it, but it didn\u0026rsquo;t. It looked more like a dead cat I once found, the fat, glistening grubs writhing blindly, squirming over each other, frantically tunneling away from the light. But even that isn\u0026rsquo;t the real horror. The horror is this: in the end, it is simply a picture of empty meaningless blackness. Who makes the world? Perhaps the world is not made. Perhaps nothing is made. Perhaps it simply is, has been, will always be there…a clock without a craftsman. I\u0026rsquo;m disappointed in you, Adrian. I\u0026rsquo;m very disappointed. Reassembling myself was the first trick I learned. It didn\u0026rsquo;t kill Osterman. Did you really think it would kill me? I have walked across the surface of the sun. I have witnessed events so tiny and so fast, they could hardly be said to have occurred at all. But you, Adrian, you\u0026rsquo;re just a man. The world\u0026rsquo;s smartest man poses no more threat to me than does its smartest termite. We are alone. Live our lives, lacking anything better to do. Devise reason later. Does the human heart know chasms so abysmal? A world grows up around me. Am I shaping it, or do its predetermined contours guide my hand? The disciplines of physical exercise, meditation and study aren\u0026rsquo;t terribly esoteric. The means to attain a capability far beyond that of the so-called ordinary person are within the reach of everyone, if their desire and their will are strong enough. I have studied science, art, religion and a hundred different philosophies. Anyone could do as much. By applying what you learn and ordering your thoughts in an intelligent manner it is possible to accomplish almost anything. Possible for an \u0026lsquo;ordinary person.\u0026rsquo; There\u0026rsquo;s a notion I\u0026rsquo;d like to see buried: the ordinary person. Ridiculous. There is no ordinary person. The photograph is in my hand. It is the photograph of a man and a woman. They are at an amusement park, in 1959. [\u0026hellip;] I\u0026rsquo;m tired of looking at the photograph now. I open my fingers. It falls to the sand at my feet. I am going to look at the stars. They are so far away, and their light takes so long to reach us\u0026hellip; All we ever see of stars are their old photographs. [\u0026hellip;] It\u0026rsquo;s October, 1985. I\u0026rsquo;m basking in the two-million-year-old light of Andromeda. I can see the supernova that Ernst Hartwig discovered in 1885, a century ago. It scintillates, a wink intended for the Trilobites, all long dead. Supernovas are where gold forms; the only place. All gold comes from supernovas Don\u0026rsquo;t tell me they didn\u0026rsquo;t have a choice. Now the whole world stands on the brink, staring down into bloody hell, all those liberals and intellectuals and smooth-talkers\u0026hellip; and all of a sudden, nobody can think of anything to say. Is it possible, I wonder, to study a bird so closely, to observe and catalogue its peculiarities in such minute detail, that it becomes invisible? Is it possible that while fastidiously calibrating the span of its wings or the length of its tarsus, we somehow lose sight of its poetry? That in our pedestrian descriptions of a marbled or vermiculated plumage we forfeit a glimpse of living canvases, cascades of carefully toned browns and golds that would shame Kandinsky, misty explosions of color to rival Monet? I believe that we do. I believe that in approaching our subject with the sensibilities of statisticians and dissectionists, we distance ourselves increasingly from the marvelous and spell binding planet of imagination whose gravity drew us to our studies in the first place. That is not to say that we should cease to establish facts and verify our information, but merely to suggest that unless those facts can be imbued with the flash of poetic insight then they remain dull gems; semi-precious stones scarcely worth the collecting. In this world, you shouldn\u0026rsquo;t rely on help from anybody. In the end, a man stands alone. Truly, life is hell and death\u0026rsquo;s rough hand our only deliverance. Who watches the Watchmen? My parents reached America the year I was born, 1939. Entering school, I was already exceptionally bright, my perfect scores on early test papers arousing such suspicion that I carefully achieved only average grades thereafter. What caused such precociousness? My parents were intellectually unremarkable, possessing no obvious genetic advantages. Perhaps I decided to be intelligent rather than otherwise? Perhaps we all make such decisions, though that seems a callous doctrine. By seventeen, my parents were both dead, and I faced a different decision. My inheritance offered life long idle luxury, and yet, needing nothing, I burned with the paradoxical urge to do everything. Do you understand? My intellect set me apart. Faced with difficult choices, I knew nobody whose advice might prove useful. Nobody living. The only human being with whom I felt any kinship died three hundred years before the birth of Christ. Alexander of Macedonia. I idolized him. A young army commander, he\u0026rsquo;d swept along the coasts of Turkey and Phoenicia, subduing Egypt before turning his armies towards Persia. He died, thirty-three, ruling most of the civilized world. Ruling without barbarism! At Alexandria, he instituted the ancient world\u0026rsquo;s greatest seat of learning. True, people died \u0026hellip; perhaps unnecessarily, though who can judge such things? Yet how he nearly approached his vision of a united world! I was determined to measure my success against his. Firstly, I gave away my inheritance. to demonstrate the possibility of achieving anything starting from nothing. Next, I departed for Northern Turkey, to retrace my hero\u0026rsquo;s steps. I wanted to match his accomplishment, bringing an age of illumination to a benighted world. Heh. I wanted to have something to say should we meet in the hall of legends. I followed the path of Alexander\u0026rsquo;s war machine along the black sea coast, imagining his armies taking port after port, blood on ancient bronze. Perhaps because of the challenge it represented: the ancient world\u0026rsquo;s greatest puzzle was there, a knot that couldn\u0026rsquo;t be untied. Alexander cut it in two with his sword. Lateral thinking, you see. Centuries ahead of his time. Heading south, he entered Egypt through Memphis, where they proclaimed him son of Amon, judge of the dead, whose name means \u0026ldquo;hidden one.\u0026rdquo; Under rule from Alexandria, the classic culture of the great Pharaohs was restored. I followed him through Babylon, up through Kabul to Samarkhand then down the Indus, where he met the first elephants of war. Where he\u0026rsquo;d turned back to quell dissent at home, I travelled on, through China and Tibet, gathering martial wisdom as I went. Alexander returned to Babylon to die of an infection, aged thirty-three, amongst its ruined ziggurats. I saw at last his failings. He\u0026rsquo;d not united all the world, nor built a unity that would survive him. Disillusioned, but determined, to complete my odyssey, I followed his corpse to its resting place in Alexandria. The night before returning to America, I wandered into the desert and ate a ball of hashish I\u0026rsquo;d been given in Tibet. The ensuing vision transformed me. Wading through powdered history, I heard dead kings walking underground, heard fanfares through human skulls. Alexander had merely resurrected an age of Pharaohs, their wisdom, truly immortal, now inspired me. What intellectual magnificence their system encouraged.. Ptolemy seeking the universe\u0026rsquo;s pivot from his light-house at Pharos, Eratosthenes, measuring the world using only shadows … their greatest secrets entrusted to their servants, buried alive with them in sand-flooded chambers. Adopting Ramses the Second\u0026rsquo;s Greek name and Alexander\u0026rsquo;s free-booting style, I resolved to apply antiquity\u0026rsquo;s teachings to today\u0026rsquo;s world. Thus began my path to conquest … conquest not of men. But of the evils that beset them. Today, that conquest becomes assured, in which your unquestioning assistance has proven invaluable. Do you comprehend the triumph which you have contributed, the secret glory that it affords? Do you understand my shame at so inadequate a reward? Soliloquy to all of his subordinates, as he watches them die from the poison he has provided them. It don\u0026rsquo;t matter squat because inside thirty years the nukes are gonna be flyin\u0026rsquo; like maybugs\u0026hellip;and then Ozzy here is gonna be the smartest man on the cinder. Now, pardon me, but I got an appointment. See you in the funny papers. Everything is preordained. Even my responses. Dr. Malcolm Long: Walter, is what happened to Kitty Genovese really proof that the whole of mankind is rotten? I think you\u0026rsquo;ve been conditioned with a negative worldview. There are good people, too, like\u0026hellip; -Rorschach: Like you? -Dr. Malcolm Long: Me? Oh, well, I wouldn\u0026rsquo;t say that. I\u0026hellip; -Rorschach: No. You just think it. Think you\u0026rsquo;re \u0026lsquo;good people\u0026rsquo;. Why are you spending so much time with me, Doctor? -Dr. Malcolm Long: Uh\u0026hellip;well, because I care about you, and because I want to make you well\u0026hellip; -Rorschach: Other people, down in cells. Behavior more extreme than mine. You don\u0026rsquo;t spend any time with them\u0026hellip;but then, they\u0026rsquo;re not famous. Won\u0026rsquo;t get your name in the journals. You don\u0026rsquo;t want to make me well. Just want to know what makes me sick. You\u0026rsquo;ll find out. Have patience, Doctor. You\u0026rsquo;ll find out. Once you realize what a joke everything is, being the Comedian is the only thing that makes sense. Life isn’t divided into genres. It’s a horrifying, romantic, tragic, comical, science-fiction cowboy detective novel … with a bit of pornography if you\u0026rsquo;re lucky. ","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-watchmen-graphic-novel-by-alan-moore/","summary":"Heard joke once: Man goes to doctor. Says he\u0026rsquo;s depressed. Says life seems harsh and cruel. Says he feels all alone in a threatening world where what lies ahead is vague and uncertain. Doctor says, \u0026ldquo;Treatment is simple. Great clown Pagliacci is in town tonight. Go and see him. That should pick you up.\u0026rdquo; Man bursts into tears. Says, \u0026ldquo;But doctor\u0026hellip;I am Pagliacci. Looked at sky through smoke heavy with human fat and God was not there.","title":"Best Quotes from Watchmen (Alan Moore)"},{"content":" A book is as dangerous as any journey you might take. The person who closes the back cover may not be the same one that opened the front one. Treat them with respect. Your death has not been waiting for your arrival at the appointed hour: it has, for all the years of your life, been racing towards you with the fierce velocity of time\u0026rsquo;s arrow. It cannot be evaded, it cannot be bargained with, deflected or placated. All that is given to you is the choice: meet it with open eyes and peace in your heart, go gentle to your reward. Or burn bright, take up arms, and fight the bitch. Trust is the most insidious of poisons. Trust sidesteps all of your precautions. All the world and more has rushed eternity’s length to reach this beat of your heart, screaming down the years. And if you let it, the universe, without drawing breath, will press itself through this fractured second and race to the next, on into a new eternity. Everything that is, the echoes of everything that ever was, the roots of all that will ever be, must pass through this moment that you own. Your only task is to give it pause—to make it notice. Knowledge is a rug of a certain size, and the world is larger. It’s not what remains uncovered at the edges that should worry you, rather what is swept beneath. I had a son and I breathed for him. When we buried him my sorrow consumed me. Was my grief holy? Was it unique? All our hurts and follies are repeated time and again. Generation after generation live the same mistakes. But we’re not like the fire, or the river, or the wind—we’re not a single tune, its variations played out forever, a game of numbers until the world dies. I have been too young to know, and I have been too old to care. It’s in that oh-so-narrow slice between that memories are made. And hunger must be fed. Any weapon begs use. The blade itself incites to violence. Nothing is as cruel as a righteous man. She had been righteous in her time. Never be so focused on picking a lock that you forget kicking down the door is also an option. Spend too long watching the long game and the short game will kill you. There is a purity in rage. It will burn out sorrow. For a time. It will burn out fear. Even cruelty and hatred will seek shelter, rage wants none of them, only to destroy. Rage is the gift our nature gives to us, shaped by untold years. Why discard it? There might not be a meaning to the world, or in it, but that does not mean that what we do has no meaning. Moons might rise and fall, empires wax and wane, even the stars come and go, but there are constants too, and though the story of our kind is ever-changing it is also always the same. A million words won’t push the ice back, not even the breadth of a finger. But one word will break a heart, two will mend it, and three will lay the highest low. But that was never the heart of Sweet Mercy. The shipheart wasn’t the foundation of the convent. It was always the faith. Always the notion that all men and women are our brothers and our sisters. And that faith doesn’t end with borders. It doesn’t care about heresies used to divide us, or whether you speak your prayers to a white star, or to the fields and forests and stones. All leaves must fall in time, she had said. The lives we lived fall away from us, but something remains, something that is part of the tree. ","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-book-of-the-ancestors-trilogy-by-mark-lawrence/","summary":"A book is as dangerous as any journey you might take. The person who closes the back cover may not be the same one that opened the front one. Treat them with respect. Your death has not been waiting for your arrival at the appointed hour: it has, for all the years of your life, been racing towards you with the fierce velocity of time\u0026rsquo;s arrow. It cannot be evaded, it cannot be bargained with, deflected or placated.","title":"Best Quotes from Book of the Ancestors"},{"content":"Prince of Thorns Memories are dangerous things. You turn them over and over, until you know every touch and corner, but still you\u0026rsquo;ll find an edge to cut you. Each day the memories weigh a little heavier. Each day they drag you down that bit further. You wind them around you, a single thread at a time, and you weave your own shroud, you build a cocoon, and in it madness grows. You sit here with your yesterdays queuing at your shoulder. You listen to their reproach and curse those that gave you life. There’s something brittle in me that will break before it bends. I’ll tell you now. That silence almost beat me. It’s the silence that scares me. It’s the blank page on which I can write my own fears. The spirits of the dead have nothing on it. The dead one tried to show me hell, but it was a pale imitation of the horror I can paint on the darkness in a quiet moment. I’ll tell you now. That silence almost beat me. It’s the silence that scares me. It’s the blank page on which I can write my own fears. The spirits of the dead have nothing on it. The dead one tried to show me hell, but it was a pale imitation of the horror I can paint on the darkness in a quiet moment. I think maybe we die every day. Maybe we\u0026rsquo;re born new each dawn, a little changed, a little further on our own road. When enough days stand between you and the person you were, you\u0026rsquo;re strangers. Maybe that\u0026rsquo;s what growing up is. Maybe I have grown up. What\u0026rsquo;s it going to take for you to open that door? Gold? Blood? Your name and password. My name is Honorous Jorg Ancrath, my password is divine right. Now open the fecking door. You got responsibilities when you’re a leader. You got a responsibility not to kill too many of your men. Or who’re you going to lead? She had the eyes of everyone who ever cared. In the end, it seems we\u0026rsquo;re just toys, easy to break and hard to mend. We wrap up our violent and mysterious world in a pretense of understanding. We paper over the voids of our comprehension with science and religion, and make believe that order has been imposed. And, for the most of it, the fiction works. We skim across the surfaces, heedless of the depths below. Dragonflies flitting over a lake, miles deep, pursuing erratic paths to pointless ends. Until that moment when something from the cold unknown reaches up to take us. The biggest lies we save for ourselves. We play a game in which we are gods, in which we make choices, and the current follows in our wake. We pretend a separation from the wild. Pretend that a man’s control runs deep, that civilization is more than a veneer, that reason will be our companion in dark places. The weakest spot in a good defence is designed to fail. It falls, but in falling it summons the next defence and so on. It’s all about layers. At the end of it all you’ll find yourself facing the thing you sought to avoid all along, only now you’re weaker, and it’s forewarned. Jesu, Rike, you been gargling rat piss again? The perfumes of lords and ladies tickled at my nose: lavender and orange oil. On the road, shit has the decency to stink. I think you need to have lived more to truly know a man\u0026rsquo;s heart. You need to have made more transactions in life to know the worth of the coin you spend so freely. I held my arms wide to the rain. I could feel it beat on me. I didn’t have so many years under my belt, but even to me the rain fell like memory. It woke wild nights in me when I stood on the Keep Tower, on the edge above a high fall, near drowned in the deluge and daring the lightning to touch me. War, my friends, is a thing of beauty. Those as says otherwise are losing. There is no evil, Makin,” I said. “There’s the love of things, power, comfort, sex, and there’s what men are willing to do to satisfy those lusts. And, because in some hard core of me, in some stubborn trench of selfish refusal, I could not, even at ten years of age, surrender to anything or anyone, I fought that pain. I analysed its offensive, and found its lines of attack. It festered, like the corruption in a wound turned sour, drawing strength from me. I knew enough to know the remedy. Hot iron for infection, cauterize, burn, make it pure. I cut from myself all the weakness of care. The love for my dead, I put aside, secure in a casket, an object of study, a dry exhibit, no longer bleeding, cut loose, set free. The capacity for new love, I burned out. I watered it with acid until the ground lay barren and nothing there would sprout, no flower take root. Maybe we’re born new each dawn, a little changed, a little further on our own road. When enough days stand between you and the person you were, you’re strangers. Maybe that’s what growing up is. Maybe I have grown up. Anything that you cannot sacrifice pins you. Makes you predictable, makes you weak. The first time I heard that kind of pain, my mother’s pain, something held me back. I’ll tell you it was the hook-briar which held me fast. I’ll show you the scars. But in the night, before the dreams come, a voice whispers to me that it was fear that held me back, terror that rooted me in the briar, safe while I watched them die. King of Thorns We die a little every day and by degrees we’re reborn into different men, older men in the same clothes, with the same scars. Memory is all we are. Moments and feelings, captured in amber, strung on filaments of reason. Take a man’s memories and you take all of him. Chip away a memory at a time and you destroy him as surely as if you hammered nail after nail through his skull. As a child there\u0026rsquo;s a horror in discovering the limitations of the ones you love. The time you find that your mother cannot keep you safe, that your tutor makes a mistake, that the wrong path must be taken because the grown-ups lack the strength to take the right one\u0026hellip;each of those moments is the theft of your childhood, each of them a blow that kills some part of the child you were, leaving another part of the man exposed, a new creature, tougher but tempered with bitterness and disappointment. They say that time is a great teacher but unfortunately it kills all its pupils. When pain bites, men bargain. Boys too. We twist and turn, we plead and beg, we offer our tormentors what he wants so that the hurting will stop. And when there is no torturer to placate, no hooded man with hot irons and tongs, just a burn you can\u0026rsquo;t escape, we bargain with God, or ourselves, depending on the size of our egos. A man is made of memories. It is all we are. Captured moments, the smell of a place, scenes played out time and again on a small stage. We are memories, strung on storylines—the tales we tell ourselves about ourselves, falling through our lives into tomorrow. When you\u0026rsquo;ve committed yourself to violence it takes an almost inhuman effort to stop short. It\u0026rsquo;s one of those things that once you\u0026rsquo;ve started need to be finished, rather like coitus, interrupting that\u0026rsquo;s a sin, even the priests say so. And there it is, proof if proof were needed, that though God may mould the clay and fashion some of us hale, some strong, some beautiful, inside we make ourselves, from foolish things, breakable, fragile things: the thorns, that dog, the hope that Katherine might make me better than I am. Even Rike’s blunt wants were born of losses he probably remembered only in dreams. All of us fractured, awkward collages of experience wrapped tight to present a defensible face to the world. And what makes us human is that sometimes we snap. And in that moment of release we’re closer to gods than we know. In any case I would cut myself a path to the throne even if some bastard-born herder had fathered me on a gutter-whore—genealogy can work for me or I can cut down the family tree and make a battering ram. Either way is good. Emperor of Thorns This is where the wise man turns away. This is where the holy kneel and call on God. These are the last miles, my brothers. Don\u0026rsquo;t look to me to save you. Don\u0026rsquo;t think I will not spend you. Run if you have the wit. Pray if you have the soul. Stand your ground if courage is yours. But don\u0026rsquo;t follow me. Follow me, and I will break your heart. There\u0026rsquo;s a slope down toward evil, a gentle gradient that can be ignored at each step, unfelt. It\u0026rsquo;s not until you look back, see the distant heights where you once lived, that you understand your journey. Nature shaped the claw to trap, and the tooth to kill, but the thorn\u0026hellip;the thorn\u0026rsquo;s only purpose is to hurt. Take a rest and the world catches up with you. Lesson in life—keep moving. Every man has his thorns, not of him, but in him, deep as bones. The scars of the briar mark me, a calligraphy of violence, a message of blood-writ, requiring a lifetime to translate. People who talk about the weather would be better served by admitting they\u0026rsquo;ve nothing to say but like the sound of their own voice. A victim who believes himself anticipated at every turn is not only crippled by uncertainty but also easier to predict. Men are busy dying from the moment they’re born but it’s a crawl from the cradle to the grave. Decadence begins when the budget to beautify a man\u0026rsquo;s home exceeds the coin spent to ensure its defense. Time heals all wounds, but often it’s only by the application of the grave, and while we live some hurts live with us, burning, making us twist and turn to escape them. And as we twist, we turn into other men. ","permalink":"https://atharvashah.netlify.app/posts/personal/book-quotes/the-best-quotes-from-broken-empire-trilogy-by-mark-lawrence/","summary":"Prince of Thorns Memories are dangerous things. You turn them over and over, until you know every touch and corner, but still you\u0026rsquo;ll find an edge to cut you. Each day the memories weigh a little heavier. Each day they drag you down that bit further. You wind them around you, a single thread at a time, and you weave your own shroud, you build a cocoon, and in it madness grows.","title":"Best Quotes from Broken Empire Trilogy"},{"content":" █ █ █ █ ╚ █ █ █ █ █ ═ █ ╔ █ ╔ ║ ╝ █ ═ █ ═ █ ═ █ ═ █ █ █ █ █ ╚ ╗ █ █ █ █ ═ ╗ ║ ║ ║ ╝ █ █ █ █ █ ╚ █ █ █ █ █ ═ █ ╔ █ ╔ █ ═ █ ═ █ ═ █ ═ █ ═ █ ═ █ ═ █ █ █ █ █ ═ ╗ █ ╔ █ ╔ ╝ ╗ ╝ ╗ ╝ █ █ █ ╚ █ █ █ █ █ ╚ █ ╔ ║ ║ █ ═ █ ═ █ ═ █ ═ █ ═ █ ═ █ ═ █ █ █ █ █ ═ ╗ █ █ █ ╔ ╝ ╗ ║ ║ ╝ █ █ █ █ ╚ █ █ █ █ █ ╚ ╗ ║ ║ ║ █ ═ █ ═ █ ═ █ ═ █ █ █ █ █ ═ █ █ █ █ ╔ ╝ ╗ ║ ║ ║ ╝ █ ╚ █ ═ █ ═ █ █ █ █ █ ╚ █ █ █ █ █ ═ █ ╔ ║ ║ ║ ╝ █ ═ █ ═ ╗ ╝ █ █ █ █ █ ╚ █ █ █ █ █ ═ █ █ ╔ ║ ║ ╝ ╗ █ █ ╚ ╗ █ █ ╚ █ █ ═ █ █ ╔ ╝ █ █ ╔ ╝ █ █ █ █ █ ╚ █ █ █ █ █ ═ ╗ ║ ║ ║ ║ ╝ █ █ █ █ █ ╚ █ █ █ █ █ ═ █ ╔ █ ╔ █ ═ █ ═ █ ═ █ ═ █ ═ █ ═ █ ═ █ ═ ╗ ╝ █ ═ █ ═ █ ═ ╗ ╝ ╗ ╝ My journey in the tech industry began early on as my fascination with the way computers work and the endless possibilities they offer led to teaching myself how to code and eventually turning my passion into a career. As a self-proclaimed \u0026ldquo;code cruncher,\u0026rdquo; I possess a deep understanding of the programming language Python and enjoy exploring the many libraries and frameworks available. I also have experience with a variety of data analysis tools and enjoy using them to uncover insights and patterns in large sets of data.\nI am an avid reader and am always on the lookout for the latest books. My reading preferences include Sci-Fi, High Fantasy, Fiction, Thrillers, and Supernatural. I am also a fan of graphic novels and mangas. I believe that staying informed and educated is crucial in this constantly evolving industry.\nNot just a tech nerd, I also have other interests and hobbies such as being a cinephile and a music aficionado. I enjoy watching films from all over the world, and love to discuss and debate the merits of different films and directors. I have a particular soft spot for classic, neo-noir, psychological thrillers and horror films. I enjoy traveling and exploring new places, and as a programmer, I fall into the Venn Diagram of a \u0026ldquo;gamer\u0026rdquo; and \u0026ldquo;nerd.\u0026rdquo; I enjoy playing video games and have a particular fondness for RPGs and strategy games. I also enjoy playing board games and card games with my friends.\nMy taste in music is diverse, and I enjoy listening to everything from classic rock to hip-hop and electronic music. I love discovering new artists and attending live music events. I believe that music is a powerful tool that can evoke emotions and create memories.\nI have had the opportunity to work in a few different roles in the tech industry, and have developed a variety of skills including working as a software developer, a data analyst and a consultant. Each role has taught me something new, and I am always looking for new challenges and opportunities to learn.\nI am a strong believer in the power of technology to make positive change in the world and am passionate about using my skills and knowledge to help others and make a difference. I have volunteered for various non-profit organizations and have participated in hackathons to develop solutions for social and environmental issues.\nOverall, I am a dedicated, hard-working and curious person. I am always eager to learn new things and take on new challenges. I believe that the world of technology is constantly evolving and there is always more to discover. I am excited to see where my journey in this field will take me next.\nWanna Hang? Grab All My Social Links\n","permalink":"https://atharvashah.netlify.app/about/","summary":"Get to know me better","title":""},{"content":"At This website, accessible from https://atharvashah.netlify.app/, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by This website and how we use it.\nIf you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.\nThis Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in This website. This policy is not applicable to any information collected offline or via channels other than this website. Our Privacy Policy was created with the help of the TermsFeed Free Privacy Policy Generator.\nConsent By using our website, you hereby consent to our Privacy Policy and agree to its terms.\nInformation we collect The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information.\nIf you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide.\nWhen you sign up for a newsletter, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.\nHow we use your information We use the information we collect in various ways, including to:\nProvide, operate, and maintain our website Improve, personalize, and expand our website Understand and analyze how you use our website Develop new products, services, features, and functionality Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the website, and for marketing and promotional purposes Send you emails Find and prevent fraud Log Files This website follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services\u0026rsquo; analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users\u0026rsquo; movement on the website, and gathering demographic information.\nCookies and Web Beacons Like any other website, This website uses \u0026lsquo;cookies\u0026rsquo;. These cookies are used to store information including visitors\u0026rsquo; preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users\u0026rsquo; experience by customizing our web page content based on visitors\u0026rsquo; browser type and/or other information.\nAdvertising Partners Privacy Policies You may consult this list to find the Privacy Policy for each of the advertising partners of This website.\nThird-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on This website, which are sent directly to users\u0026rsquo; browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.\nNote that This website has no access to or control over these cookies that are used by third-party advertisers.\nThird Party Privacy Policies This website\u0026rsquo;s Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options.\nYou can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers\u0026rsquo; respective websites.\nCCPA Privacy Rights (Do Not Sell My Personal Information) Under the CCPA, among other rights, California consumers have the right to:\nRequest that a business that collects a consumer\u0026rsquo;s personal data disclose the categories and specific pieces of personal data that a business has collected about consumers.\nRequest that a business delete any personal data about the consumer that a business has collected.\nRequest that a business that sells a consumer\u0026rsquo;s personal data, not sell the consumer\u0026rsquo;s personal data.\nIf you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.\nGDPR Data Protection Rights We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following:\nThe right to access – You have the right to request copies of your personal data. We may charge you a small fee for this service.\nThe right to rectification – You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete.\nThe right to erasure – You have the right to request that we erase your personal data, under certain conditions.\nThe right to restrict processing – You have the right to request that we restrict the processing of your personal data, under certain conditions.\nThe right to object to processing – You have the right to object to our processing of your personal data, under certain conditions.\nThe right to data portability – You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.\nIf you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.\nChildren\u0026rsquo;s Information Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.\nThis website does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.\n","permalink":"https://atharvashah.netlify.app/privacy-policy/","summary":"Privacy Policy","title":"Privacy Policy"}]